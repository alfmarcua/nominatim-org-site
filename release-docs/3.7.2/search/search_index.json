{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Nominatim (from the Latin, 'by name') is a tool to search OSM data by name and address and to generate synthetic addresses of OSM points (reverse geocoding). This guide comes in three parts: API reference for users of Nominatim Administration Guide for those who want to install their own Nominatim server Developer's Guide for developers of the software","title":"Introduction"},{"location":"admin/Advanced-Installations/","text":"Advanced installations \uf0c1 This page contains instructions for setting up multiple countries in your Nominatim database. It is assumed that you have already successfully installed the Nominatim software itself, if not return to the installation page . Importing multiple regions \uf0c1 To import multiple regions in your database, you need to configure and run utils/import_multiple_regions.sh file. This script will set up the update directory which has the following structure: update \u251c\u2500\u2500 europe \u2502 \u251c\u2500\u2500 andorra \u2502 \u2502 \u2514\u2500\u2500 sequence.state \u2502 \u2514\u2500\u2500 monaco \u2502 \u2514\u2500\u2500 sequence.state \u2514\u2500\u2500 tmp \u251c\u2500\u2500 combined.osm.pbf \u2514\u2500\u2500 europe \u251c\u2500\u2500 andorra-latest.osm.pbf \u2514\u2500\u2500 monaco-latest.osm.pbf The sequence.state files will contain the sequence ID, which will be used by pyosmium to get updates. The tmp folder is used for import dump. Configuring multiple regions \uf0c1 The file import_multiple_regions.sh needs to be edited as per your requirement: List of countries. eg: COUNTRIES=\"europe/monaco europe/andorra\" Path to Build directory. eg: NOMINATIMBUILD=\"/srv/nominatim/build\" Path to Update directory. eg: UPDATEDIR=\"/srv/nominatim/update\" Replication URL. eg: BASEURL=\"https://download.geofabrik.de\" DOWNCOUNTRYPOSTFIX=\"-latest.osm.pbf\" Setting up multiple regions \uf0c1 Tip If your database already exists and you want to add more countries, replace the setting up part ${SETUPFILE} --osm-file ${UPDATEDIR}/tmp/combined.osm.pbf --all 2>&1 with ${UPDATEFILE} --import-file ${UPDATEDIR}/tmp/combined.osm.pbf --index --index-instances N 2>&1 where N is the numbers of CPUs in your system. Run the following command from your Nominatim directory after configuring the file. bash ./utils/import_multiple_regions.sh Important This file uses osmium-tool. It must be installed before executing the import script. Installation instructions can be found here . Updating multiple regions \uf0c1 To import multiple regions in your database, you need to configure and run utils/update_database.sh . This uses the update directory set up while setting up the DB. Configuring multiple regions \uf0c1 The file update_database.sh needs to be edited as per your requirement: List of countries. eg: COUNTRIES=\"europe/monaco europe/andorra\" Path to Build directory. eg: NOMINATIMBUILD=\"/srv/nominatim/build\" Path to Update directory. eg: UPDATEDIR=\"/srv/nominatim/update\" Replication URL. eg: BASEURL=\"https://download.geofabrik.de\" DOWNCOUNTRYPOSTFIX=\"-updates\" Followup can be set according to your installation. eg: For Photon, FOLLOWUP=\"curl http://localhost:2322/nominatim-update\" will handle the indexing. Updating the database \uf0c1 Run the following command from your Nominatim directory after configuring the file. bash ./utils/update_database.sh This will get diffs from the replication server, import diffs and index the database. The default replication server in the script( Geofabrik ) provides daily updates. Importing Nominatim to an external PostgreSQL database \uf0c1 You can install Nominatim using a database that runs on a different server when you have physical access to the file system on the other server. Nominatim uses a custom normalization library that needs to be made accessible to the PostgreSQL server. This section explains how to set up the normalization library. Option 1: Compiling the library on the database server \uf0c1 The most sure way to get a working library is to compile it on the database server. From the prerequisites you need at least cmake, gcc and the PostgreSQL server package. Clone or unpack the Nominatim source code, enter the source directory and create and enter a build directory. cd Nominatim mkdir build cd build Now configure cmake to only build the PostgreSQL module and build it: cmake -DBUILD_IMPORTER=off -DBUILD_API=off -DBUILD_TESTS=off -DBUILD_DOCS=off -DBUILD_OSM2PGSQL=off .. make When done, you find the normalization library in build/module/nominatim.so . Copy it to a place where it is readable and executable by the PostgreSQL server process. Option 2: Compiling the library on the import machine \uf0c1 You can also compile the normalization library on the machine from where you run the import. Important You can only do this when the database server and the import machine have the same architecture and run the same version of Linux. Otherwise there is no guarantee that the compiled library is compatible with the PostgreSQL server running on the database server. Make sure that the PostgreSQL server package is installed on the machine with the same version as on the database server . You do not need to install the PostgreSQL server itself. Download and compile Nominatim as per standard instructions. Once done, you find the normalization library in build/module/nominatim.so . Copy the file to the database server at a location where it is readable and executable by the PostgreSQL server process. Running the import \uf0c1 On the client side you now need to configure the import to point to the correct location of the library on the database server . Add the following line to your your .env file: NOMINATIM_DATABASE_MODULE_PATH=\"<directory on the database server where nominatim.so resides>\" Now change the NOMINATIM_DATABASE_DSN to point to your remote server and continue to follow the standard instructions for importing .","title":"Advanced Installations"},{"location":"admin/Advanced-Installations/#advanced-installations","text":"This page contains instructions for setting up multiple countries in your Nominatim database. It is assumed that you have already successfully installed the Nominatim software itself, if not return to the installation page .","title":"Advanced installations"},{"location":"admin/Advanced-Installations/#importing-multiple-regions","text":"To import multiple regions in your database, you need to configure and run utils/import_multiple_regions.sh file. This script will set up the update directory which has the following structure: update \u251c\u2500\u2500 europe \u2502 \u251c\u2500\u2500 andorra \u2502 \u2502 \u2514\u2500\u2500 sequence.state \u2502 \u2514\u2500\u2500 monaco \u2502 \u2514\u2500\u2500 sequence.state \u2514\u2500\u2500 tmp \u251c\u2500\u2500 combined.osm.pbf \u2514\u2500\u2500 europe \u251c\u2500\u2500 andorra-latest.osm.pbf \u2514\u2500\u2500 monaco-latest.osm.pbf The sequence.state files will contain the sequence ID, which will be used by pyosmium to get updates. The tmp folder is used for import dump.","title":"Importing multiple regions"},{"location":"admin/Advanced-Installations/#configuring-multiple-regions","text":"The file import_multiple_regions.sh needs to be edited as per your requirement: List of countries. eg: COUNTRIES=\"europe/monaco europe/andorra\" Path to Build directory. eg: NOMINATIMBUILD=\"/srv/nominatim/build\" Path to Update directory. eg: UPDATEDIR=\"/srv/nominatim/update\" Replication URL. eg: BASEURL=\"https://download.geofabrik.de\" DOWNCOUNTRYPOSTFIX=\"-latest.osm.pbf\"","title":"Configuring multiple regions"},{"location":"admin/Advanced-Installations/#setting-up-multiple-regions","text":"Tip If your database already exists and you want to add more countries, replace the setting up part ${SETUPFILE} --osm-file ${UPDATEDIR}/tmp/combined.osm.pbf --all 2>&1 with ${UPDATEFILE} --import-file ${UPDATEDIR}/tmp/combined.osm.pbf --index --index-instances N 2>&1 where N is the numbers of CPUs in your system. Run the following command from your Nominatim directory after configuring the file. bash ./utils/import_multiple_regions.sh Important This file uses osmium-tool. It must be installed before executing the import script. Installation instructions can be found here .","title":"Setting up multiple regions"},{"location":"admin/Advanced-Installations/#updating-multiple-regions","text":"To import multiple regions in your database, you need to configure and run utils/update_database.sh . This uses the update directory set up while setting up the DB.","title":"Updating multiple regions"},{"location":"admin/Advanced-Installations/#configuring-multiple-regions_1","text":"The file update_database.sh needs to be edited as per your requirement: List of countries. eg: COUNTRIES=\"europe/monaco europe/andorra\" Path to Build directory. eg: NOMINATIMBUILD=\"/srv/nominatim/build\" Path to Update directory. eg: UPDATEDIR=\"/srv/nominatim/update\" Replication URL. eg: BASEURL=\"https://download.geofabrik.de\" DOWNCOUNTRYPOSTFIX=\"-updates\" Followup can be set according to your installation. eg: For Photon, FOLLOWUP=\"curl http://localhost:2322/nominatim-update\" will handle the indexing.","title":"Configuring multiple regions"},{"location":"admin/Advanced-Installations/#updating-the-database","text":"Run the following command from your Nominatim directory after configuring the file. bash ./utils/update_database.sh This will get diffs from the replication server, import diffs and index the database. The default replication server in the script( Geofabrik ) provides daily updates.","title":"Updating the database"},{"location":"admin/Advanced-Installations/#importing-nominatim-to-an-external-postgresql-database","text":"You can install Nominatim using a database that runs on a different server when you have physical access to the file system on the other server. Nominatim uses a custom normalization library that needs to be made accessible to the PostgreSQL server. This section explains how to set up the normalization library.","title":"Importing Nominatim to an external PostgreSQL database"},{"location":"admin/Advanced-Installations/#option-1-compiling-the-library-on-the-database-server","text":"The most sure way to get a working library is to compile it on the database server. From the prerequisites you need at least cmake, gcc and the PostgreSQL server package. Clone or unpack the Nominatim source code, enter the source directory and create and enter a build directory. cd Nominatim mkdir build cd build Now configure cmake to only build the PostgreSQL module and build it: cmake -DBUILD_IMPORTER=off -DBUILD_API=off -DBUILD_TESTS=off -DBUILD_DOCS=off -DBUILD_OSM2PGSQL=off .. make When done, you find the normalization library in build/module/nominatim.so . Copy it to a place where it is readable and executable by the PostgreSQL server process.","title":"Option 1: Compiling the library on the database server"},{"location":"admin/Advanced-Installations/#option-2-compiling-the-library-on-the-import-machine","text":"You can also compile the normalization library on the machine from where you run the import. Important You can only do this when the database server and the import machine have the same architecture and run the same version of Linux. Otherwise there is no guarantee that the compiled library is compatible with the PostgreSQL server running on the database server. Make sure that the PostgreSQL server package is installed on the machine with the same version as on the database server . You do not need to install the PostgreSQL server itself. Download and compile Nominatim as per standard instructions. Once done, you find the normalization library in build/module/nominatim.so . Copy the file to the database server at a location where it is readable and executable by the PostgreSQL server process.","title":"Option 2: Compiling the library on the import machine"},{"location":"admin/Advanced-Installations/#running-the-import","text":"On the client side you now need to configure the import to point to the correct location of the library on the database server . Add the following line to your your .env file: NOMINATIM_DATABASE_MODULE_PATH=\"<directory on the database server where nominatim.so resides>\" Now change the NOMINATIM_DATABASE_DSN to point to your remote server and continue to follow the standard instructions for importing .","title":"Running the import"},{"location":"admin/Deployment/","text":"Deploying Nominatim \uf0c1 The Nominatim API is implemented as a PHP application. The website/ directory in the project directory contains the configured website. You can serve this in a production environment with any web server that is capable to run PHP scripts. This section gives a quick overview on how to configure Apache and Nginx to serve Nominatim. It is not meant as a full system administration guide on how to run a web service. Please refer to the documentation of Apache and Nginx for background information on configuring the services. Note Throughout this page, we assume that your Nominatim project directory is located in /srv/nominatim-project and that you have installed Nominatim using the default installation prefix /usr/local . If you have put it somewhere else, you need to adjust the commands and configuration accordingly. We further assume that your web server runs as user www-data . Older versions of CentOS may still use the user name apache . You also need to adapt the instructions in this case. Making the website directory accessible \uf0c1 You need to make sure that the website directory is accessible for the web server user. You can check that the permissions are correct by accessing on of the php files as the web server user: sudo -u www-data head -n 1 /srv/nominatim-project/website/search.php If this shows a permission error, then you need to adapt the permissions of each directory in the path so that it is executable for www-data . If you have SELinux enabled, further adjustments may be necessary to give the web server access. At a minimum the following SELinux labelling should be done for Nominatim: sudo semanage fcontext -a -t httpd_sys_content_t \"/usr/local/nominatim/lib/lib-php(/.*)?\" sudo semanage fcontext -a -t httpd_sys_content_t \"/srv/nominatim-project/website(/.*)?\" sudo semanage fcontext -a -t lib_t \"/srv/nominatim-project/module/nominatim.so\" sudo restorecon -R -v /usr/local/lib/nominatim sudo restorecon -R -v /srv/nominatim-project Nominatim with Apache \uf0c1 Installing the required packages \uf0c1 With Apache you can use the PHP module to run Nominatim. Under Ubuntu/Debian install them with: sudo apt install apache2 libapache2-mod-php Configuring Apache \uf0c1 Make sure your Apache configuration contains the required permissions for the directory and create an alias: <Directory \"/srv/nominatim-project/website\" > Options FollowSymLinks MultiViews AddType text/html .php DirectoryIndex search.php Require all granted </Directory> Alias /nominatim /srv/nominatim-project/website After making changes in the apache config you need to restart apache. The website should now be available on http://localhost/nominatim . Nominatim with Nginx \uf0c1 Installing the required packages \uf0c1 Nginx has no built-in PHP interpreter. You need to use php-fpm as a deamon for serving PHP cgi. On Ubuntu/Debian install nginx and php-fpm with: sudo apt install nginx php-fpm Configure php-fpm and Nginx \uf0c1 By default php-fpm listens on a network socket. If you want it to listen to a Unix socket instead, change the pool configuration ( /etc/php/<php version>/fpm/pool.d/www.conf ) as follows: ; Replace the tcp listener and add the unix socket listen = /var/run/php-fpm.sock ; Ensure that the daemon runs as the correct user listen.owner = www-data listen.group = www-data listen.mode = 0666 Tell nginx that php files are special and to fastcgi_pass to the php-fpm unix socket by adding the location definition to the default configuration. root /srv/nominatim-project/website ; index search.php ; location / { try_files $uri $uri/ @php ; } location @php { fastcgi_param SCRIPT_FILENAME \" $document_root$uri.php\" ; fastcgi_param PATH_TRANSLATED \" $document_root$uri.php\" ; fastcgi_param QUERY_STRING $args ; fastcgi_pass unix:/var/run/php-fpm.sock ; fastcgi_index index.php ; include fastcgi_params ; } location ~ [^/]\\.php(/|$) { fastcgi_split_path_info ^(.+?\\.php)(/.*) $ ; if (!-f $document_root$fastcgi_script_name ) { return 404 ; } fastcgi_pass unix:/var/run/php-fpm.sock ; fastcgi_index search.php ; include fastcgi.conf ; } Restart the nginx and php-fpm services and the website should now be available at http://localhost/ .","title":"Deploy"},{"location":"admin/Deployment/#deploying-nominatim","text":"The Nominatim API is implemented as a PHP application. The website/ directory in the project directory contains the configured website. You can serve this in a production environment with any web server that is capable to run PHP scripts. This section gives a quick overview on how to configure Apache and Nginx to serve Nominatim. It is not meant as a full system administration guide on how to run a web service. Please refer to the documentation of Apache and Nginx for background information on configuring the services. Note Throughout this page, we assume that your Nominatim project directory is located in /srv/nominatim-project and that you have installed Nominatim using the default installation prefix /usr/local . If you have put it somewhere else, you need to adjust the commands and configuration accordingly. We further assume that your web server runs as user www-data . Older versions of CentOS may still use the user name apache . You also need to adapt the instructions in this case.","title":"Deploying Nominatim"},{"location":"admin/Deployment/#making-the-website-directory-accessible","text":"You need to make sure that the website directory is accessible for the web server user. You can check that the permissions are correct by accessing on of the php files as the web server user: sudo -u www-data head -n 1 /srv/nominatim-project/website/search.php If this shows a permission error, then you need to adapt the permissions of each directory in the path so that it is executable for www-data . If you have SELinux enabled, further adjustments may be necessary to give the web server access. At a minimum the following SELinux labelling should be done for Nominatim: sudo semanage fcontext -a -t httpd_sys_content_t \"/usr/local/nominatim/lib/lib-php(/.*)?\" sudo semanage fcontext -a -t httpd_sys_content_t \"/srv/nominatim-project/website(/.*)?\" sudo semanage fcontext -a -t lib_t \"/srv/nominatim-project/module/nominatim.so\" sudo restorecon -R -v /usr/local/lib/nominatim sudo restorecon -R -v /srv/nominatim-project","title":"Making the website directory accessible"},{"location":"admin/Deployment/#nominatim-with-apache","text":"","title":"Nominatim with Apache"},{"location":"admin/Deployment/#installing-the-required-packages","text":"With Apache you can use the PHP module to run Nominatim. Under Ubuntu/Debian install them with: sudo apt install apache2 libapache2-mod-php","title":"Installing the required packages"},{"location":"admin/Deployment/#configuring-apache","text":"Make sure your Apache configuration contains the required permissions for the directory and create an alias: <Directory \"/srv/nominatim-project/website\" > Options FollowSymLinks MultiViews AddType text/html .php DirectoryIndex search.php Require all granted </Directory> Alias /nominatim /srv/nominatim-project/website After making changes in the apache config you need to restart apache. The website should now be available on http://localhost/nominatim .","title":"Configuring Apache"},{"location":"admin/Deployment/#nominatim-with-nginx","text":"","title":"Nominatim with Nginx"},{"location":"admin/Deployment/#installing-the-required-packages_1","text":"Nginx has no built-in PHP interpreter. You need to use php-fpm as a deamon for serving PHP cgi. On Ubuntu/Debian install nginx and php-fpm with: sudo apt install nginx php-fpm","title":"Installing the required packages"},{"location":"admin/Deployment/#configure-php-fpm-and-nginx","text":"By default php-fpm listens on a network socket. If you want it to listen to a Unix socket instead, change the pool configuration ( /etc/php/<php version>/fpm/pool.d/www.conf ) as follows: ; Replace the tcp listener and add the unix socket listen = /var/run/php-fpm.sock ; Ensure that the daemon runs as the correct user listen.owner = www-data listen.group = www-data listen.mode = 0666 Tell nginx that php files are special and to fastcgi_pass to the php-fpm unix socket by adding the location definition to the default configuration. root /srv/nominatim-project/website ; index search.php ; location / { try_files $uri $uri/ @php ; } location @php { fastcgi_param SCRIPT_FILENAME \" $document_root$uri.php\" ; fastcgi_param PATH_TRANSLATED \" $document_root$uri.php\" ; fastcgi_param QUERY_STRING $args ; fastcgi_pass unix:/var/run/php-fpm.sock ; fastcgi_index index.php ; include fastcgi_params ; } location ~ [^/]\\.php(/|$) { fastcgi_split_path_info ^(.+?\\.php)(/.*) $ ; if (!-f $document_root$fastcgi_script_name ) { return 404 ; } fastcgi_pass unix:/var/run/php-fpm.sock ; fastcgi_index search.php ; include fastcgi.conf ; } Restart the nginx and php-fpm services and the website should now be available at http://localhost/ .","title":"Configure php-fpm and Nginx"},{"location":"admin/Faq/","text":"Troubleshooting Nominatim Installations \uf0c1 Installation Issues \uf0c1 Can a stopped/killed import process be resumed? \uf0c1 \"I accidentally killed the import process after it has been running for many hours. Can it be resumed?\" It is possible if the import already got to the indexing stage. Check the last line of output that was logged before the process was killed. If it looks like this: Done 844 in 13 @ 64.923080 per second - Rank 26 ETA (seconds): 7.886255 then you can resume with the following command: nominatim import --continue indexing If the reported rank is 26 or higher, you can also safely add --index-noanalyse . PostgreSQL crashed \"invalid page in block\" \uf0c1 Usually serious problem, can be a hardware issue, not all data written to disc for example. Check PostgreSQL log file and search PostgreSQL issues/mailing list for hints. If it happened during index creation you can try rerunning the step with nominatim import --continue indexing Otherwise it's best to start the full setup from the beginning. PHP \"open_basedir restriction in effect\" warnings \uf0c1 PHP Warning: file_get_contents(): open_basedir restriction in effect. You need to adjust the open_basedir setting in your PHP configuration ( php.ini file). By default this setting may look like this: open_basedir = /srv/http/:/home/:/tmp/:/usr/share/pear/ Either add reported directories to the list or disable this setting temporarily by adding \";\" at the beginning of the line. Don't forget to enable this setting again once you are done with the PHP command line operations. PHP timezeone warnings \uf0c1 The Apache log may contain lots of PHP warnings like this: PHP Warning: date_default_timezone_set() function. You should set the default time zone as instructed in the warning in your php.ini file. Find the entry about timezone and set it to something like this: ; Defines the default timezone used by the date functions ; https://php.net/date.timezone date.timezone = 'America/Denver' Or echo \"date.timezone = 'America/Denver'\" > /etc/php.d/timezone.ini nominatim.so version mismatch \uf0c1 When running the import you may get a version mismatch: COPY_END for place failed: ERROR: incompatible library \"/srv/Nominatim/nominatim/build/module/nominatim.so\": version mismatch pg_config seems to use bad includes sometimes when multiple versions of PostgreSQL are available in the system. Make sure you remove the server development libraries ( postgresql-server-dev-9.5 on Ubuntu) and recompile ( cmake .. && make ). I see the error \"ERROR: permission denied for language c\" \uf0c1 nominatim.so , written in C, is required to be installed on the database server. Some managed database (cloud) services like Amazon RDS do not allow this. There is currently no work-around other than installing a database on a non-managed machine. I see the error: \"function transliteration(text) does not exist\" \uf0c1 Reinstall the nominatim functions with nominatim refresh --functions and check for any errors, e.g. a missing nominatim.so file. I see the error: \"ERROR: mmap (remap) failed\" \uf0c1 This may be a simple out-of-memory error. Try reducing the memory used for --osm2pgsql-cache . Also make sure that overcommitting memory is allowed: cat /proc/sys/vm/overcommit_memory should print 0 or 1. If you are using a flatnode file, then it may also be that the underlying filesystem does not fully support 'mmap'. A notable candidate is virtualbox's vboxfs. I see the error: \"clang: Command not found\" on CentOS \uf0c1 On CentOS 7 users reported /opt/rh/llvm-toolset-7/root/usr/bin/clang: Command not found . Double-check clang is installed. Instead of make try running make CLANG=true . nominatim UPDATE failed: ERROR: buffer 179261 is not owned by resource owner Portal \uf0c1 Several users reported this during the initial import of the database. It's something PostgreSQL internal Nominatim doesn't control. And PostgreSQL forums suggest it's threading related but definitely some kind of crash of a process. Users reported either rebooting the server, different hardware or just trying the import again worked. The website shows: \"Could not get word tokens\" \uf0c1 The server cannot access your database. Add &debug=1 to your URL to get the full error message. On CentOS the website shows \"Could not connect to server\" \uf0c1 could not connect to server: No such file or directory On CentOS v7 the PostgreSQL server is started with systemd . Check if /usr/lib/systemd/system/httpd.service contains a line PrivateTmp=true . If so then Apache cannot see the /tmp/.s.PGSQL.5432 file. It's a good security feature, so use the preferred solution . However, you can solve this the quick and dirty way by commenting out that line and then run sudo systemctl daemon-reload sudo systemctl restart httpd Website reports \"DB Error: insufficient permissions\" \uf0c1 The user the webserver, e.g. Apache, runs under needs to have access to the Nominatim database. You can find the user like this , for default Ubuntu operating system for example it's www-data . Repeat the createuser step of the installation instructions. Give the user permission to existing tables GRANT usage ON SCHEMA public TO \"www-data\"; GRANT SELECT ON ALL TABLES IN SCHEMA public TO \"www-data\"; Website reports \"Could not load library \"nominatim.so\" \uf0c1 Example error message SELECT make_standard_name('3039 E MEADOWLARK LN') [nativecode=ERROR: could not load library \"/srv/nominatim/Nominatim-3.1.0/build/module/nominatim.so\": /srv/nominatim/Nominatim-3.1.0/build/module/nominatim.so: cannot open shared object file: Permission denied CONTEXT: PL/pgSQL function make_standard_name(text) line 5 at assignment] The PostgreSQL database, i.e. user postgres , needs to have access to that file. The permission need to be read & executable by everybody, but not writeable by everybody, e.g. -rwxr-xr-x 1 nominatim nominatim 297984 build/module/nominatim.so Try chmod a+r nominatim.so; chmod a+x nominatim.so . When running SELinux, make sure that the context is set up correctly . When you recently updated your operating system, updated PostgreSQL to a new version or moved files (e.g. the build directory) you should recreate nominatim.so . Try cd build rm -r module/ cmake $main_Nominatim_path && make Setup.php fails with \"DB Error: extension not found\" \uf0c1 Make sure you have the PostgreSQL extensions \"hstore\" and \"postgis\" installed. See the installation instructions for a full list of required packages. I forgot to delete the flatnodes file before starting an import. \uf0c1 That's fine. For each import the flatnodes file get overwritten. See https://help.openstreetmap.org/questions/52419/nominatim-flatnode-storage for more information. Running your own instance \uf0c1 Can I import negative OSM ids into Nominatim? \uf0c1 See this question of Stackoverflow .","title":"Troubleshooting"},{"location":"admin/Faq/#troubleshooting-nominatim-installations","text":"","title":"Troubleshooting Nominatim Installations"},{"location":"admin/Faq/#installation-issues","text":"","title":"Installation Issues"},{"location":"admin/Faq/#can-a-stoppedkilled-import-process-be-resumed","text":"\"I accidentally killed the import process after it has been running for many hours. Can it be resumed?\" It is possible if the import already got to the indexing stage. Check the last line of output that was logged before the process was killed. If it looks like this: Done 844 in 13 @ 64.923080 per second - Rank 26 ETA (seconds): 7.886255 then you can resume with the following command: nominatim import --continue indexing If the reported rank is 26 or higher, you can also safely add --index-noanalyse .","title":"Can a stopped/killed import process be resumed?"},{"location":"admin/Faq/#postgresql-crashed-invalid-page-in-block","text":"Usually serious problem, can be a hardware issue, not all data written to disc for example. Check PostgreSQL log file and search PostgreSQL issues/mailing list for hints. If it happened during index creation you can try rerunning the step with nominatim import --continue indexing Otherwise it's best to start the full setup from the beginning.","title":"PostgreSQL crashed \"invalid page in block\""},{"location":"admin/Faq/#php-open_basedir-restriction-in-effect-warnings","text":"PHP Warning: file_get_contents(): open_basedir restriction in effect. You need to adjust the open_basedir setting in your PHP configuration ( php.ini file). By default this setting may look like this: open_basedir = /srv/http/:/home/:/tmp/:/usr/share/pear/ Either add reported directories to the list or disable this setting temporarily by adding \";\" at the beginning of the line. Don't forget to enable this setting again once you are done with the PHP command line operations.","title":"PHP \"open_basedir restriction in effect\" warnings"},{"location":"admin/Faq/#php-timezeone-warnings","text":"The Apache log may contain lots of PHP warnings like this: PHP Warning: date_default_timezone_set() function. You should set the default time zone as instructed in the warning in your php.ini file. Find the entry about timezone and set it to something like this: ; Defines the default timezone used by the date functions ; https://php.net/date.timezone date.timezone = 'America/Denver' Or echo \"date.timezone = 'America/Denver'\" > /etc/php.d/timezone.ini","title":"PHP timezeone warnings"},{"location":"admin/Faq/#nominatimso-version-mismatch","text":"When running the import you may get a version mismatch: COPY_END for place failed: ERROR: incompatible library \"/srv/Nominatim/nominatim/build/module/nominatim.so\": version mismatch pg_config seems to use bad includes sometimes when multiple versions of PostgreSQL are available in the system. Make sure you remove the server development libraries ( postgresql-server-dev-9.5 on Ubuntu) and recompile ( cmake .. && make ).","title":"nominatim.so version mismatch"},{"location":"admin/Faq/#i-see-the-error-error-permission-denied-for-language-c","text":"nominatim.so , written in C, is required to be installed on the database server. Some managed database (cloud) services like Amazon RDS do not allow this. There is currently no work-around other than installing a database on a non-managed machine.","title":"I see the error \"ERROR: permission denied for language c\""},{"location":"admin/Faq/#i-see-the-error-function-transliterationtext-does-not-exist","text":"Reinstall the nominatim functions with nominatim refresh --functions and check for any errors, e.g. a missing nominatim.so file.","title":"I see the error: \"function transliteration(text) does not exist\""},{"location":"admin/Faq/#i-see-the-error-error-mmap-remap-failed","text":"This may be a simple out-of-memory error. Try reducing the memory used for --osm2pgsql-cache . Also make sure that overcommitting memory is allowed: cat /proc/sys/vm/overcommit_memory should print 0 or 1. If you are using a flatnode file, then it may also be that the underlying filesystem does not fully support 'mmap'. A notable candidate is virtualbox's vboxfs.","title":"I see the error: \"ERROR: mmap (remap) failed\""},{"location":"admin/Faq/#i-see-the-error-clang-command-not-found-on-centos","text":"On CentOS 7 users reported /opt/rh/llvm-toolset-7/root/usr/bin/clang: Command not found . Double-check clang is installed. Instead of make try running make CLANG=true .","title":"I see the error: \"clang: Command not found\" on CentOS"},{"location":"admin/Faq/#nominatim-update-failed-error-buffer-179261-is-not-owned-by-resource-owner-portal","text":"Several users reported this during the initial import of the database. It's something PostgreSQL internal Nominatim doesn't control. And PostgreSQL forums suggest it's threading related but definitely some kind of crash of a process. Users reported either rebooting the server, different hardware or just trying the import again worked.","title":"nominatim UPDATE failed: ERROR: buffer 179261 is not owned by resource owner Portal"},{"location":"admin/Faq/#the-website-shows-could-not-get-word-tokens","text":"The server cannot access your database. Add &debug=1 to your URL to get the full error message.","title":"The website shows: \"Could not get word tokens\""},{"location":"admin/Faq/#on-centos-the-website-shows-could-not-connect-to-server","text":"could not connect to server: No such file or directory On CentOS v7 the PostgreSQL server is started with systemd . Check if /usr/lib/systemd/system/httpd.service contains a line PrivateTmp=true . If so then Apache cannot see the /tmp/.s.PGSQL.5432 file. It's a good security feature, so use the preferred solution . However, you can solve this the quick and dirty way by commenting out that line and then run sudo systemctl daemon-reload sudo systemctl restart httpd","title":"On CentOS the website shows \"Could not connect to server\""},{"location":"admin/Faq/#website-reports-db-error-insufficient-permissions","text":"The user the webserver, e.g. Apache, runs under needs to have access to the Nominatim database. You can find the user like this , for default Ubuntu operating system for example it's www-data . Repeat the createuser step of the installation instructions. Give the user permission to existing tables GRANT usage ON SCHEMA public TO \"www-data\"; GRANT SELECT ON ALL TABLES IN SCHEMA public TO \"www-data\";","title":"Website reports \"DB Error: insufficient permissions\""},{"location":"admin/Faq/#website-reports-could-not-load-library-nominatimso","text":"Example error message SELECT make_standard_name('3039 E MEADOWLARK LN') [nativecode=ERROR: could not load library \"/srv/nominatim/Nominatim-3.1.0/build/module/nominatim.so\": /srv/nominatim/Nominatim-3.1.0/build/module/nominatim.so: cannot open shared object file: Permission denied CONTEXT: PL/pgSQL function make_standard_name(text) line 5 at assignment] The PostgreSQL database, i.e. user postgres , needs to have access to that file. The permission need to be read & executable by everybody, but not writeable by everybody, e.g. -rwxr-xr-x 1 nominatim nominatim 297984 build/module/nominatim.so Try chmod a+r nominatim.so; chmod a+x nominatim.so . When running SELinux, make sure that the context is set up correctly . When you recently updated your operating system, updated PostgreSQL to a new version or moved files (e.g. the build directory) you should recreate nominatim.so . Try cd build rm -r module/ cmake $main_Nominatim_path && make","title":"Website reports \"Could not load library \"nominatim.so\""},{"location":"admin/Faq/#setupphp-fails-with-db-error-extension-not-found","text":"Make sure you have the PostgreSQL extensions \"hstore\" and \"postgis\" installed. See the installation instructions for a full list of required packages.","title":"Setup.php fails with \"DB Error: extension not found\""},{"location":"admin/Faq/#i-forgot-to-delete-the-flatnodes-file-before-starting-an-import","text":"That's fine. For each import the flatnodes file get overwritten. See https://help.openstreetmap.org/questions/52419/nominatim-flatnode-storage for more information.","title":"I forgot to delete the flatnodes file before starting an import."},{"location":"admin/Faq/#running-your-own-instance","text":"","title":"Running your own instance"},{"location":"admin/Faq/#can-i-import-negative-osm-ids-into-nominatim","text":"See this question of Stackoverflow .","title":"Can I import negative OSM ids into Nominatim?"},{"location":"admin/Import/","text":"Importing the Database \uf0c1 The following instructions explain how to create a Nominatim database from an OSM planet file. It is assumed that you have already successfully installed the Nominatim software itself and the nominatim tool can be found in your PATH . If this is not the case, return to the installation page . Creating the project directory \uf0c1 Before you start the import, you should create a project directory for your new database installation. This directory receives all data that is related to a single Nominatim setup: configuration, extra data, etc. Create a project directory apart from the Nominatim software and change into the directory: mkdir ~/nominatim-planet cd ~/nominatim-planet In the following, we refer to the project directory as $PROJECT_DIR . To be able to copy&paste instructions, you can export the appropriate variable: export PROJECT_DIR=~/nominatim-planet The Nominatim tool assumes per default that the current working directory is the project directory but you may explicitly state a different directory using the --project-dir parameter. The following instructions assume that you run all commands from the project directory. Migration Tip Nominatim used to be run directly from the build directory until version 3.6. Essentially, the build directory functioned as the project directory for the database installation. This setup still works and can be useful for development purposes. It is not recommended anymore for production setups. Create a project directory that is separate from the Nominatim software. Configuration setup in .env \uf0c1 The Nominatim server can be customized via an .env configuration file in the project directory. This is a file in dotenv format which looks the same as variable settings in a standard shell environment. You can also set the same configuration via environment variables. All settings have a NOMINATIM_ prefix to avoid conflicts with other environment variables. There are lots of configuration settings you can tweak. Have a look at settings/env.default for a full list. Most should have a sensible default. Flatnode files \uf0c1 If you plan to import a large dataset (e.g. Europe, North America, planet), you should also enable flatnode storage of node locations. With this setting enabled, node coordinates are stored in a simple file instead of the database. This will save you import time and disk storage. Add to your .env : NOMINATIM_FLATNODE_FILE=\"/path/to/flatnode.file\" Replace the second part with a suitable path on your system and make sure the directory exists. There should be at least 75GB of free space. Downloading additional data \uf0c1 Wikipedia/Wikidata rankings \uf0c1 Wikipedia can be used as an optional auxiliary data source to help indicate the importance of OSM features. Nominatim will work without this information but it will improve the quality of the results if this is installed. This data is available as a binary download. Put it into your project directory: cd $PROJECT_DIR wget https://www.nominatim.org/data/wikimedia-importance.sql.gz The file is about 400MB and adds around 4GB to the Nominatim database. Tip If you forgot to download the wikipedia rankings, you can also add importances after the import. Download the files, then run nominatim refresh --wiki-data --importance . Updating importances for a planet can take a couple of hours. Great Britain, USA postcodes \uf0c1 Nominatim can use postcodes from an external source to improve searches that involve a GB or US postcode. This data can be optionally downloaded into the project directory: cd $PROJECT_DIR wget https://www.nominatim.org/data/gb_postcode_data.sql.gz wget https://www.nominatim.org/data/us_postcode_data.sql.gz Choosing the data to import \uf0c1 In its default setup Nominatim is configured to import the full OSM data set for the entire planet. Such a setup requires a powerful machine with at least 64GB of RAM and around 900GB of SSD hard disks. Depending on your use case there are various ways to reduce the amount of data imported. This section discusses these methods. They can also be combined. Using an extract \uf0c1 If you only need geocoding for a smaller region, then precomputed OSM extracts are a good way to reduce the database size and import time. Geofabrik offers extracts for most countries. They even have daily updates which can be used with the update process described in the next section . There are also other providers for extracts . Please be aware that some extracts are not cut exactly along the country boundaries. As a result some parts of the boundary may be missing which means that Nominatim cannot compute the areas for some administrative areas. Dropping Data Required for Dynamic Updates \uf0c1 About half of the data in Nominatim's database is not really used for serving the API. It is only there to allow the data to be updated from the latest changes from OSM. For many uses these dynamic updates are not really required. If you don't plan to apply updates, you can run the import with the --no-updates parameter. This will drop the dynamic part of the database as soon as it is not required anymore. You can also drop the dynamic part later using the following command: nominatim freeze Note that you still need to provide for sufficient disk space for the initial import. So this option is particularly interesting if you plan to transfer the database or reuse the space later. Reverse-only Imports \uf0c1 If you only want to use the Nominatim database for reverse lookups or if you plan to use the installation only for exports to a photon database, then you can set up a database without search indexes. Add --reverse-only to your setup command above. This saves about 5% of disk space. Filtering Imported Data \uf0c1 Nominatim normally sets up a full search database containing administrative boundaries, places, streets, addresses and POI data. There are also other import styles available which only read selected data: settings/import-admin.style Only import administrative boundaries and places. settings/import-street.style Like the admin style but also adds streets. settings/import-address.style Import all data necessary to compute addresses down to house number level. settings/import-full.style Default style that also includes points of interest. settings/import-extratags.style Like the full style but also adds most of the OSM tags into the extratags column. The style can be changed with the configuration NOMINATIM_IMPORT_STYLE . To give you an idea of the impact of using the different styles, the table below gives rough estimates of the final database size after import of a 2020 planet and after using the --drop option. It also shows the time needed for the import on a machine with 64GB RAM, 4 CPUS and NVME disks. Note that the given sizes are just an estimate meant for comparison of style requirements. Your planet import is likely to be larger as the OSM data grows with time. style Import time DB size after drop admin 4h 215 GB 20 GB street 22h 440 GB 185 GB address 36h 545 GB 260 GB full 54h 640 GB 330 GB extratags 54h 650 GB 340 GB You can also customize the styles further. A description of the style format can be found in the development section. Initial import of the data \uf0c1 Important First try the import with a small extract, for example from Geofabrik . Download the data to import. Then issue the following command from the build directory to start the import: nominatim import --osm-file <data file> 2 > & 1 | tee setup.log Notes on full planet imports \uf0c1 Even on a perfectly configured machine the import of a full planet takes around 2 days. Once you see messages with Rank .. ETA appear, the indexing process has started. This part takes the most time. There are 30 ranks to process. Rank 26 and 30 are the most complex. They take each about a third of the total import time. If you have not reached rank 26 after two days of import, it is worth revisiting your system configuration as it may not be optimal for the import. Notes on memory usage \uf0c1 In the first step of the import Nominatim uses osm2pgsql to load the OSM data into the PostgreSQL database. This step is very demanding in terms of RAM usage. osm2pgsql and PostgreSQL are running in parallel at this point. PostgreSQL blocks at least the part of RAM that has been configured with the shared_buffers parameter during PostgreSQL tuning and needs some memory on top of that. osm2pgsql needs at least 2GB of RAM for its internal data structures, potentially more when it has to process very large relations. In addition it needs to maintain a cache for node locations. The size of this cache can be configured with the parameter --osm2pgsql-cache . When importing with a flatnode file, it is best to disable the node cache completely and leave the memory for the flatnode file. Nominatim will do this by default, so you do not need to configure anything in this case. For imports without a flatnode file, set --osm2pgsql-cache approximately to the size of the OSM pbf file you are importing. The size needs to be given in MB. Make sure you leave enough RAM for PostgreSQL and osm2pgsql as mentioned above. If the system starts swapping or you are getting out-of-memory errors, reduce the cache size or even consider using a flatnode file. Testing the installation \uf0c1 Run this script to verify all required tables and indices got created successfully. nominatim admin --check-database Now you can try out your installation by running: nominatim serve This runs a small test server normally used for development. You can use it to verify that your installation is working. Go to http://localhost:8088/status.php and you should see the message OK . You can also run a search query, e.g. http://localhost:8088/search.php?q=Berlin . To run Nominatim via webservers like Apache or nginx, please read the Deployment chapter . Tuning the database \uf0c1 Accurate word frequency information for search terms helps PostgreSQL's query planner to make the right decisions. Recomputing them can improve the performance of forward geocoding in particular under high load. To recompute word counts run: nominatim refresh --word-counts This will take a couple of hours for a full planet installation. You can also defer that step to a later point in time when you realise that performance becomes an issue. Just make sure that updates are stopped before running this function. If you want to be able to search for places by their type through special key phrases you also need to import these key phrases like this: nominatim special-phrases --import-from-wiki Note that this command downloads the phrases from the wiki link above. You need internet access for the step. Installing Tiger housenumber data for the US \uf0c1 Nominatim is able to use the official TIGER address set to complement the OSM house number data in the US. You can add TIGER data to your own Nominatim instance by following these steps. The entire US adds about 10GB to your database. Get preprocessed TIGER 2020 data: cd $PROJECT_DIR wget https://nominatim.org/data/tiger2020-nominatim-preprocessed.tar.gz Import the data into your Nominatim database: nominatim add-data --tiger-data tiger2020-nominatim-preprocessed.tar.gz Enable use of the Tiger data in your .env by adding: echo NOMINATIM_USE_US_TIGER_DATA=yes >> .env Apply the new settings: nominatim refresh --functions See the developer's guide for more information on how the data got preprocessed.","title":"Import"},{"location":"admin/Import/#importing-the-database","text":"The following instructions explain how to create a Nominatim database from an OSM planet file. It is assumed that you have already successfully installed the Nominatim software itself and the nominatim tool can be found in your PATH . If this is not the case, return to the installation page .","title":"Importing the Database"},{"location":"admin/Import/#creating-the-project-directory","text":"Before you start the import, you should create a project directory for your new database installation. This directory receives all data that is related to a single Nominatim setup: configuration, extra data, etc. Create a project directory apart from the Nominatim software and change into the directory: mkdir ~/nominatim-planet cd ~/nominatim-planet In the following, we refer to the project directory as $PROJECT_DIR . To be able to copy&paste instructions, you can export the appropriate variable: export PROJECT_DIR=~/nominatim-planet The Nominatim tool assumes per default that the current working directory is the project directory but you may explicitly state a different directory using the --project-dir parameter. The following instructions assume that you run all commands from the project directory. Migration Tip Nominatim used to be run directly from the build directory until version 3.6. Essentially, the build directory functioned as the project directory for the database installation. This setup still works and can be useful for development purposes. It is not recommended anymore for production setups. Create a project directory that is separate from the Nominatim software.","title":"Creating the project directory"},{"location":"admin/Import/#configuration-setup-in-env","text":"The Nominatim server can be customized via an .env configuration file in the project directory. This is a file in dotenv format which looks the same as variable settings in a standard shell environment. You can also set the same configuration via environment variables. All settings have a NOMINATIM_ prefix to avoid conflicts with other environment variables. There are lots of configuration settings you can tweak. Have a look at settings/env.default for a full list. Most should have a sensible default.","title":"Configuration setup in .env"},{"location":"admin/Import/#flatnode-files","text":"If you plan to import a large dataset (e.g. Europe, North America, planet), you should also enable flatnode storage of node locations. With this setting enabled, node coordinates are stored in a simple file instead of the database. This will save you import time and disk storage. Add to your .env : NOMINATIM_FLATNODE_FILE=\"/path/to/flatnode.file\" Replace the second part with a suitable path on your system and make sure the directory exists. There should be at least 75GB of free space.","title":"Flatnode files"},{"location":"admin/Import/#downloading-additional-data","text":"","title":"Downloading additional data"},{"location":"admin/Import/#wikipediawikidata-rankings","text":"Wikipedia can be used as an optional auxiliary data source to help indicate the importance of OSM features. Nominatim will work without this information but it will improve the quality of the results if this is installed. This data is available as a binary download. Put it into your project directory: cd $PROJECT_DIR wget https://www.nominatim.org/data/wikimedia-importance.sql.gz The file is about 400MB and adds around 4GB to the Nominatim database. Tip If you forgot to download the wikipedia rankings, you can also add importances after the import. Download the files, then run nominatim refresh --wiki-data --importance . Updating importances for a planet can take a couple of hours.","title":"Wikipedia/Wikidata rankings"},{"location":"admin/Import/#great-britain-usa-postcodes","text":"Nominatim can use postcodes from an external source to improve searches that involve a GB or US postcode. This data can be optionally downloaded into the project directory: cd $PROJECT_DIR wget https://www.nominatim.org/data/gb_postcode_data.sql.gz wget https://www.nominatim.org/data/us_postcode_data.sql.gz","title":"Great Britain, USA postcodes"},{"location":"admin/Import/#choosing-the-data-to-import","text":"In its default setup Nominatim is configured to import the full OSM data set for the entire planet. Such a setup requires a powerful machine with at least 64GB of RAM and around 900GB of SSD hard disks. Depending on your use case there are various ways to reduce the amount of data imported. This section discusses these methods. They can also be combined.","title":"Choosing the data to import"},{"location":"admin/Import/#using-an-extract","text":"If you only need geocoding for a smaller region, then precomputed OSM extracts are a good way to reduce the database size and import time. Geofabrik offers extracts for most countries. They even have daily updates which can be used with the update process described in the next section . There are also other providers for extracts . Please be aware that some extracts are not cut exactly along the country boundaries. As a result some parts of the boundary may be missing which means that Nominatim cannot compute the areas for some administrative areas.","title":"Using an extract"},{"location":"admin/Import/#dropping-data-required-for-dynamic-updates","text":"About half of the data in Nominatim's database is not really used for serving the API. It is only there to allow the data to be updated from the latest changes from OSM. For many uses these dynamic updates are not really required. If you don't plan to apply updates, you can run the import with the --no-updates parameter. This will drop the dynamic part of the database as soon as it is not required anymore. You can also drop the dynamic part later using the following command: nominatim freeze Note that you still need to provide for sufficient disk space for the initial import. So this option is particularly interesting if you plan to transfer the database or reuse the space later.","title":"Dropping Data Required for Dynamic Updates"},{"location":"admin/Import/#reverse-only-imports","text":"If you only want to use the Nominatim database for reverse lookups or if you plan to use the installation only for exports to a photon database, then you can set up a database without search indexes. Add --reverse-only to your setup command above. This saves about 5% of disk space.","title":"Reverse-only Imports"},{"location":"admin/Import/#filtering-imported-data","text":"Nominatim normally sets up a full search database containing administrative boundaries, places, streets, addresses and POI data. There are also other import styles available which only read selected data: settings/import-admin.style Only import administrative boundaries and places. settings/import-street.style Like the admin style but also adds streets. settings/import-address.style Import all data necessary to compute addresses down to house number level. settings/import-full.style Default style that also includes points of interest. settings/import-extratags.style Like the full style but also adds most of the OSM tags into the extratags column. The style can be changed with the configuration NOMINATIM_IMPORT_STYLE . To give you an idea of the impact of using the different styles, the table below gives rough estimates of the final database size after import of a 2020 planet and after using the --drop option. It also shows the time needed for the import on a machine with 64GB RAM, 4 CPUS and NVME disks. Note that the given sizes are just an estimate meant for comparison of style requirements. Your planet import is likely to be larger as the OSM data grows with time. style Import time DB size after drop admin 4h 215 GB 20 GB street 22h 440 GB 185 GB address 36h 545 GB 260 GB full 54h 640 GB 330 GB extratags 54h 650 GB 340 GB You can also customize the styles further. A description of the style format can be found in the development section.","title":"Filtering Imported Data"},{"location":"admin/Import/#initial-import-of-the-data","text":"Important First try the import with a small extract, for example from Geofabrik . Download the data to import. Then issue the following command from the build directory to start the import: nominatim import --osm-file <data file> 2 > & 1 | tee setup.log","title":"Initial import of the data"},{"location":"admin/Import/#notes-on-full-planet-imports","text":"Even on a perfectly configured machine the import of a full planet takes around 2 days. Once you see messages with Rank .. ETA appear, the indexing process has started. This part takes the most time. There are 30 ranks to process. Rank 26 and 30 are the most complex. They take each about a third of the total import time. If you have not reached rank 26 after two days of import, it is worth revisiting your system configuration as it may not be optimal for the import.","title":"Notes on full planet imports"},{"location":"admin/Import/#notes-on-memory-usage","text":"In the first step of the import Nominatim uses osm2pgsql to load the OSM data into the PostgreSQL database. This step is very demanding in terms of RAM usage. osm2pgsql and PostgreSQL are running in parallel at this point. PostgreSQL blocks at least the part of RAM that has been configured with the shared_buffers parameter during PostgreSQL tuning and needs some memory on top of that. osm2pgsql needs at least 2GB of RAM for its internal data structures, potentially more when it has to process very large relations. In addition it needs to maintain a cache for node locations. The size of this cache can be configured with the parameter --osm2pgsql-cache . When importing with a flatnode file, it is best to disable the node cache completely and leave the memory for the flatnode file. Nominatim will do this by default, so you do not need to configure anything in this case. For imports without a flatnode file, set --osm2pgsql-cache approximately to the size of the OSM pbf file you are importing. The size needs to be given in MB. Make sure you leave enough RAM for PostgreSQL and osm2pgsql as mentioned above. If the system starts swapping or you are getting out-of-memory errors, reduce the cache size or even consider using a flatnode file.","title":"Notes on memory usage"},{"location":"admin/Import/#testing-the-installation","text":"Run this script to verify all required tables and indices got created successfully. nominatim admin --check-database Now you can try out your installation by running: nominatim serve This runs a small test server normally used for development. You can use it to verify that your installation is working. Go to http://localhost:8088/status.php and you should see the message OK . You can also run a search query, e.g. http://localhost:8088/search.php?q=Berlin . To run Nominatim via webservers like Apache or nginx, please read the Deployment chapter .","title":"Testing the installation"},{"location":"admin/Import/#tuning-the-database","text":"Accurate word frequency information for search terms helps PostgreSQL's query planner to make the right decisions. Recomputing them can improve the performance of forward geocoding in particular under high load. To recompute word counts run: nominatim refresh --word-counts This will take a couple of hours for a full planet installation. You can also defer that step to a later point in time when you realise that performance becomes an issue. Just make sure that updates are stopped before running this function. If you want to be able to search for places by their type through special key phrases you also need to import these key phrases like this: nominatim special-phrases --import-from-wiki Note that this command downloads the phrases from the wiki link above. You need internet access for the step.","title":"Tuning the database"},{"location":"admin/Import/#installing-tiger-housenumber-data-for-the-us","text":"Nominatim is able to use the official TIGER address set to complement the OSM house number data in the US. You can add TIGER data to your own Nominatim instance by following these steps. The entire US adds about 10GB to your database. Get preprocessed TIGER 2020 data: cd $PROJECT_DIR wget https://nominatim.org/data/tiger2020-nominatim-preprocessed.tar.gz Import the data into your Nominatim database: nominatim add-data --tiger-data tiger2020-nominatim-preprocessed.tar.gz Enable use of the Tiger data in your .env by adding: echo NOMINATIM_USE_US_TIGER_DATA=yes >> .env Apply the new settings: nominatim refresh --functions See the developer's guide for more information on how the data got preprocessed.","title":"Installing Tiger housenumber data for the US"},{"location":"admin/Installation/","text":"Basic Installation \uf0c1 This page contains generic installation instructions for Nominatim and its prerequisites. There are also step-by-step instructions available for the following operating systems: Ubuntu 20.04 Ubuntu 18.04 CentOS 8 CentOS 7.2 These OS-specific instructions can also be found in executable form in the vagrant/ directory. Users have created instructions for other frameworks. We haven't tested those and can't offer support. Docker Docker on Kubernetes Ansible Prerequisites \uf0c1 Software \uf0c1 For compiling: cmake expat proj bzip2 zlib ICU Boost libraries , including system and filesystem PostgreSQL client libraries a recent C++ compiler (gcc 5+ or Clang 3.8+) For running Nominatim: PostgreSQL (9.3+ will work, 11+ strongly recommended) PostGIS (2.2+) Python 3 (3.5+) Psycopg2 (2.7+) Python Dotenv psutil Jinja2 PyICU PHP (7.0 or later) PHP-pgsql PHP-intl (bundled with PHP) PHP-cgi (for running queries from the command line) For running continuous updates: pyosmium For dependencies for running tests and building documentation, see the Development section . Hardware \uf0c1 A minimum of 2GB of RAM is required or installation will fail. For a full planet import 64GB of RAM or more are strongly recommended. Do not report out of memory problems if you have less than 64GB RAM. For a full planet install you will need at least 900GB of hard disk space. Take into account that the OSM database is growing fast. Fast disks are essential. Using NVME disks is recommended. Even on a well configured machine the import of a full planet takes around 2 days. On traditional spinning disks, 7-8 days are more realistic. Tuning the PostgreSQL database \uf0c1 You might want to tune your PostgreSQL installation so that the later steps make best use of your hardware. You should tune the following parameters in your postgresql.conf file. shared_buffers = 2GB maintenance_work_mem = (10GB) autovacuum_work_mem = 2GB work_mem = (50MB) effective_cache_size = (24GB) synchronous_commit = off checkpoint_segments = 100 # only for postgresql <= 9.4 max_wal_size = 1GB # postgresql > 9.4 checkpoint_timeout = 10min checkpoint_completion_target = 0.9 The numbers in brackets behind some parameters seem to work fine for 64GB RAM machine. Adjust to your setup. A higher number for max_wal_size means that PostgreSQL needs to run checkpoints less often but it does require the additional space on your disk. Autovacuum must not be switched off because it ensures that the tables are frequently analysed. If your machine has very little memory, you might consider setting: autovacuum_max_workers = 1 and even reduce autovacuum_work_mem further. This will reduce the amount of memory that autovacuum takes away from the import process. For the initial import, you should also set: fsync = off full_page_writes = off Don't forget to reenable them after the initial import or you risk database corruption. Downloading and building Nominatim \uf0c1 Downloading the latest release \uf0c1 You can download the latest release from nominatim.org . The release contains all necessary files. Just unpack it. Downloading the latest development version \uf0c1 If you want to install latest development version from github, make sure to also check out the osm2pgsql subproject: git clone --recursive git://github.com/openstreetmap/Nominatim.git The development version does not include the country grid. Download it separately: wget -O Nominatim/data/country_osm_grid.sql.gz https://www.nominatim.org/data/country_grid.sql.gz Building Nominatim \uf0c1 The code must be built in a separate directory. Create the directory and change into it. mkdir build cd build Nominatim uses cmake and make for building. Assuming that you have created the build at the same level as the Nominatim source directory run: cmake ../Nominatim make sudo make install Nominatim installs itself into /usr/local per default. To choose a different installation directory add -DCMAKE_INSTALL_PREFIX=<install root> to the cmake command. Make sure that the bin directory is available in your path in that case, e.g. export PATH=<install root>/bin:$PATH Now continue with importing the database .","title":"Basic Installation"},{"location":"admin/Installation/#basic-installation","text":"This page contains generic installation instructions for Nominatim and its prerequisites. There are also step-by-step instructions available for the following operating systems: Ubuntu 20.04 Ubuntu 18.04 CentOS 8 CentOS 7.2 These OS-specific instructions can also be found in executable form in the vagrant/ directory. Users have created instructions for other frameworks. We haven't tested those and can't offer support. Docker Docker on Kubernetes Ansible","title":"Basic Installation"},{"location":"admin/Installation/#prerequisites","text":"","title":"Prerequisites"},{"location":"admin/Installation/#software","text":"For compiling: cmake expat proj bzip2 zlib ICU Boost libraries , including system and filesystem PostgreSQL client libraries a recent C++ compiler (gcc 5+ or Clang 3.8+) For running Nominatim: PostgreSQL (9.3+ will work, 11+ strongly recommended) PostGIS (2.2+) Python 3 (3.5+) Psycopg2 (2.7+) Python Dotenv psutil Jinja2 PyICU PHP (7.0 or later) PHP-pgsql PHP-intl (bundled with PHP) PHP-cgi (for running queries from the command line) For running continuous updates: pyosmium For dependencies for running tests and building documentation, see the Development section .","title":"Software"},{"location":"admin/Installation/#hardware","text":"A minimum of 2GB of RAM is required or installation will fail. For a full planet import 64GB of RAM or more are strongly recommended. Do not report out of memory problems if you have less than 64GB RAM. For a full planet install you will need at least 900GB of hard disk space. Take into account that the OSM database is growing fast. Fast disks are essential. Using NVME disks is recommended. Even on a well configured machine the import of a full planet takes around 2 days. On traditional spinning disks, 7-8 days are more realistic.","title":"Hardware"},{"location":"admin/Installation/#tuning-the-postgresql-database","text":"You might want to tune your PostgreSQL installation so that the later steps make best use of your hardware. You should tune the following parameters in your postgresql.conf file. shared_buffers = 2GB maintenance_work_mem = (10GB) autovacuum_work_mem = 2GB work_mem = (50MB) effective_cache_size = (24GB) synchronous_commit = off checkpoint_segments = 100 # only for postgresql <= 9.4 max_wal_size = 1GB # postgresql > 9.4 checkpoint_timeout = 10min checkpoint_completion_target = 0.9 The numbers in brackets behind some parameters seem to work fine for 64GB RAM machine. Adjust to your setup. A higher number for max_wal_size means that PostgreSQL needs to run checkpoints less often but it does require the additional space on your disk. Autovacuum must not be switched off because it ensures that the tables are frequently analysed. If your machine has very little memory, you might consider setting: autovacuum_max_workers = 1 and even reduce autovacuum_work_mem further. This will reduce the amount of memory that autovacuum takes away from the import process. For the initial import, you should also set: fsync = off full_page_writes = off Don't forget to reenable them after the initial import or you risk database corruption.","title":"Tuning the PostgreSQL database"},{"location":"admin/Installation/#downloading-and-building-nominatim","text":"","title":"Downloading and building Nominatim"},{"location":"admin/Installation/#downloading-the-latest-release","text":"You can download the latest release from nominatim.org . The release contains all necessary files. Just unpack it.","title":"Downloading the latest release"},{"location":"admin/Installation/#downloading-the-latest-development-version","text":"If you want to install latest development version from github, make sure to also check out the osm2pgsql subproject: git clone --recursive git://github.com/openstreetmap/Nominatim.git The development version does not include the country grid. Download it separately: wget -O Nominatim/data/country_osm_grid.sql.gz https://www.nominatim.org/data/country_grid.sql.gz","title":"Downloading the latest development version"},{"location":"admin/Installation/#building-nominatim","text":"The code must be built in a separate directory. Create the directory and change into it. mkdir build cd build Nominatim uses cmake and make for building. Assuming that you have created the build at the same level as the Nominatim source directory run: cmake ../Nominatim make sudo make install Nominatim installs itself into /usr/local per default. To choose a different installation directory add -DCMAKE_INSTALL_PREFIX=<install root> to the cmake command. Make sure that the bin directory is available in your path in that case, e.g. export PATH=<install root>/bin:$PATH Now continue with importing the database .","title":"Building Nominatim"},{"location":"admin/Migration/","text":"Database Migrations \uf0c1 Since version 3.7.0 Nominatim offers automatic migrations. Please follow the following steps: stop any updates that are potentially running update Nominatim to the newer version go to your project directory and run nominatim admin --migrate (optionally) restart updates Below you find additional migrations and hints about other structural and breaking changes. Please read them before running the migration. Note If you are migrating from a version <3.6, then you still have to follow the manual migration steps up to 3.6. 3.6.0 -> 3.7.0 \uf0c1 New format and name of configuration file \uf0c1 The configuration for an import is now saved in a .env file in the project directory. This file follows the dotenv format. For more information, see the installation chapter . To migrate to the new system, create a new project directory, add the .env file and port your custom configuration from settings/local.php . Most settings are named similar and only have received a NOMINATIM_ prefix. Use the default settings in settings/env.defaults as a reference. New location for data files \uf0c1 External data files for Wikipedia importance, postcodes etc. are no longer expected to reside in the source tree by default. Instead they will be searched in the project directory. If you have an automated setup script you must either adapt the download location or explicitly set the location of the files to the old place in your .env . Introducing nominatim command line tool \uf0c1 The various php utilities have been replaced with a single nominatim command line tool. Make sure to adapt any scripts. There is no direct 1:1 matching between the old utilities and the commands of nominatim CLI. The following list gives you a list of nominatim sub-commands that contain functionality of each script: ./utils/setup.php: import , freeze , refresh ./utils/update.php: replication , add-data , index , refresh ./utils/specialphrases.php: special-phrases ./utils/check_import_finished.php: admin ./utils/warm.php: admin ./utils/export.php: export Try nominatim <command> --help for more information about each subcommand. ./utils/query.php no longer exists in its old form. nominatim search provides a replacement but returns different output. Switch to normalized house numbers \uf0c1 The housenumber column in the placex table uses now normalized version. The automatic migration step will convert the column but this may take a very long time. It is advisable to take the machine offline while doing that. 3.5.0 -> 3.6.0 \uf0c1 Change of layout of search_name_* tables \uf0c1 The table need a different index for nearest place lookup. Recreate the indexes using the following shell script: for table in ` psql -d nominatim -c \"SELECT tablename FROM pg_tables WHERE tablename LIKE 'search_name_%'\" -tA | grep -v search_name_blank ` ; do psql -d nominatim -c \"DROP INDEX idx_ ${ table } _centroid_place; CREATE INDEX idx_ ${ table } _centroid_place ON ${ table } USING gist (centroid) WHERE ((address_rank >= 2) AND (address_rank <= 25)); DROP INDEX idx_ ${ table } _centroid_street; CREATE INDEX idx_ ${ table } _centroid_street ON ${ table } USING gist (centroid) WHERE ((address_rank >= 26) AND (address_rank <= 27))\" ; done Removal of html output \uf0c1 The debugging UI is no longer directly provided with Nominatim. Instead we now provide a simple Javascript application. Please refer to Setting up the Nominatim UI for details on how to set up the UI. The icons served together with the API responses have been moved to the nominatim-ui project as well. If you want to keep the icon field in the response, you need to set CONST_MapIcon_URL to the URL of the /mapicon directory of nominatim-ui. Change order during indexing \uf0c1 When reindexing places during updates, there is now a different order used which needs a different database index. Create it with the following SQL command: CREATE INDEX idx_placex_pendingsector_rank_address ON placex USING BTREE ( rank_address , geometry_sector ) WHERE indexed_status > 0 ; You can then drop the old index with: DROP INDEX idx_placex_pendingsector ; Unused index \uf0c1 This index has been unused ever since the query using it was changed two years ago. Saves about 12GB on a planet installation. DROP INDEX idx_placex_geometry_reverse_lookupPoint ; Switching to dotenv \uf0c1 As part of the work changing the configuration format, the configuration for the website is now using a separate configuration file. To create the configuration file, run the following command after updating: ./utils/setup.php --setup-website 3.4.0 -> 3.5.0 \uf0c1 New Wikipedia/Wikidata importance tables \uf0c1 The wikipedia_* tables have a new format that also includes references to Wikidata. You need to update the computation functions and the tables as follows: download the new Wikipedia tables as described in the import section reimport the tables: ./utils/setup.php --import-wikipedia-articles update the functions: ./utils/setup.php --create-functions --enable-diff-updates create a new lookup index: CREATE INDEX idx_placex_wikidata ON placex USING BTREE (( extratags -> 'wikidata' )) WHERE extratags ? 'wikidata' AND class = 'place' AND osm_type = 'N' AND rank_search < 26 ; compute importance: ./utils/update.php --recompute-importance The last step takes about 10 hours on the full planet. Remove one function (it will be recreated in the next step): DROP FUNCTION create_country ( hstore , character varying ); Finally, update all SQL functions: ./utils/setup.php --create-functions --enable-diff-updates --create-partition-functions 3.3.0 -> 3.4.0 \uf0c1 Reorganisation of location_area_country table \uf0c1 The table location_area_country has been optimized. You need to switch to the new format when you run updates. While updates are disabled, run the following SQL commands: CREATE TABLE location_area_country_new AS SELECT place_id , country_code , geometry FROM location_area_country ; DROP TABLE location_area_country ; ALTER TABLE location_area_country_new RENAME TO location_area_country ; CREATE INDEX idx_location_area_country_geometry ON location_area_country USING GIST ( geometry ); CREATE INDEX idx_location_area_country_place_id ON location_area_country USING BTREE ( place_id ); Finally, update all SQL functions: ./utils/setup.php --create-functions --enable-diff-updates --create-partition-functions 3.2.0 -> 3.3.0 \uf0c1 New database connection string (DSN) format \uf0c1 Previously database connection setting ( CONST_Database_DSN in settings/*.php ) had the format (simple) pgsql://@/nominatim (complex) pgsql://johndoe:secret@machine1.domain.com:1234/db1 The new format is (simple) pgsql:dbname=nominatim (complex) pgsql:dbname=db1;host=machine1.domain.com;port=1234;user=johndoe;password=secret Natural Earth country boundaries no longer needed as fallback \uf0c1 DROP TABLE country_naturalearthdata ; Finally, update all SQL functions: ./utils/setup.php --create-functions --enable-diff-updates --create-partition-functions Configurable Address Levels \uf0c1 The new configurable address levels require a new table. Create it with the following command: ./utils/update.php --update-address-levels 3.1.0 -> 3.2.0 \uf0c1 New reverse algorithm \uf0c1 The reverse algorithm has changed and requires new indexes. Run the following SQL statements to create the indexes: CREATE INDEX idx_placex_geometry_reverse_lookupPoint ON placex USING gist ( geometry ) WHERE ( name IS NOT null or housenumber IS NOT null or rank_address BETWEEN 26 AND 27 ) AND class NOT IN ( 'railway' , 'tunnel' , 'bridge' , 'man_made' ) AND rank_address >= 26 AND indexed_status = 0 AND linked_place_id IS null ; CREATE INDEX idx_placex_geometry_reverse_lookupPolygon ON placex USING gist ( geometry ) WHERE St_GeometryType ( geometry ) in ( 'ST_Polygon' , 'ST_MultiPolygon' ) AND rank_address between 4 and 25 AND type != 'postcode' AND name is not null AND indexed_status = 0 AND linked_place_id is null ; CREATE INDEX idx_placex_geometry_reverse_placeNode ON placex USING gist ( geometry ) WHERE osm_type = 'N' AND rank_search between 5 and 25 AND class = 'place' AND type != 'postcode' AND name is not null AND indexed_status = 0 AND linked_place_id is null ; You also need to grant the website user access to the country_osm_grid table: GRANT SELECT ON table country_osm_grid to \"www-user\" ; Replace the www-user with the user name of your website server if necessary. You can now drop the unused indexes: DROP INDEX idx_placex_reverse_geometry ; Finally, update all SQL functions: ./utils/setup.php --create-functions --enable-diff-updates --create-partition-functions 3.0.0 -> 3.1.0 \uf0c1 Postcode Table \uf0c1 A new separate table for artificially computed postcode centroids was introduced. Migration to the new format is possible but not recommended . Create postcode table and indexes, running the following SQL statements: CREATE TABLE location_postcode ( place_id BIGINT , parent_place_id BIGINT , rank_search SMALLINT , rank_address SMALLINT , indexed_status SMALLINT , indexed_date TIMESTAMP , country_code varchar ( 2 ), postcode TEXT , geometry GEOMETRY ( Geometry , 4326 )); CREATE INDEX idx_postcode_geometry ON location_postcode USING GIST ( geometry ); CREATE UNIQUE INDEX idx_postcode_id ON location_postcode USING BTREE ( place_id ); CREATE INDEX idx_postcode_postcode ON location_postcode USING BTREE ( postcode ); GRANT SELECT ON location_postcode TO \"www-data\" ; DROP TYPE IF EXISTS nearfeaturecentr CASCADE ; CREATE TYPE nearfeaturecentr AS ( place_id BIGINT , keywords int [], rank_address smallint , rank_search smallint , distance float , isguess boolean , postcode TEXT , centroid GEOMETRY ); Add postcode column to location_area tables with SQL statement: ALTER TABLE location_area ADD COLUMN postcode TEXT ; Then reimport the functions: ./utils/setup.php --create-functions --enable-diff-updates --create-partition-functions Create appropriate triggers with SQL: CREATE TRIGGER location_postcode_before_update BEFORE UPDATE ON location_postcode FOR EACH ROW EXECUTE PROCEDURE postcode_update (); Finally populate the postcode table (will take a while): ./utils/setup.php --calculate-postcodes --index --index-noanalyse This will create a working database. You may also delete the old artificial postcodes now. Note that this may be expensive and is not absolutely necessary. The following SQL statement will remove them: DELETE FROM place_addressline a USING placex p WHERE a . address_place_id = p . place_id and p . osm_type = 'P' ; ALTER TABLE placex DISABLE TRIGGER USER ; DELETE FROM placex WHERE osm_type = 'P' ; ALTER TABLE placex ENABLE TRIGGER USER ;","title":"Migration from older Versions"},{"location":"admin/Migration/#database-migrations","text":"Since version 3.7.0 Nominatim offers automatic migrations. Please follow the following steps: stop any updates that are potentially running update Nominatim to the newer version go to your project directory and run nominatim admin --migrate (optionally) restart updates Below you find additional migrations and hints about other structural and breaking changes. Please read them before running the migration. Note If you are migrating from a version <3.6, then you still have to follow the manual migration steps up to 3.6.","title":"Database Migrations"},{"location":"admin/Migration/#360-370","text":"","title":"3.6.0 -&gt; 3.7.0"},{"location":"admin/Migration/#new-format-and-name-of-configuration-file","text":"The configuration for an import is now saved in a .env file in the project directory. This file follows the dotenv format. For more information, see the installation chapter . To migrate to the new system, create a new project directory, add the .env file and port your custom configuration from settings/local.php . Most settings are named similar and only have received a NOMINATIM_ prefix. Use the default settings in settings/env.defaults as a reference.","title":"New format and name of configuration file"},{"location":"admin/Migration/#new-location-for-data-files","text":"External data files for Wikipedia importance, postcodes etc. are no longer expected to reside in the source tree by default. Instead they will be searched in the project directory. If you have an automated setup script you must either adapt the download location or explicitly set the location of the files to the old place in your .env .","title":"New location for data files"},{"location":"admin/Migration/#introducing-nominatim-command-line-tool","text":"The various php utilities have been replaced with a single nominatim command line tool. Make sure to adapt any scripts. There is no direct 1:1 matching between the old utilities and the commands of nominatim CLI. The following list gives you a list of nominatim sub-commands that contain functionality of each script: ./utils/setup.php: import , freeze , refresh ./utils/update.php: replication , add-data , index , refresh ./utils/specialphrases.php: special-phrases ./utils/check_import_finished.php: admin ./utils/warm.php: admin ./utils/export.php: export Try nominatim <command> --help for more information about each subcommand. ./utils/query.php no longer exists in its old form. nominatim search provides a replacement but returns different output.","title":"Introducing nominatim command line tool"},{"location":"admin/Migration/#switch-to-normalized-house-numbers","text":"The housenumber column in the placex table uses now normalized version. The automatic migration step will convert the column but this may take a very long time. It is advisable to take the machine offline while doing that.","title":"Switch to normalized house numbers"},{"location":"admin/Migration/#350-360","text":"","title":"3.5.0 -&gt; 3.6.0"},{"location":"admin/Migration/#change-of-layout-of-search_name_-tables","text":"The table need a different index for nearest place lookup. Recreate the indexes using the following shell script: for table in ` psql -d nominatim -c \"SELECT tablename FROM pg_tables WHERE tablename LIKE 'search_name_%'\" -tA | grep -v search_name_blank ` ; do psql -d nominatim -c \"DROP INDEX idx_ ${ table } _centroid_place; CREATE INDEX idx_ ${ table } _centroid_place ON ${ table } USING gist (centroid) WHERE ((address_rank >= 2) AND (address_rank <= 25)); DROP INDEX idx_ ${ table } _centroid_street; CREATE INDEX idx_ ${ table } _centroid_street ON ${ table } USING gist (centroid) WHERE ((address_rank >= 26) AND (address_rank <= 27))\" ; done","title":"Change of layout of search_name_* tables"},{"location":"admin/Migration/#removal-of-html-output","text":"The debugging UI is no longer directly provided with Nominatim. Instead we now provide a simple Javascript application. Please refer to Setting up the Nominatim UI for details on how to set up the UI. The icons served together with the API responses have been moved to the nominatim-ui project as well. If you want to keep the icon field in the response, you need to set CONST_MapIcon_URL to the URL of the /mapicon directory of nominatim-ui.","title":"Removal of html output"},{"location":"admin/Migration/#change-order-during-indexing","text":"When reindexing places during updates, there is now a different order used which needs a different database index. Create it with the following SQL command: CREATE INDEX idx_placex_pendingsector_rank_address ON placex USING BTREE ( rank_address , geometry_sector ) WHERE indexed_status > 0 ; You can then drop the old index with: DROP INDEX idx_placex_pendingsector ;","title":"Change order during indexing"},{"location":"admin/Migration/#unused-index","text":"This index has been unused ever since the query using it was changed two years ago. Saves about 12GB on a planet installation. DROP INDEX idx_placex_geometry_reverse_lookupPoint ;","title":"Unused index"},{"location":"admin/Migration/#switching-to-dotenv","text":"As part of the work changing the configuration format, the configuration for the website is now using a separate configuration file. To create the configuration file, run the following command after updating: ./utils/setup.php --setup-website","title":"Switching to dotenv"},{"location":"admin/Migration/#340-350","text":"","title":"3.4.0 -&gt; 3.5.0"},{"location":"admin/Migration/#new-wikipediawikidata-importance-tables","text":"The wikipedia_* tables have a new format that also includes references to Wikidata. You need to update the computation functions and the tables as follows: download the new Wikipedia tables as described in the import section reimport the tables: ./utils/setup.php --import-wikipedia-articles update the functions: ./utils/setup.php --create-functions --enable-diff-updates create a new lookup index: CREATE INDEX idx_placex_wikidata ON placex USING BTREE (( extratags -> 'wikidata' )) WHERE extratags ? 'wikidata' AND class = 'place' AND osm_type = 'N' AND rank_search < 26 ; compute importance: ./utils/update.php --recompute-importance The last step takes about 10 hours on the full planet. Remove one function (it will be recreated in the next step): DROP FUNCTION create_country ( hstore , character varying ); Finally, update all SQL functions: ./utils/setup.php --create-functions --enable-diff-updates --create-partition-functions","title":"New Wikipedia/Wikidata importance tables"},{"location":"admin/Migration/#330-340","text":"","title":"3.3.0 -&gt; 3.4.0"},{"location":"admin/Migration/#reorganisation-of-location_area_country-table","text":"The table location_area_country has been optimized. You need to switch to the new format when you run updates. While updates are disabled, run the following SQL commands: CREATE TABLE location_area_country_new AS SELECT place_id , country_code , geometry FROM location_area_country ; DROP TABLE location_area_country ; ALTER TABLE location_area_country_new RENAME TO location_area_country ; CREATE INDEX idx_location_area_country_geometry ON location_area_country USING GIST ( geometry ); CREATE INDEX idx_location_area_country_place_id ON location_area_country USING BTREE ( place_id ); Finally, update all SQL functions: ./utils/setup.php --create-functions --enable-diff-updates --create-partition-functions","title":"Reorganisation of location_area_country table"},{"location":"admin/Migration/#320-330","text":"","title":"3.2.0 -&gt; 3.3.0"},{"location":"admin/Migration/#new-database-connection-string-dsn-format","text":"Previously database connection setting ( CONST_Database_DSN in settings/*.php ) had the format (simple) pgsql://@/nominatim (complex) pgsql://johndoe:secret@machine1.domain.com:1234/db1 The new format is (simple) pgsql:dbname=nominatim (complex) pgsql:dbname=db1;host=machine1.domain.com;port=1234;user=johndoe;password=secret","title":"New database connection string (DSN) format"},{"location":"admin/Migration/#natural-earth-country-boundaries-no-longer-needed-as-fallback","text":"DROP TABLE country_naturalearthdata ; Finally, update all SQL functions: ./utils/setup.php --create-functions --enable-diff-updates --create-partition-functions","title":"Natural Earth country boundaries no longer needed as fallback"},{"location":"admin/Migration/#configurable-address-levels","text":"The new configurable address levels require a new table. Create it with the following command: ./utils/update.php --update-address-levels","title":"Configurable Address Levels"},{"location":"admin/Migration/#310-320","text":"","title":"3.1.0 -&gt; 3.2.0"},{"location":"admin/Migration/#new-reverse-algorithm","text":"The reverse algorithm has changed and requires new indexes. Run the following SQL statements to create the indexes: CREATE INDEX idx_placex_geometry_reverse_lookupPoint ON placex USING gist ( geometry ) WHERE ( name IS NOT null or housenumber IS NOT null or rank_address BETWEEN 26 AND 27 ) AND class NOT IN ( 'railway' , 'tunnel' , 'bridge' , 'man_made' ) AND rank_address >= 26 AND indexed_status = 0 AND linked_place_id IS null ; CREATE INDEX idx_placex_geometry_reverse_lookupPolygon ON placex USING gist ( geometry ) WHERE St_GeometryType ( geometry ) in ( 'ST_Polygon' , 'ST_MultiPolygon' ) AND rank_address between 4 and 25 AND type != 'postcode' AND name is not null AND indexed_status = 0 AND linked_place_id is null ; CREATE INDEX idx_placex_geometry_reverse_placeNode ON placex USING gist ( geometry ) WHERE osm_type = 'N' AND rank_search between 5 and 25 AND class = 'place' AND type != 'postcode' AND name is not null AND indexed_status = 0 AND linked_place_id is null ; You also need to grant the website user access to the country_osm_grid table: GRANT SELECT ON table country_osm_grid to \"www-user\" ; Replace the www-user with the user name of your website server if necessary. You can now drop the unused indexes: DROP INDEX idx_placex_reverse_geometry ; Finally, update all SQL functions: ./utils/setup.php --create-functions --enable-diff-updates --create-partition-functions","title":"New reverse algorithm"},{"location":"admin/Migration/#300-310","text":"","title":"3.0.0 -&gt; 3.1.0"},{"location":"admin/Migration/#postcode-table","text":"A new separate table for artificially computed postcode centroids was introduced. Migration to the new format is possible but not recommended . Create postcode table and indexes, running the following SQL statements: CREATE TABLE location_postcode ( place_id BIGINT , parent_place_id BIGINT , rank_search SMALLINT , rank_address SMALLINT , indexed_status SMALLINT , indexed_date TIMESTAMP , country_code varchar ( 2 ), postcode TEXT , geometry GEOMETRY ( Geometry , 4326 )); CREATE INDEX idx_postcode_geometry ON location_postcode USING GIST ( geometry ); CREATE UNIQUE INDEX idx_postcode_id ON location_postcode USING BTREE ( place_id ); CREATE INDEX idx_postcode_postcode ON location_postcode USING BTREE ( postcode ); GRANT SELECT ON location_postcode TO \"www-data\" ; DROP TYPE IF EXISTS nearfeaturecentr CASCADE ; CREATE TYPE nearfeaturecentr AS ( place_id BIGINT , keywords int [], rank_address smallint , rank_search smallint , distance float , isguess boolean , postcode TEXT , centroid GEOMETRY ); Add postcode column to location_area tables with SQL statement: ALTER TABLE location_area ADD COLUMN postcode TEXT ; Then reimport the functions: ./utils/setup.php --create-functions --enable-diff-updates --create-partition-functions Create appropriate triggers with SQL: CREATE TRIGGER location_postcode_before_update BEFORE UPDATE ON location_postcode FOR EACH ROW EXECUTE PROCEDURE postcode_update (); Finally populate the postcode table (will take a while): ./utils/setup.php --calculate-postcodes --index --index-noanalyse This will create a working database. You may also delete the old artificial postcodes now. Note that this may be expensive and is not absolutely necessary. The following SQL statement will remove them: DELETE FROM place_addressline a USING placex p WHERE a . address_place_id = p . place_id and p . osm_type = 'P' ; ALTER TABLE placex DISABLE TRIGGER USER ; DELETE FROM placex WHERE osm_type = 'P' ; ALTER TABLE placex ENABLE TRIGGER USER ;","title":"Postcode Table"},{"location":"admin/Setup-Nominatim-UI/","text":"Setting up the Nominatim UI \uf0c1 Nominatim is a search API, it does not provide a website interface on its own. nominatim-ui offers a small website for testing your setup and inspecting the database content. This section provides a quick start how to use nominatim-ui with your installation. For more details, please also have a look at the README of nominatim-ui . Installing nominatim-ui \uf0c1 We provide regular releases of nominatim-ui that contain the packaged website. They do not need any special installation. Just download, configure and run it. Grab the latest release from nominatim-ui's Github release page and unpack it. You can use nominatim-ui-x.x.x.tar.gz or nominatim-ui-x.x.x.zip . Copy the example configuration into the right place: cd nominatim-ui cp dist/config.example.js dist/config.js Now adapt the configuration to your needs. You need at least to change the Nominatim_API_Endpoint to point to your Nominatim installation. Then you can just test it locally by spinning up a webserver in the dist directory. For example, with Python: cd nominatim-ui/dist python3 -m http.server 8765 The website is now available at http://localhost:8765 . Forwarding searches to nominatim-ui \uf0c1 Nominatim used to provide the search interface directly by itself when format=html was requested. For all endpoints except for /reverse and /lookup this even used to be the default. The following section describes how to set up Apache or nginx, so that your users are forwarded to nominatim-ui when they go to URL that formerly presented the UI. Setting up forwarding in Nginx \uf0c1 First of all make nominatim-ui available under /ui on your webserver: server { # Here is the Nominatim setup as described in the Installation section location /ui/ { alias <full path to the nominatim-ui directory>/dist/ ; index index.html ; } } Now we need to find out if a URL should be forwarded to the UI. Add the following map commands outside the server section: # Inspect the format parameter in the query arguments. We are interested # if it is set to html or something else or if it is missing completely. map $args $format { default default ; ~(^|&)format=html(&|$) html ; ~(^|&)format= other ; } # Determine from the URI and the format parameter above if forwarding is needed. map $uri/$format $forward_to_ui { default 1 ; # The default is to forward. ~^/ui 0 ; # If the URI point to the UI already, we are done. ~/other$ 0 ; # An explicit non-html format parameter. No forwarding. ~/reverse.*/default 0 ; # Reverse and lookup assume xml format when ~/lookup.*/default 0 ; # no format parameter is given. No forwarding. } The $forward_to_ui parameter can now be used to conditionally forward the calls: # When no endpoint is given , default to search . # Need to add a rewrite so that the rewrite rules below catch it correctly . rewrite ^/ $ / search ; location @php { # fastcgi stuff .. if ( $ forward_to_ui ) { rewrite ^ ( /[ ^/ ]* ) https : // yourserver . com / ui $ 1. html redirect ; } } location ~ [ ^/ ] \\ . php ( /| $ ) { # fastcgi stuff .. if ( $ forward_to_ui ) { rewrite (. * ). php https : // yourserver . com / ui $ 1. html redirect ; } } Warning Be aware that the rewrite commands are slightly different for URIs with and without the .php suffix. Reload nginx and the UI should be available. Setting up forwarding in Apache \uf0c1 First of all make nominatim-ui available in the ui/ subdirectory where Nominatim is installed. For example, given you have set up an alias under nominatim like this: Alias /nominatim /home/vagrant/build/website you need to insert the following rules for nominatim-ui before that alias: <Directory \"/home/vagrant/nominatim-ui/dist\" > DirectoryIndex search.html Require all granted </Directory> Alias /nominatim/ui /home/vagrant/nominatim-ui/dist Replace /home/vagrant/nominatim-ui with the directory where you have cloned nominatim-ui. Important The alias for nominatim-ui must come before the alias for the Nominatim website directory. To set up forwarding, the Apache rewrite module is needed. Enable it with: sudo a2enmod rewrite Then add rewrite rules to the Directory directive of the Nominatim website directory like this: <Directory \"/home/vagrant/build/website\" > Options FollowSymLinks MultiViews AddType text/html .php Require all granted RewriteEngine On # This must correspond to the URL where nominatim can be found. RewriteBase \"/nominatim/\" # If no endpoint is given, then use search. RewriteRule ^(/|$) \"search.php\" # If format-html is explicity requested, forward to the UI. RewriteCond %{QUERY_STRING} \"format=html\" RewriteRule ^([^/]+).php ui/$1.html [R,END] # Same but .php suffix is missing. RewriteCond %{QUERY_STRING} \"format=html\" RewriteRule ^([^/]+) ui/$1.html [R,END] # If no format parameter is there then forward anything # but /reverse and /lookup to the UI. RewriteCond %{QUERY_STRING} \"!format=\" RewriteCond %{REQUEST_URI} \"!/lookup\" RewriteCond %{REQUEST_URI} \"!/reverse\" RewriteRule ^([^/]+).php ui/$1.html [R,END] # Same but .php suffix is missing. RewriteCond %{QUERY_STRING} \"!format=\" RewriteCond %{REQUEST_URI} \"!/lookup\" RewriteCond %{REQUEST_URI} \"!/reverse\" RewriteRule ^([^/]+) ui/$1.html [R,END] </Directory> Restart Apache and the UI should be available.","title":"Nominatim UI"},{"location":"admin/Setup-Nominatim-UI/#setting-up-the-nominatim-ui","text":"Nominatim is a search API, it does not provide a website interface on its own. nominatim-ui offers a small website for testing your setup and inspecting the database content. This section provides a quick start how to use nominatim-ui with your installation. For more details, please also have a look at the README of nominatim-ui .","title":"Setting up the Nominatim UI"},{"location":"admin/Setup-Nominatim-UI/#installing-nominatim-ui","text":"We provide regular releases of nominatim-ui that contain the packaged website. They do not need any special installation. Just download, configure and run it. Grab the latest release from nominatim-ui's Github release page and unpack it. You can use nominatim-ui-x.x.x.tar.gz or nominatim-ui-x.x.x.zip . Copy the example configuration into the right place: cd nominatim-ui cp dist/config.example.js dist/config.js Now adapt the configuration to your needs. You need at least to change the Nominatim_API_Endpoint to point to your Nominatim installation. Then you can just test it locally by spinning up a webserver in the dist directory. For example, with Python: cd nominatim-ui/dist python3 -m http.server 8765 The website is now available at http://localhost:8765 .","title":"Installing nominatim-ui"},{"location":"admin/Setup-Nominatim-UI/#forwarding-searches-to-nominatim-ui","text":"Nominatim used to provide the search interface directly by itself when format=html was requested. For all endpoints except for /reverse and /lookup this even used to be the default. The following section describes how to set up Apache or nginx, so that your users are forwarded to nominatim-ui when they go to URL that formerly presented the UI.","title":"Forwarding searches to nominatim-ui"},{"location":"admin/Setup-Nominatim-UI/#setting-up-forwarding-in-nginx","text":"First of all make nominatim-ui available under /ui on your webserver: server { # Here is the Nominatim setup as described in the Installation section location /ui/ { alias <full path to the nominatim-ui directory>/dist/ ; index index.html ; } } Now we need to find out if a URL should be forwarded to the UI. Add the following map commands outside the server section: # Inspect the format parameter in the query arguments. We are interested # if it is set to html or something else or if it is missing completely. map $args $format { default default ; ~(^|&)format=html(&|$) html ; ~(^|&)format= other ; } # Determine from the URI and the format parameter above if forwarding is needed. map $uri/$format $forward_to_ui { default 1 ; # The default is to forward. ~^/ui 0 ; # If the URI point to the UI already, we are done. ~/other$ 0 ; # An explicit non-html format parameter. No forwarding. ~/reverse.*/default 0 ; # Reverse and lookup assume xml format when ~/lookup.*/default 0 ; # no format parameter is given. No forwarding. } The $forward_to_ui parameter can now be used to conditionally forward the calls: # When no endpoint is given , default to search . # Need to add a rewrite so that the rewrite rules below catch it correctly . rewrite ^/ $ / search ; location @php { # fastcgi stuff .. if ( $ forward_to_ui ) { rewrite ^ ( /[ ^/ ]* ) https : // yourserver . com / ui $ 1. html redirect ; } } location ~ [ ^/ ] \\ . php ( /| $ ) { # fastcgi stuff .. if ( $ forward_to_ui ) { rewrite (. * ). php https : // yourserver . com / ui $ 1. html redirect ; } } Warning Be aware that the rewrite commands are slightly different for URIs with and without the .php suffix. Reload nginx and the UI should be available.","title":"Setting up forwarding in Nginx"},{"location":"admin/Setup-Nominatim-UI/#setting-up-forwarding-in-apache","text":"First of all make nominatim-ui available in the ui/ subdirectory where Nominatim is installed. For example, given you have set up an alias under nominatim like this: Alias /nominatim /home/vagrant/build/website you need to insert the following rules for nominatim-ui before that alias: <Directory \"/home/vagrant/nominatim-ui/dist\" > DirectoryIndex search.html Require all granted </Directory> Alias /nominatim/ui /home/vagrant/nominatim-ui/dist Replace /home/vagrant/nominatim-ui with the directory where you have cloned nominatim-ui. Important The alias for nominatim-ui must come before the alias for the Nominatim website directory. To set up forwarding, the Apache rewrite module is needed. Enable it with: sudo a2enmod rewrite Then add rewrite rules to the Directory directive of the Nominatim website directory like this: <Directory \"/home/vagrant/build/website\" > Options FollowSymLinks MultiViews AddType text/html .php Require all granted RewriteEngine On # This must correspond to the URL where nominatim can be found. RewriteBase \"/nominatim/\" # If no endpoint is given, then use search. RewriteRule ^(/|$) \"search.php\" # If format-html is explicity requested, forward to the UI. RewriteCond %{QUERY_STRING} \"format=html\" RewriteRule ^([^/]+).php ui/$1.html [R,END] # Same but .php suffix is missing. RewriteCond %{QUERY_STRING} \"format=html\" RewriteRule ^([^/]+) ui/$1.html [R,END] # If no format parameter is there then forward anything # but /reverse and /lookup to the UI. RewriteCond %{QUERY_STRING} \"!format=\" RewriteCond %{REQUEST_URI} \"!/lookup\" RewriteCond %{REQUEST_URI} \"!/reverse\" RewriteRule ^([^/]+).php ui/$1.html [R,END] # Same but .php suffix is missing. RewriteCond %{QUERY_STRING} \"!format=\" RewriteCond %{REQUEST_URI} \"!/lookup\" RewriteCond %{REQUEST_URI} \"!/reverse\" RewriteRule ^([^/]+) ui/$1.html [R,END] </Directory> Restart Apache and the UI should be available.","title":"Setting up forwarding in Apache"},{"location":"admin/Update/","text":"Updating the Database \uf0c1 There are many different ways to update your Nominatim database. The following section describes how to keep it up-to-date using an online replication service for OpenStreetMap data For a list of other methods to add or update data see the output of nominatim add-data --help . Important If you have configured a flatnode file for the import, then you need to keep this flatnode file around for updates. Installing the newest version of Pyosmium \uf0c1 It is recommended to install Pyosmium via pip. Make sure to use python3. Run (as the same user who will later run the updates): pip3 install --user osmium Setting up the update process \uf0c1 Next the update needs to be initialised. By default Nominatim is configured to update using the global minutely diffs. If you want a different update source you will need to add some settings to .env . For example, to use the daily country extracts diffs for Ireland from Geofabrik add the following: # base URL of the replication service NOMINATIM_REPLICATION_URL=\"https://download.geofabrik.de/europe/ireland-and-northern-ireland-updates\" # How often upstream publishes diffs NOMINATIM_REPLICATION_UPDATE_INTERVAL=86400 # How long to sleep if no update found yet NOMINATIM_REPLICATION_RECHECK_INTERVAL=900 To set up the update process now run the following command: nominatim replication --init It outputs the date where updates will start. Recheck that this date is what you expect. The replication --init command needs to be rerun whenever the replication service is changed. Updating Nominatim \uf0c1 The following command will keep your database constantly up to date: nominatim replication If you have imported multiple country extracts and want to keep them up-to-date, Advanced installations section contains instructions to set up and update multiple country extracts.","title":"Update"},{"location":"admin/Update/#updating-the-database","text":"There are many different ways to update your Nominatim database. The following section describes how to keep it up-to-date using an online replication service for OpenStreetMap data For a list of other methods to add or update data see the output of nominatim add-data --help . Important If you have configured a flatnode file for the import, then you need to keep this flatnode file around for updates.","title":"Updating the Database"},{"location":"admin/Update/#installing-the-newest-version-of-pyosmium","text":"It is recommended to install Pyosmium via pip. Make sure to use python3. Run (as the same user who will later run the updates): pip3 install --user osmium","title":"Installing the newest version of Pyosmium"},{"location":"admin/Update/#setting-up-the-update-process","text":"Next the update needs to be initialised. By default Nominatim is configured to update using the global minutely diffs. If you want a different update source you will need to add some settings to .env . For example, to use the daily country extracts diffs for Ireland from Geofabrik add the following: # base URL of the replication service NOMINATIM_REPLICATION_URL=\"https://download.geofabrik.de/europe/ireland-and-northern-ireland-updates\" # How often upstream publishes diffs NOMINATIM_REPLICATION_UPDATE_INTERVAL=86400 # How long to sleep if no update found yet NOMINATIM_REPLICATION_RECHECK_INTERVAL=900 To set up the update process now run the following command: nominatim replication --init It outputs the date where updates will start. Recheck that this date is what you expect. The replication --init command needs to be rerun whenever the replication service is changed.","title":"Setting up the update process"},{"location":"admin/Update/#updating-nominatim","text":"The following command will keep your database constantly up to date: nominatim replication If you have imported multiple country extracts and want to keep them up-to-date, Advanced installations section contains instructions to set up and update multiple country extracts.","title":"Updating Nominatim"},{"location":"api/Details/","text":"Place details \uf0c1 Show all details about a single place saved in the database. Warning The details page exists for debugging only. You may not use it in scripts or to automatically query details about a result. See Nominatim Usage Policy . Parameters \uf0c1 The details API supports the following two request formats: https://nominatim.openstreetmap.org/details?osmtype=[N|W|R] & osmid= <value> & class= <value> osmtype and osmid are required parameters. The type is one of node (N), way (W) or relation (R). The id must be a number. The class parameter is optional and allows to distinguish between entries, when the corresponding OSM object has more than one main tag. For example, when a place is tagged with tourism=hotel and amenity=restaurant , there will be two place entries in Nominatim, one for a restaurant, one for a hotel. You need to specify class=tourism or class=amentity to get exactly the one you want. If there are multiple places in the database but the class parameter is left out, then one of the places will be chosen at random and displayed. https://nominatim.openstreetmap.org/details?place_id= <value> Place IDs are assigned sequentially during Nominatim data import. The ID for a place is different between Nominatim installation (servers) and changes when data gets reimported. Therefore it cannot be used as a permanent id and shouldn't be used in bug reports. Additional optional parameters are explained below. Output format \uf0c1 json_callback=<string> Wrap JSON output in a callback function (JSONP) i.e. <string>(<json>) . pretty=[0|1] Add indentation to make it more human-readable. (Default: 0) Output details \uf0c1 addressdetails=[0|1] Include a breakdown of the address into elements. (Default: 0) keywords=[0|1] Include a list of name keywords and address keywords (word ids). (Default: 0) linkedplaces=[0|1] Include a details of places that are linked with this one. Places get linked together when they are different forms of the same physical object. Nominatim links two kinds of objects together: place nodes get linked with the corresponding administrative boundaries. Waterway relations get linked together with their members. (Default: 1) hierarchy=[0|1] Include details of places lower in the address hierarchy. (Default: 0) group_hierarchy=[0|1] For JSON output will group the places by type. (Default: 0) polygon_geojson=[0|1] Include geometry of result. (Default: 0) Language of results \uf0c1 accept-language=<browser language string> Preferred language order for showing result, overrides the value specified in the \"Accept-Language\" HTTP header. Either use a standard RFC2616 accept-language string or a simple comma-separated list of language codes. Examples \uf0c1 JSON \uf0c1 https://nominatim.openstreetmap.org/details.php?osmtype=W&osmid=38210407&format=json { \"place_id\" : 85993608 , \"parent_place_id\" : 72765313 , \"osm_type\" : \"W\" , \"osm_id\" : 38210407 , \"category\" : \"place\" , \"type\" : \"square\" , \"admin_level\" : \"15\" , \"localname\" : \"Pariser Platz\" , \"names\" : { \"name\" : \"Pariser Platz\" , \"name:be\" : \"\u041f\u0430\u0440\u044b\u0436\u0441\u043a\u0430\u044f \u043f\u043b\u043e\u0448\u0447\u0430\" , \"name:de\" : \"Pariser Platz\" , \"name:es\" : \"Plaza de Par\u00eds\" , \"name:he\" : \"\u05e4\u05d0\u05e8\u05d9\u05d6\u05e8 \u05e4\u05dc\u05d0\u05e5\" , \"name:ko\" : \"\ud30c\ub9ac\uc800 \uad11\uc7a5\" , \"name:la\" : \"Forum Parisinum\" , \"name:ru\" : \"\u041f\u0430\u0440\u0438\u0436\u0441\u043a\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c\" , \"name:uk\" : \"\u041f\u0430\u0440\u0438\u0437\u044c\u043a\u0430 \u043f\u043b\u043e\u0449\u0430\" , \"name:zh\" : \"\u5df4\u9ece\u5ee3\u5834\" }, \"addresstags\" : { \"postcode\" : \"10117\" }, \"housenumber\" : null , \"calculated_postcode\" : \"10117\" , \"country_code\" : \"de\" , \"indexed_date\" : \"2018-08-18T17:02:45+00:00\" , \"importance\" : 0.339401620591472 , \"calculated_importance\" : 0.339401620591472 , \"extratags\" : { \"wikidata\" : \"Q156716\" , \"wikipedia\" : \"de:Pariser Platz\" }, \"calculated_wikipedia\" : \"de:Pariser_Platz\" , \"rank_address\" : 30 , \"rank_search\" : 30 , \"isarea\" : true , \"centroid\" : { \"type\" : \"Point\" , \"coordinates\" : [ 13.3786822618517 , 52.5163654 ] }, \"geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [ 13.3786822618517 , 52.5163654 ] } }","title":"Details"},{"location":"api/Details/#place-details","text":"Show all details about a single place saved in the database. Warning The details page exists for debugging only. You may not use it in scripts or to automatically query details about a result. See Nominatim Usage Policy .","title":"Place details"},{"location":"api/Details/#parameters","text":"The details API supports the following two request formats: https://nominatim.openstreetmap.org/details?osmtype=[N|W|R] & osmid= <value> & class= <value> osmtype and osmid are required parameters. The type is one of node (N), way (W) or relation (R). The id must be a number. The class parameter is optional and allows to distinguish between entries, when the corresponding OSM object has more than one main tag. For example, when a place is tagged with tourism=hotel and amenity=restaurant , there will be two place entries in Nominatim, one for a restaurant, one for a hotel. You need to specify class=tourism or class=amentity to get exactly the one you want. If there are multiple places in the database but the class parameter is left out, then one of the places will be chosen at random and displayed. https://nominatim.openstreetmap.org/details?place_id= <value> Place IDs are assigned sequentially during Nominatim data import. The ID for a place is different between Nominatim installation (servers) and changes when data gets reimported. Therefore it cannot be used as a permanent id and shouldn't be used in bug reports. Additional optional parameters are explained below.","title":"Parameters"},{"location":"api/Details/#output-format","text":"json_callback=<string> Wrap JSON output in a callback function (JSONP) i.e. <string>(<json>) . pretty=[0|1] Add indentation to make it more human-readable. (Default: 0)","title":"Output format"},{"location":"api/Details/#output-details","text":"addressdetails=[0|1] Include a breakdown of the address into elements. (Default: 0) keywords=[0|1] Include a list of name keywords and address keywords (word ids). (Default: 0) linkedplaces=[0|1] Include a details of places that are linked with this one. Places get linked together when they are different forms of the same physical object. Nominatim links two kinds of objects together: place nodes get linked with the corresponding administrative boundaries. Waterway relations get linked together with their members. (Default: 1) hierarchy=[0|1] Include details of places lower in the address hierarchy. (Default: 0) group_hierarchy=[0|1] For JSON output will group the places by type. (Default: 0) polygon_geojson=[0|1] Include geometry of result. (Default: 0)","title":"Output details"},{"location":"api/Details/#language-of-results","text":"accept-language=<browser language string> Preferred language order for showing result, overrides the value specified in the \"Accept-Language\" HTTP header. Either use a standard RFC2616 accept-language string or a simple comma-separated list of language codes.","title":"Language of results"},{"location":"api/Details/#examples","text":"","title":"Examples"},{"location":"api/Details/#json","text":"https://nominatim.openstreetmap.org/details.php?osmtype=W&osmid=38210407&format=json { \"place_id\" : 85993608 , \"parent_place_id\" : 72765313 , \"osm_type\" : \"W\" , \"osm_id\" : 38210407 , \"category\" : \"place\" , \"type\" : \"square\" , \"admin_level\" : \"15\" , \"localname\" : \"Pariser Platz\" , \"names\" : { \"name\" : \"Pariser Platz\" , \"name:be\" : \"\u041f\u0430\u0440\u044b\u0436\u0441\u043a\u0430\u044f \u043f\u043b\u043e\u0448\u0447\u0430\" , \"name:de\" : \"Pariser Platz\" , \"name:es\" : \"Plaza de Par\u00eds\" , \"name:he\" : \"\u05e4\u05d0\u05e8\u05d9\u05d6\u05e8 \u05e4\u05dc\u05d0\u05e5\" , \"name:ko\" : \"\ud30c\ub9ac\uc800 \uad11\uc7a5\" , \"name:la\" : \"Forum Parisinum\" , \"name:ru\" : \"\u041f\u0430\u0440\u0438\u0436\u0441\u043a\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c\" , \"name:uk\" : \"\u041f\u0430\u0440\u0438\u0437\u044c\u043a\u0430 \u043f\u043b\u043e\u0449\u0430\" , \"name:zh\" : \"\u5df4\u9ece\u5ee3\u5834\" }, \"addresstags\" : { \"postcode\" : \"10117\" }, \"housenumber\" : null , \"calculated_postcode\" : \"10117\" , \"country_code\" : \"de\" , \"indexed_date\" : \"2018-08-18T17:02:45+00:00\" , \"importance\" : 0.339401620591472 , \"calculated_importance\" : 0.339401620591472 , \"extratags\" : { \"wikidata\" : \"Q156716\" , \"wikipedia\" : \"de:Pariser Platz\" }, \"calculated_wikipedia\" : \"de:Pariser_Platz\" , \"rank_address\" : 30 , \"rank_search\" : 30 , \"isarea\" : true , \"centroid\" : { \"type\" : \"Point\" , \"coordinates\" : [ 13.3786822618517 , 52.5163654 ] }, \"geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [ 13.3786822618517 , 52.5163654 ] } }","title":"JSON"},{"location":"api/Faq/","text":"Frequently Asked Questions \uf0c1 API Results \uf0c1 1. The address of my search results contains far-away places that don't belong there. \uf0c1 Nominatim computes the address from two sources in the OpenStreetMap data: from administrative boundaries and from place nodes. Boundaries are the more useful source. They precisely describe an area. So it is very clear for Nominatim if a point belongs to an area or not. Place nodes are more complicated. These are only points without any precise extent. So Nominatim has to take a guess and assume that an address belongs to the closest place node it can find. In an ideal world, Nominatim would not need the place nodes but there are many places on earth where there are no precise boundaries available for all parts that make up an address. This is in particular true for the more local address parts, like villages and suburbs. Therefore it is not possible to completely dismiss place nodes. And sometimes they sneak in where they don't belong. As a OpenStreetMap mapper, you can improve the situation in two ways: if you see a place node for which already an administrative area exists, then you should link the two by adding the node with a 'label' role to the boundary relation. If there is no administrative area, you can add the approximate extent of the place and tag it place= as well. 2. When doing reverse search, the address details have parts that don't contain the point I was looking up. \uf0c1 There is a common misconception how the reverse API call works in Nominatim. Reverse does not give you the address of the point you asked for. Reverse returns the closest object to the point you asked for and then returns the address of that object. Now, if you are close to a border, then the closest object may be across that border. When Nominatim then returns the address, it contains the county/state/country across the border. 3. I get different counties/states/countries when I change the zoom parameter in the reverse query. How is that possible? \uf0c1 This is basically the same problem as in the previous answer. The zoom level influences at which search rank Nominatim starts looking for the closest object. So the closest house number maybe on one side of the border while the closest street is on the other. As the address details contain the address of the closest object found, you might sometimes get one result, sometimes the other for the closest point. 4. Can you return the continent? \uf0c1 Nominatim assigns each map feature one country. Those outside any administrative boundaries are assigned a special no-country. Continents or other super-national administrations (e.g. European Union, NATO, Custom unions) are not supported, see also Administrative Boundary . 5. Can you return the timezone? \uf0c1 See this separate OpenStreetMap-based project Timezone Boundary Builder . 6. I want to download a list of streets/restaurants of a city/region \uf0c1 The Overpass API is more suited for these kinds of queries. That said if you installed your own Nominatim instance you can use the nominatim export PHP script as basis to return such lists.","title":"FAQ"},{"location":"api/Faq/#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"api/Faq/#api-results","text":"","title":"API Results"},{"location":"api/Faq/#1-the-address-of-my-search-results-contains-far-away-places-that-dont-belong-there","text":"Nominatim computes the address from two sources in the OpenStreetMap data: from administrative boundaries and from place nodes. Boundaries are the more useful source. They precisely describe an area. So it is very clear for Nominatim if a point belongs to an area or not. Place nodes are more complicated. These are only points without any precise extent. So Nominatim has to take a guess and assume that an address belongs to the closest place node it can find. In an ideal world, Nominatim would not need the place nodes but there are many places on earth where there are no precise boundaries available for all parts that make up an address. This is in particular true for the more local address parts, like villages and suburbs. Therefore it is not possible to completely dismiss place nodes. And sometimes they sneak in where they don't belong. As a OpenStreetMap mapper, you can improve the situation in two ways: if you see a place node for which already an administrative area exists, then you should link the two by adding the node with a 'label' role to the boundary relation. If there is no administrative area, you can add the approximate extent of the place and tag it place= as well.","title":"1. The address of my search results contains far-away places that don't belong there."},{"location":"api/Faq/#2-when-doing-reverse-search-the-address-details-have-parts-that-dont-contain-the-point-i-was-looking-up","text":"There is a common misconception how the reverse API call works in Nominatim. Reverse does not give you the address of the point you asked for. Reverse returns the closest object to the point you asked for and then returns the address of that object. Now, if you are close to a border, then the closest object may be across that border. When Nominatim then returns the address, it contains the county/state/country across the border.","title":"2. When doing reverse search, the address details have parts that don't contain the point I was looking up."},{"location":"api/Faq/#3-i-get-different-countiesstatescountries-when-i-change-the-zoom-parameter-in-the-reverse-query-how-is-that-possible","text":"This is basically the same problem as in the previous answer. The zoom level influences at which search rank Nominatim starts looking for the closest object. So the closest house number maybe on one side of the border while the closest street is on the other. As the address details contain the address of the closest object found, you might sometimes get one result, sometimes the other for the closest point.","title":"3. I get different counties/states/countries when I change the zoom parameter in the reverse query. How is that possible?"},{"location":"api/Faq/#4-can-you-return-the-continent","text":"Nominatim assigns each map feature one country. Those outside any administrative boundaries are assigned a special no-country. Continents or other super-national administrations (e.g. European Union, NATO, Custom unions) are not supported, see also Administrative Boundary .","title":"4. Can you return the continent?"},{"location":"api/Faq/#5-can-you-return-the-timezone","text":"See this separate OpenStreetMap-based project Timezone Boundary Builder .","title":"5. Can you return the timezone?"},{"location":"api/Faq/#6-i-want-to-download-a-list-of-streetsrestaurants-of-a-cityregion","text":"The Overpass API is more suited for these kinds of queries. That said if you installed your own Nominatim instance you can use the nominatim export PHP script as basis to return such lists.","title":"6. I want to download a list of streets/restaurants of a city/region"},{"location":"api/Lookup/","text":"Address lookup \uf0c1 The lookup API allows to query the address and other details of one or multiple OSM objects like node, way or relation. Parameters \uf0c1 The lookup API has the following format: https://nominatim.openstreetmap.org/lookup?osm_ids=[N|W|R]<value>,\u2026,\u2026,&<params> osm_ids is mandatory and must contain a comma-separated list of OSM ids each prefixed with its type, one of node(N), way(W) or relation(R). Up to 50 ids can be queried at the same time. Additional optional parameters are explained below. Output format \uf0c1 format=[xml|json|jsonv2|geojson|geocodejson] See Place Output Formats for details on each format. (Default: xml) json_callback=<string> Wrap JSON output in a callback function (JSONP) i.e. <string>(<json>) . Only has an effect for JSON output formats. Output details \uf0c1 addressdetails=[0|1] Include a breakdown of the address into elements. (Default: 0) extratags=[0|1] Include additional information in the result if available, e.g. wikipedia link, opening hours. (Default: 0) namedetails=[0|1] Include a list of alternative names in the results. These may include language variants, references, operator and brand. (Default: 0) Language of results \uf0c1 accept-language=<browser language string> Preferred language order for showing search results, overrides the value specified in the \"Accept-Language\" HTTP header. Either use a standard RFC2616 accept-language string or a simple comma-separated list of language codes. Polygon output \uf0c1 polygon_geojson=1 polygon_kml=1 polygon_svg=1 polygon_text=1 Output geometry of results as a GeoJSON, KML, SVG or WKT. Only one of these options can be used at a time. (Default: 0) polygon_threshold=0.0 Return a simplified version of the output geometry. The parameter is the tolerance in degrees with which the geometry may differ from the original geometry. Topology is preserved in the result. (Default: 0.0) Other \uf0c1 email=<valid email address> If you are making large numbers of request please include an appropriate email address to identify your requests. See Nominatim's Usage Policy for more details. debug=[0|1] Output assorted developer debug information. Data on internals of Nominatim's \"Search Loop\" logic, and SQL queries. The output is (rough) HTML format. This overrides the specified machine readable format. (Default: 0) Examples \uf0c1 XML \uf0c1 https://nominatim.openstreetmap.org/lookup?osm_ids=R146656,W104393803,N240109189 <lookupresults timestamp= \"Mon, 29 Jun 15 18:01:33 +0000\" attribution= \"Data \u00a9 OpenStreetMap contributors, ODbL 1.0. https://www.openstreetmap.org/copyright\" querystring= \"R146656,W104393803,N240109189\" polygon= \"false\" > <place place_id= \"127761056\" osm_type= \"relation\" osm_id= \"146656\" place_rank= \"16\" lat= \"53.4791466\" lon= \"-2.2447445\" display_name= \"Manchester, Greater Manchester, North West England, England, United Kingdom\" class= \"boundary\" type= \"administrative\" importance= \"0.704893333438333\" > <city> Manchester </city> <county> Greater Manchester </county> <state_district> North West England </state_district> <state> England </state> <country> United Kingdom </country> <country_code> gb </country_code> </place> <place place_id= \"77769745\" osm_type= \"way\" osm_id= \"104393803\" place_rank= \"30\" lat= \"52.5162024\" lon= \"13.3777343363579\" display_name= \"Brandenburg Gate, 1, Pariser Platz, Mitte, Berlin, 10117, Germany\" class= \"tourism\" type= \"attraction\" importance= \"0.443472858361592\" > <attraction> Brandenburg Gate </attraction> <house_number> 1 </house_number> <pedestrian> Pariser Platz </pedestrian> <suburb> Mitte </suburb> <city_district> Mitte </city_district> <city> Berlin </city> <state> Berlin </state> <postcode> 10117 </postcode> <country> Germany </country> <country_code> de </country_code> </place> <place place_id= \"2570600569\" osm_type= \"node\" osm_id= \"240109189\" place_rank= \"15\" lat= \"52.5170365\" lon= \"13.3888599\" display_name= \"Berlin, Germany\" class= \"place\" type= \"city\" importance= \"0.822149797630868\" > <city> Berlin </city> <state> Berlin </state> <country> Germany </country> <country_code> de </country_code> </place> </lookupresults> JSON with extratags \uf0c1 https://nominatim.openstreetmap.org/lookup?osm_ids=W50637691&format=json [ { \"place_id\" : \"84271358\" , \"licence\" : \"Data \u00a9 OpenStreetMap contributors, ODbL 1.0. https://osm.org/copyright\" , \"osm_type\" : \"way\" , \"osm_id\" : \"50637691\" , \"lat\" : \"52.39955055\" , \"lon\" : \"13.04806574678\" , \"display_name\" : \"Brandenburger Tor, Brandenburger Stra\u00dfe, N\u00f6rdliche Innenstadt, Innenstadt, Potsdam, Brandenburg, 14467, Germany\" , \"class\" : \"historic\" , \"type\" : \"city_gate\" , \"importance\" : \"0.221233780277011\" , \"address\" : { \"address29\" : \"Brandenburger Tor\" , \"pedestrian\" : \"Brandenburger Stra\u00dfe\" , \"suburb\" : \"N\u00f6rdliche Innenstadt\" , \"city\" : \"Potsdam\" , \"state\" : \"Brandenburg\" , \"postcode\" : \"14467\" , \"country\" : \"Germany\" , \"country_code\" : \"de\" }, \"extratags\" : { \"image\" : \"http://commons.wikimedia.org/wiki/File:Potsdam_brandenburger_tor.jpg\" , \"wikidata\" : \"Q695045\" , \"wikipedia\" : \"de:Brandenburger Tor (Potsdam)\" , \"wheelchair\" : \"yes\" , \"description\" : \"Kleines Brandenburger Tor in Potsdam\" } } ]","title":"Address Lookup"},{"location":"api/Lookup/#address-lookup","text":"The lookup API allows to query the address and other details of one or multiple OSM objects like node, way or relation.","title":"Address lookup"},{"location":"api/Lookup/#parameters","text":"The lookup API has the following format: https://nominatim.openstreetmap.org/lookup?osm_ids=[N|W|R]<value>,\u2026,\u2026,&<params> osm_ids is mandatory and must contain a comma-separated list of OSM ids each prefixed with its type, one of node(N), way(W) or relation(R). Up to 50 ids can be queried at the same time. Additional optional parameters are explained below.","title":"Parameters"},{"location":"api/Lookup/#output-format","text":"format=[xml|json|jsonv2|geojson|geocodejson] See Place Output Formats for details on each format. (Default: xml) json_callback=<string> Wrap JSON output in a callback function (JSONP) i.e. <string>(<json>) . Only has an effect for JSON output formats.","title":"Output format"},{"location":"api/Lookup/#output-details","text":"addressdetails=[0|1] Include a breakdown of the address into elements. (Default: 0) extratags=[0|1] Include additional information in the result if available, e.g. wikipedia link, opening hours. (Default: 0) namedetails=[0|1] Include a list of alternative names in the results. These may include language variants, references, operator and brand. (Default: 0)","title":"Output details"},{"location":"api/Lookup/#language-of-results","text":"accept-language=<browser language string> Preferred language order for showing search results, overrides the value specified in the \"Accept-Language\" HTTP header. Either use a standard RFC2616 accept-language string or a simple comma-separated list of language codes.","title":"Language of results"},{"location":"api/Lookup/#polygon-output","text":"polygon_geojson=1 polygon_kml=1 polygon_svg=1 polygon_text=1 Output geometry of results as a GeoJSON, KML, SVG or WKT. Only one of these options can be used at a time. (Default: 0) polygon_threshold=0.0 Return a simplified version of the output geometry. The parameter is the tolerance in degrees with which the geometry may differ from the original geometry. Topology is preserved in the result. (Default: 0.0)","title":"Polygon output"},{"location":"api/Lookup/#other","text":"email=<valid email address> If you are making large numbers of request please include an appropriate email address to identify your requests. See Nominatim's Usage Policy for more details. debug=[0|1] Output assorted developer debug information. Data on internals of Nominatim's \"Search Loop\" logic, and SQL queries. The output is (rough) HTML format. This overrides the specified machine readable format. (Default: 0)","title":"Other"},{"location":"api/Lookup/#examples","text":"","title":"Examples"},{"location":"api/Lookup/#xml","text":"https://nominatim.openstreetmap.org/lookup?osm_ids=R146656,W104393803,N240109189 <lookupresults timestamp= \"Mon, 29 Jun 15 18:01:33 +0000\" attribution= \"Data \u00a9 OpenStreetMap contributors, ODbL 1.0. https://www.openstreetmap.org/copyright\" querystring= \"R146656,W104393803,N240109189\" polygon= \"false\" > <place place_id= \"127761056\" osm_type= \"relation\" osm_id= \"146656\" place_rank= \"16\" lat= \"53.4791466\" lon= \"-2.2447445\" display_name= \"Manchester, Greater Manchester, North West England, England, United Kingdom\" class= \"boundary\" type= \"administrative\" importance= \"0.704893333438333\" > <city> Manchester </city> <county> Greater Manchester </county> <state_district> North West England </state_district> <state> England </state> <country> United Kingdom </country> <country_code> gb </country_code> </place> <place place_id= \"77769745\" osm_type= \"way\" osm_id= \"104393803\" place_rank= \"30\" lat= \"52.5162024\" lon= \"13.3777343363579\" display_name= \"Brandenburg Gate, 1, Pariser Platz, Mitte, Berlin, 10117, Germany\" class= \"tourism\" type= \"attraction\" importance= \"0.443472858361592\" > <attraction> Brandenburg Gate </attraction> <house_number> 1 </house_number> <pedestrian> Pariser Platz </pedestrian> <suburb> Mitte </suburb> <city_district> Mitte </city_district> <city> Berlin </city> <state> Berlin </state> <postcode> 10117 </postcode> <country> Germany </country> <country_code> de </country_code> </place> <place place_id= \"2570600569\" osm_type= \"node\" osm_id= \"240109189\" place_rank= \"15\" lat= \"52.5170365\" lon= \"13.3888599\" display_name= \"Berlin, Germany\" class= \"place\" type= \"city\" importance= \"0.822149797630868\" > <city> Berlin </city> <state> Berlin </state> <country> Germany </country> <country_code> de </country_code> </place> </lookupresults>","title":"XML"},{"location":"api/Lookup/#json-with-extratags","text":"https://nominatim.openstreetmap.org/lookup?osm_ids=W50637691&format=json [ { \"place_id\" : \"84271358\" , \"licence\" : \"Data \u00a9 OpenStreetMap contributors, ODbL 1.0. https://osm.org/copyright\" , \"osm_type\" : \"way\" , \"osm_id\" : \"50637691\" , \"lat\" : \"52.39955055\" , \"lon\" : \"13.04806574678\" , \"display_name\" : \"Brandenburger Tor, Brandenburger Stra\u00dfe, N\u00f6rdliche Innenstadt, Innenstadt, Potsdam, Brandenburg, 14467, Germany\" , \"class\" : \"historic\" , \"type\" : \"city_gate\" , \"importance\" : \"0.221233780277011\" , \"address\" : { \"address29\" : \"Brandenburger Tor\" , \"pedestrian\" : \"Brandenburger Stra\u00dfe\" , \"suburb\" : \"N\u00f6rdliche Innenstadt\" , \"city\" : \"Potsdam\" , \"state\" : \"Brandenburg\" , \"postcode\" : \"14467\" , \"country\" : \"Germany\" , \"country_code\" : \"de\" }, \"extratags\" : { \"image\" : \"http://commons.wikimedia.org/wiki/File:Potsdam_brandenburger_tor.jpg\" , \"wikidata\" : \"Q695045\" , \"wikipedia\" : \"de:Brandenburger Tor (Potsdam)\" , \"wheelchair\" : \"yes\" , \"description\" : \"Kleines Brandenburger Tor in Potsdam\" } } ]","title":"JSON with extratags"},{"location":"api/Output/","text":"Place Output \uf0c1 The /reverse , /search and /lookup API calls produce very similar output which is explained in this section. There is one section for each format. The format correspond to what was selected via the format parameter. JSON \uf0c1 The JSON format returns an array of places (for search and lookup) or a single place (for reverse) of the following format: { \"place_id\": \"100149\", \"licence\": \"Data \u00a9 OpenStreetMap contributors, ODbL 1.0. https://osm.org/copyright\", \"osm_type\": \"node\", \"osm_id\": \"107775\", \"boundingbox\": [\"51.3473219\", \"51.6673219\", \"-0.2876474\", \"0.0323526\"], \"lat\": \"51.5073219\", \"lon\": \"-0.1276474\", \"display_name\": \"London, Greater London, England, SW1A 2DU, United Kingdom\", \"class\": \"place\", \"type\": \"city\", \"importance\": 0.9654895765402, \"icon\": \"https://nominatim.openstreetmap.org/images/mapicons/poi_place_city.p.20.png\", \"address\": { \"city\": \"London\", \"state_district\": \"Greater London\", \"state\": \"England\", \"postcode\": \"SW1A 2DU\", \"country\": \"United Kingdom\", \"country_code\": \"gb\" }, \"extratags\": { \"capital\": \"yes\", \"website\": \"http://www.london.gov.uk\", \"wikidata\": \"Q84\", \"wikipedia\": \"en:London\", \"population\": \"8416535\" } } The possible fields are: place_id - reference to the Nominatim internal database ID ( see notes ) osm_type , osm_id - reference to the OSM object ( see notes ) boundingbox - area of corner coordinates ( see notes ) lat , lon - latitude and longitude of the centroid of the object display_name - full comma-separated address class , type - key and value of the main OSM tag importance - computed importance rank icon - link to class icon (if available) address - dictionary of address details (only with addressdetails=1 , see notes ) extratags - dictionary with additional useful tags like website or maxspeed (only with extratags=1 ) namedetails - dictionary with full list of available names including ref etc. geojson , svg , geotext , geokml - full geometry (only with the appropriate polygon_* parameter) JSONv2 \uf0c1 This is the same as the JSON format with two changes: class renamed to category additional field place_rank with the search rank of the object GeoJSON \uf0c1 This format follows the RFC7946 . Every feature includes a bounding box ( bbox ). The properties object has the following fields: place_id - reference to the Nominatim internal database ID ( see notes ) osm_type , osm_id - reference to the OSM object ( see notes ) category , type - key and value of the main OSM tag display_name - full comma-separated address place_rank - class search rank importance - computed importance rank icon - link to class icon (if available) address - dictionary of address details (only with addressdetails=1 , see notes ) extratags - dictionary with additional useful tags like website or maxspeed (only with extratags=1 ) namedetails - dictionary with full list of available names including ref etc. Use polygon_geojson to output the full geometry of the object instead of the centroid. GeocodeJSON \uf0c1 The GeocodeJSON format follows the GeocodeJSON spec 0.1.0 . The following feature attributes are implemented: osm_type , osm_id - reference to the OSM object (unofficial extension, see notes ) type - value of the main tag of the object (e.g. residential, restaurant, ...) label - full comma-separated address name - localised name of the place housenumber , street , locality , district , postcode , city , county , state , country - provided when it can be determined from the address admin - list of localised names of administrative boundaries (only with addressdetails=1 ) Use polygon_geojson to output the full geometry of the object instead of the centroid. XML \uf0c1 The XML response returns one or more place objects in slightly different formats depending on the API call. Reverse \uf0c1 <reversegeocode timestamp= \"Sat, 11 Aug 18 11:53:21 +0000\" attribution= \"Data \u00a9 OpenStreetMap contributors, ODbL 1.0. https://www.openstreetmap.org/copyright\" querystring= \"lat=48.400381&lon=11.745876&zoom=5&format=xml\" > <result place_id= \"179509537\" osm_type= \"relation\" osm_id= \"2145268\" ref= \"BY\" place_rank= \"15\" address_rank= \"15\" lat= \"48.9467562\" lon= \"11.4038717\" boundingbox= \"47.2701114,50.5647142,8.9763497,13.8396373\" > Bavaria, Germany </result> <addressparts> <state> Bavaria </state> <country> Germany </country> <country_code> de </country_code> </addressparts> <extratags> <tag key= \"place\" value= \"state\" /> <tag key= \"wikidata\" value= \"Q980\" /> <tag key= \"wikipedia\" value= \"de:Bayern\" /> <tag key= \"population\" value= \"12520000\" /> <tag key= \"name:prefix\" value= \"Freistaat\" /> </extratags> </reversegeocode> The attributes of the outer reversegeocode element return generic information about the query, including the time when the response was sent (in UTC), attribution to OSM and the original querystring. The place information can be found in the result element. The attributes of that element contain: place_id - reference to the Nominatim internal database ID ( see notes ) osm_type , osm_id - reference to the OSM object ( see notes ) ref - content of ref tag if it exists lat , lon - latitude and longitude of the centroid of the object boundingbox - comma-separated list of corner coordinates ( see notes ) The full address of the result can be found in the content of the result element as a comma-separated list. Additional information requested with addressdetails=1 , extratags=1 and namedetails=1 can be found in extra elements. Search and Lookup \uf0c1 <searchresults timestamp=\"Sat, 11 Aug 18 11:55:35 +0000\" attribution=\"Data \u00a9 OpenStreetMap contributors, ODbL 1.0. https://www.openstreetmap.org/copyright\" querystring=\"london\" polygon=\"false\" exclude_place_ids=\"100149\" more_url=\"https://nominatim.openstreetmap.org/search.php?q=london&addressdetails=1&extratags=1&exclude_place_ids=100149&format=xml&accept-language=en-US%2Cen%3Bq%3D0.7%2Cde%3Bq%3D0.3\"> <place place_id=\"100149\" osm_type=\"node\" osm_id=\"107775\" place_rank=\"15\" address_rank=\"15\" boundingbox=\"51.3473219,51.6673219,-0.2876474,0.0323526\" lat=\"51.5073219\" lon=\"-0.1276474\" display_name=\"London, Greater London, England, SW1A 2DU, United Kingdom\" class=\"place\" type=\"city\" importance=\"0.9654895765402\" icon=\"https://nominatim.openstreetmap.org/images/mapicons/poi_place_city.p.20.png\"> <extratags> <tag key=\"capital\" value=\"yes\"/> <tag key=\"website\" value=\"http://www.london.gov.uk\"/> <tag key=\"wikidata\" value=\"Q84\"/> <tag key=\"wikipedia\" value=\"en:London\"/> <tag key=\"population\" value=\"8416535\"/> </extratags> <city>London</city> <state_district>Greater London</state_district> <state>England</state> <postcode>SW1A 2DU</postcode> <country>United Kingdom</country> <country_code>gb</country_code> </place> </searchresults> The attributes of the outer searchresults or lookupresults element return generic information about the query: timestamp - UTC time when the response was sent attribution - OSM licensing information querystring - original query polygon - true when extra geometry information was requested exclude_place_ids - IDs of places that should be ignored in a follow-up request more_url - search call that will yield additional results for the query just sent The place information can be found in the place elements, of which there may be more than one. The attributes of that element contain: place_id - reference to the Nominatim internal database ID ( see notes ) osm_type , osm_id - reference to the OSM object ( see notes ) ref - content of ref tag if it exists lat , lon - latitude and longitude of the centroid of the object boundingbox - comma-separated list of corner coordinates ( see notes ) place_rank - class search rank address_rank - place address rank display_name - full comma-separated address class , type - key and value of the main OSM tag importance - computed importance rank icon - link to class icon (if available) When addressdetails=1 is requested, the localised address parts appear as subelements with the type of the address part. Additional information requested with extratags=1 and namedetails=1 can be found in extra elements as sub-element of extratags and namedetails respectively. Notes on field values \uf0c1 place_id is not a persistent id \uf0c1 The place_id is an internal identifier that is assigned data is imported into a Nominatim database. The same OSM object will have a different value on another server. It may even change its ID on the same server when it is removed and reimported while updating the database with fresh OSM data. It is thus not useful to treat it as permanent for later use. The combination osm_type + osm_id is slighly better but remember in OpenStreetMap mappers can delete, split, recreate places (and those get a new osm_id ), there is no link between those old and new ids. Places can also change their meaning without changing their osm_id , e.g. when a restaurant is retagged as supermarket. For a more in-depth discussion see Permanent ID . If you need an ID that is consistent over multiple installations of Nominatim, then you should use the combination of osm_type + osm_id + class . OSM reference \uf0c1 Nominatim may sometimes return special objects that do not correspond directly to an object in OpenStreetMap. These are: Postcodes . Nominatim returns an postcode point created from all mapped postcodes of the same name. The class and type of these object is place=postcdode . No osm_type and osm_id are included in the result. Housenumber interpolations . Nominatim returns a single interpolated housenumber from the interpolation way. The class and type are place=house and osm_type and osm_id correspond to the interpolation way in OSM. TIGER housenumber. Nominatim returns a single interpolated housenumber from the TIGER data. The class and type are place=house and osm_type and osm_id correspond to the street mentioned in the result. Please note that the osm_type and osm_id returned may be changed in the future. You should not expect to only find node , way and relation for the type. boundingbox \uf0c1 Comma separated list of min latitude, max latitude, min longitude, max longitude. The whole planet would be -90,90,-180,180 . Can be used to pan and center the map on the result, for example with leafletjs mapping library map.fitBounds([[bbox[0],bbox[2]],[bbox[1],bbox[3]]], {padding: [20, 20], maxzoom: 16}); Bounds crossing the antimeridian have a min latitude -180 and max latitude 180, essentially covering the entire planet (see issue 184 ). addressdetails \uf0c1 Address details in the xml and json formats return a list of names together with a designation label. Per default the following labels may appear: continent country, country_code region, state, state_district, county municipality, city, town, village city_district, district, borough, suburb, subdivision hamlet, croft, isolated_dwelling neighbourhood, allotments, quarter city_block, residental, farm, farmyard, industrial, commercial, retail road house_number, house_name emergency, historic, military, natural, landuse, place, railway, man_made, aerialway, boundary, amenity, aeroway, club, craft, leisure, office, mountain_pass, shop, tourism, bridge, tunnel, waterway They roughly correspond to the classification of the OpenStreetMap data according to either the place tag or the main key of the object.","title":"Place Output Formats"},{"location":"api/Output/#place-output","text":"The /reverse , /search and /lookup API calls produce very similar output which is explained in this section. There is one section for each format. The format correspond to what was selected via the format parameter.","title":"Place Output"},{"location":"api/Output/#json","text":"The JSON format returns an array of places (for search and lookup) or a single place (for reverse) of the following format: { \"place_id\": \"100149\", \"licence\": \"Data \u00a9 OpenStreetMap contributors, ODbL 1.0. https://osm.org/copyright\", \"osm_type\": \"node\", \"osm_id\": \"107775\", \"boundingbox\": [\"51.3473219\", \"51.6673219\", \"-0.2876474\", \"0.0323526\"], \"lat\": \"51.5073219\", \"lon\": \"-0.1276474\", \"display_name\": \"London, Greater London, England, SW1A 2DU, United Kingdom\", \"class\": \"place\", \"type\": \"city\", \"importance\": 0.9654895765402, \"icon\": \"https://nominatim.openstreetmap.org/images/mapicons/poi_place_city.p.20.png\", \"address\": { \"city\": \"London\", \"state_district\": \"Greater London\", \"state\": \"England\", \"postcode\": \"SW1A 2DU\", \"country\": \"United Kingdom\", \"country_code\": \"gb\" }, \"extratags\": { \"capital\": \"yes\", \"website\": \"http://www.london.gov.uk\", \"wikidata\": \"Q84\", \"wikipedia\": \"en:London\", \"population\": \"8416535\" } } The possible fields are: place_id - reference to the Nominatim internal database ID ( see notes ) osm_type , osm_id - reference to the OSM object ( see notes ) boundingbox - area of corner coordinates ( see notes ) lat , lon - latitude and longitude of the centroid of the object display_name - full comma-separated address class , type - key and value of the main OSM tag importance - computed importance rank icon - link to class icon (if available) address - dictionary of address details (only with addressdetails=1 , see notes ) extratags - dictionary with additional useful tags like website or maxspeed (only with extratags=1 ) namedetails - dictionary with full list of available names including ref etc. geojson , svg , geotext , geokml - full geometry (only with the appropriate polygon_* parameter)","title":"JSON"},{"location":"api/Output/#jsonv2","text":"This is the same as the JSON format with two changes: class renamed to category additional field place_rank with the search rank of the object","title":"JSONv2"},{"location":"api/Output/#geojson","text":"This format follows the RFC7946 . Every feature includes a bounding box ( bbox ). The properties object has the following fields: place_id - reference to the Nominatim internal database ID ( see notes ) osm_type , osm_id - reference to the OSM object ( see notes ) category , type - key and value of the main OSM tag display_name - full comma-separated address place_rank - class search rank importance - computed importance rank icon - link to class icon (if available) address - dictionary of address details (only with addressdetails=1 , see notes ) extratags - dictionary with additional useful tags like website or maxspeed (only with extratags=1 ) namedetails - dictionary with full list of available names including ref etc. Use polygon_geojson to output the full geometry of the object instead of the centroid.","title":"GeoJSON"},{"location":"api/Output/#geocodejson","text":"The GeocodeJSON format follows the GeocodeJSON spec 0.1.0 . The following feature attributes are implemented: osm_type , osm_id - reference to the OSM object (unofficial extension, see notes ) type - value of the main tag of the object (e.g. residential, restaurant, ...) label - full comma-separated address name - localised name of the place housenumber , street , locality , district , postcode , city , county , state , country - provided when it can be determined from the address admin - list of localised names of administrative boundaries (only with addressdetails=1 ) Use polygon_geojson to output the full geometry of the object instead of the centroid.","title":"GeocodeJSON"},{"location":"api/Output/#xml","text":"The XML response returns one or more place objects in slightly different formats depending on the API call.","title":"XML"},{"location":"api/Output/#reverse","text":"<reversegeocode timestamp= \"Sat, 11 Aug 18 11:53:21 +0000\" attribution= \"Data \u00a9 OpenStreetMap contributors, ODbL 1.0. https://www.openstreetmap.org/copyright\" querystring= \"lat=48.400381&lon=11.745876&zoom=5&format=xml\" > <result place_id= \"179509537\" osm_type= \"relation\" osm_id= \"2145268\" ref= \"BY\" place_rank= \"15\" address_rank= \"15\" lat= \"48.9467562\" lon= \"11.4038717\" boundingbox= \"47.2701114,50.5647142,8.9763497,13.8396373\" > Bavaria, Germany </result> <addressparts> <state> Bavaria </state> <country> Germany </country> <country_code> de </country_code> </addressparts> <extratags> <tag key= \"place\" value= \"state\" /> <tag key= \"wikidata\" value= \"Q980\" /> <tag key= \"wikipedia\" value= \"de:Bayern\" /> <tag key= \"population\" value= \"12520000\" /> <tag key= \"name:prefix\" value= \"Freistaat\" /> </extratags> </reversegeocode> The attributes of the outer reversegeocode element return generic information about the query, including the time when the response was sent (in UTC), attribution to OSM and the original querystring. The place information can be found in the result element. The attributes of that element contain: place_id - reference to the Nominatim internal database ID ( see notes ) osm_type , osm_id - reference to the OSM object ( see notes ) ref - content of ref tag if it exists lat , lon - latitude and longitude of the centroid of the object boundingbox - comma-separated list of corner coordinates ( see notes ) The full address of the result can be found in the content of the result element as a comma-separated list. Additional information requested with addressdetails=1 , extratags=1 and namedetails=1 can be found in extra elements.","title":"Reverse"},{"location":"api/Output/#search-and-lookup","text":"<searchresults timestamp=\"Sat, 11 Aug 18 11:55:35 +0000\" attribution=\"Data \u00a9 OpenStreetMap contributors, ODbL 1.0. https://www.openstreetmap.org/copyright\" querystring=\"london\" polygon=\"false\" exclude_place_ids=\"100149\" more_url=\"https://nominatim.openstreetmap.org/search.php?q=london&addressdetails=1&extratags=1&exclude_place_ids=100149&format=xml&accept-language=en-US%2Cen%3Bq%3D0.7%2Cde%3Bq%3D0.3\"> <place place_id=\"100149\" osm_type=\"node\" osm_id=\"107775\" place_rank=\"15\" address_rank=\"15\" boundingbox=\"51.3473219,51.6673219,-0.2876474,0.0323526\" lat=\"51.5073219\" lon=\"-0.1276474\" display_name=\"London, Greater London, England, SW1A 2DU, United Kingdom\" class=\"place\" type=\"city\" importance=\"0.9654895765402\" icon=\"https://nominatim.openstreetmap.org/images/mapicons/poi_place_city.p.20.png\"> <extratags> <tag key=\"capital\" value=\"yes\"/> <tag key=\"website\" value=\"http://www.london.gov.uk\"/> <tag key=\"wikidata\" value=\"Q84\"/> <tag key=\"wikipedia\" value=\"en:London\"/> <tag key=\"population\" value=\"8416535\"/> </extratags> <city>London</city> <state_district>Greater London</state_district> <state>England</state> <postcode>SW1A 2DU</postcode> <country>United Kingdom</country> <country_code>gb</country_code> </place> </searchresults> The attributes of the outer searchresults or lookupresults element return generic information about the query: timestamp - UTC time when the response was sent attribution - OSM licensing information querystring - original query polygon - true when extra geometry information was requested exclude_place_ids - IDs of places that should be ignored in a follow-up request more_url - search call that will yield additional results for the query just sent The place information can be found in the place elements, of which there may be more than one. The attributes of that element contain: place_id - reference to the Nominatim internal database ID ( see notes ) osm_type , osm_id - reference to the OSM object ( see notes ) ref - content of ref tag if it exists lat , lon - latitude and longitude of the centroid of the object boundingbox - comma-separated list of corner coordinates ( see notes ) place_rank - class search rank address_rank - place address rank display_name - full comma-separated address class , type - key and value of the main OSM tag importance - computed importance rank icon - link to class icon (if available) When addressdetails=1 is requested, the localised address parts appear as subelements with the type of the address part. Additional information requested with extratags=1 and namedetails=1 can be found in extra elements as sub-element of extratags and namedetails respectively.","title":"Search and Lookup"},{"location":"api/Output/#notes-on-field-values","text":"","title":"Notes on field values"},{"location":"api/Output/#place_id-is-not-a-persistent-id","text":"The place_id is an internal identifier that is assigned data is imported into a Nominatim database. The same OSM object will have a different value on another server. It may even change its ID on the same server when it is removed and reimported while updating the database with fresh OSM data. It is thus not useful to treat it as permanent for later use. The combination osm_type + osm_id is slighly better but remember in OpenStreetMap mappers can delete, split, recreate places (and those get a new osm_id ), there is no link between those old and new ids. Places can also change their meaning without changing their osm_id , e.g. when a restaurant is retagged as supermarket. For a more in-depth discussion see Permanent ID . If you need an ID that is consistent over multiple installations of Nominatim, then you should use the combination of osm_type + osm_id + class .","title":"place_id is not a persistent id"},{"location":"api/Output/#osm-reference","text":"Nominatim may sometimes return special objects that do not correspond directly to an object in OpenStreetMap. These are: Postcodes . Nominatim returns an postcode point created from all mapped postcodes of the same name. The class and type of these object is place=postcdode . No osm_type and osm_id are included in the result. Housenumber interpolations . Nominatim returns a single interpolated housenumber from the interpolation way. The class and type are place=house and osm_type and osm_id correspond to the interpolation way in OSM. TIGER housenumber. Nominatim returns a single interpolated housenumber from the TIGER data. The class and type are place=house and osm_type and osm_id correspond to the street mentioned in the result. Please note that the osm_type and osm_id returned may be changed in the future. You should not expect to only find node , way and relation for the type.","title":"OSM reference"},{"location":"api/Output/#boundingbox","text":"Comma separated list of min latitude, max latitude, min longitude, max longitude. The whole planet would be -90,90,-180,180 . Can be used to pan and center the map on the result, for example with leafletjs mapping library map.fitBounds([[bbox[0],bbox[2]],[bbox[1],bbox[3]]], {padding: [20, 20], maxzoom: 16}); Bounds crossing the antimeridian have a min latitude -180 and max latitude 180, essentially covering the entire planet (see issue 184 ).","title":"boundingbox"},{"location":"api/Output/#addressdetails","text":"Address details in the xml and json formats return a list of names together with a designation label. Per default the following labels may appear: continent country, country_code region, state, state_district, county municipality, city, town, village city_district, district, borough, suburb, subdivision hamlet, croft, isolated_dwelling neighbourhood, allotments, quarter city_block, residental, farm, farmyard, industrial, commercial, retail road house_number, house_name emergency, historic, military, natural, landuse, place, railway, man_made, aerialway, boundary, amenity, aeroway, club, craft, leisure, office, mountain_pass, shop, tourism, bridge, tunnel, waterway They roughly correspond to the classification of the OpenStreetMap data according to either the place tag or the main key of the object.","title":"addressdetails"},{"location":"api/Overview/","text":"Nominatim API \uf0c1 Nominatim indexes named (or numbered) features within the OpenStreetMap (OSM) dataset and a subset of other unnamed features (pubs, hotels, churches, etc). Its API has the following endpoints for querying the data: /search - search OSM objects by name or type /reverse - search OSM object by their location /lookup - look up address details for OSM objects by their ID /status - query the status of the server /deletable - list objects that have been deleted in OSM but are held back in Nominatim in case the deletion was accidental /polygons - list of broken polygons detected by Nominatim /details - show internal details for an object (for debugging only)","title":"Overview"},{"location":"api/Overview/#nominatim-api","text":"Nominatim indexes named (or numbered) features within the OpenStreetMap (OSM) dataset and a subset of other unnamed features (pubs, hotels, churches, etc). Its API has the following endpoints for querying the data: /search - search OSM objects by name or type /reverse - search OSM object by their location /lookup - look up address details for OSM objects by their ID /status - query the status of the server /deletable - list objects that have been deleted in OSM but are held back in Nominatim in case the deletion was accidental /polygons - list of broken polygons detected by Nominatim /details - show internal details for an object (for debugging only)","title":"Nominatim API"},{"location":"api/Reverse/","text":"Reverse Geocoding \uf0c1 Reverse geocoding generates an address from a latitude and longitude. How it works \uf0c1 The reverse geocoding API does not exactly compute the address for the coordinate it receives. It works by finding the closest suitable OSM object and returning its address information. This may occasionally lead to unexpected results. First of all, Nominatim only includes OSM objects in its index that are suitable for searching. Small, unnamed paths for example are missing from the database and can therefore not be used for reverse geocoding either. The other issue to be aware of is that the closest OSM object may not always have a similar enough address to the coordinate you were requesting. For example, in dense city areas it may belong to a completely different street. Parameters \uf0c1 The main format of the reverse API is https://nominatim.openstreetmap.org/reverse?lat=<value>&lon=<value>&<params> where lat and lon are latitude and longitutde of a coordinate in WGS84 projection. The API returns exactly one result or an error when the coordinate is in an area with no OSM data coverage. Additional paramters are accepted as listed below. Deprecation warning The reverse API used to allow address lookup for a single OSM object by its OSM id. This use is now deprecated. Use the Address Lookup API instead. Output format \uf0c1 format=[xml|json|jsonv2|geojson|geocodejson] See Place Output Formats for details on each format. (Default: xml) json_callback=<string> Wrap JSON output in a callback function ( JSONP ) i.e. <string>(<json>) . Only has an effect for JSON output formats. Output details \uf0c1 addressdetails=[0|1] Include a breakdown of the address into elements. (Default: 1) extratags=[0|1] Include additional information in the result if available, e.g. wikipedia link, opening hours. (Default: 0) namedetails=[0|1] Include a list of alternative names in the results. These may include language variants, references, operator and brand. (Default: 0) Language of results \uf0c1 accept-language=<browser language string> Preferred language order for showing search results, overrides the value specified in the \"Accept-Language\" HTTP header. Either use a standard RFC2616 accept-language string or a simple comma-separated list of language codes. Result limitation \uf0c1 zoom=[0-18] Level of detail required for the address. Default: 18. This is a number that corresponds roughly to the zoom level used in XYZ tile sources in frameworks like Leaflet.js, Openlayers etc. In terms of address details the zoom levels are as follows: zoom address detail 3 country 5 state 8 county 10 city 14 suburb 16 major streets 17 major and minor streets 18 building Polygon output \uf0c1 polygon_geojson=1 polygon_kml=1 polygon_svg=1 polygon_text=1 Output geometry of results as a GeoJSON, KML, SVG or WKT. Only one of these options can be used at a time. (Default: 0) polygon_threshold=0.0 Return a simplified version of the output geometry. The parameter is the tolerance in degrees with which the geometry may differ from the original geometry. Topology is preserved in the result. (Default: 0.0) Other \uf0c1 email=<valid email address> If you are making large numbers of request please include an appropriate email address to identify your requests. See Nominatim's Usage Policy for more details. debug=[0|1] Output assorted developer debug information. Data on internals of Nominatim's \"Search Loop\" logic, and SQL queries. The output is (rough) HTML format. This overrides the specified machine readable format. (Default: 0) Examples \uf0c1 https://nominatim.openstreetmap.org/reverse?format=xml&lat=52.5487429714954&lon=-1.81602098644987&zoom=18&addressdetails=1 <reversegeocode timestamp= \"Fri, 06 Nov 09 16:33:54 +0000\" querystring= \"...\" > <result place_id= \"1620612\" osm_type= \"node\" osm_id= \"452010817\" > 135, Pilkington Avenue, Wylde Green, City of Birmingham, West Midlands (county), B72, United Kingdom </result> <addressparts> <house_number> 135 </house_number> <road> Pilkington Avenue </road> <village> Wylde Green </village> <town> Sutton Coldfield </town> <city> City of Birmingham </city> <county> West Midlands (county) </county> <postcode> B72 </postcode> <country> United Kingdom </country> <country_code> gb </country_code> </addressparts> </reversegeocode> Example with format=jsonv2 \uf0c1 https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=-34.44076&lon=-58.70521 { \"place_id\" : \"134140761\" , \"licence\" : \"Data \u00a9 OpenStreetMap contributors, ODbL 1.0. https:\\/\\/www.openstreetmap.org\\/copyright\" , \"osm_type\" : \"way\" , \"osm_id\" : \"280940520\" , \"lat\" : \"-34.4391708\" , \"lon\" : \"-58.7064573\" , \"place_rank\" : \"26\" , \"category\" : \"highway\" , \"type\" : \"motorway\" , \"importance\" : \"0.1\" , \"addresstype\" : \"road\" , \"display_name\" : \"Autopista Pedro Eugenio Aramburu, El Tri\u00e1ngulo, Partido de Malvinas Argentinas, Buenos Aires, 1.619, Argentina\" , \"name\" : \"Autopista Pedro Eugenio Aramburu\" , \"address\" :{ \"road\" : \"Autopista Pedro Eugenio Aramburu\" , \"village\" : \"El Tri\u00e1ngulo\" , \"state_district\" : \"Partido de Malvinas Argentinas\" , \"state\" : \"Buenos Aires\" , \"postcode\" : \"1.619\" , \"country\" : \"Argentina\" , \"country_code\" : \"ar\" }, \"boundingbox\" :[ \"-34.44159\" , \"-34.4370994\" , \"-58.7086067\" , \"-58.7044712\" ] } Example with format=geojson \uf0c1 https://nominatim.openstreetmap.org/reverse?format=geojson&lat=44.50155&lon=11.33989 { \"type\" : \"FeatureCollection\" , \"licence\" : \"Data \u00a9 OpenStreetMap contributors, ODbL 1.0. https://osm.org/copyright\" , \"features\" : [ { \"type\" : \"Feature\" , \"properties\" : { \"place_id\" : \"18512203\" , \"osm_type\" : \"node\" , \"osm_id\" : \"1704756187\" , \"place_rank\" : \"30\" , \"category\" : \"place\" , \"type\" : \"house\" , \"importance\" : \"0\" , \"addresstype\" : \"place\" , \"name\" : null , \"display_name\" : \"71, Via Guglielmo Marconi, Saragozza-Porto, Bologna, BO, Emilia-Romagna, 40122, Italy\" , \"address\" : { \"house_number\" : \"71\" , \"road\" : \"Via Guglielmo Marconi\" , \"suburb\" : \"Saragozza-Porto\" , \"city\" : \"Bologna\" , \"county\" : \"BO\" , \"state\" : \"Emilia-Romagna\" , \"postcode\" : \"40122\" , \"country\" : \"Italy\" , \"country_code\" : \"it\" } }, \"bbox\" : [ 11.3397676 , 44.5014307 , 11.3399676 , 44.5016307 ], \"geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [ 11.3398676 , 44.5015307 ] } } ] } Example with format=geocodejson \uf0c1 https://nominatim.openstreetmap.org/reverse?format=geocodejson&lat=60.2299&lon=11.1663 { \"type\" : \"FeatureCollection\" , \"geocoding\" : { \"version\" : \"0.1.0\" , \"attribution\" : \"Data \u00a9 OpenStreetMap contributors, ODbL 1.0. https://osm.org/copyright\" , \"licence\" : \"ODbL\" , \"query\" : \"60.229917843587,11.16630979382\" }, \"features\" : { \"type\" : \"Feature\" , \"properties\" : { \"geocoding\" : { \"place_id\" : \"42700574\" , \"osm_type\" : \"node\" , \"osm_id\" : \"3110596255\" , \"type\" : \"house\" , \"accuracy\" : 0 , \"label\" : \"1, L\u00f8venbergvegen, Mogreina, Ullensaker, Akershus, 2054, Norway\" , \"name\" : null , \"housenumber\" : \"1\" , \"street\" : \"L\u00f8venbergvegen\" , \"postcode\" : \"2054\" , \"county\" : \"Akershus\" , \"country\" : \"Norway\" , \"admin\" : { \"level7\" : \"Ullensaker\" , \"level4\" : \"Akershus\" , \"level2\" : \"Norway\" } } }, \"geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [ 11.1658572 , 60.2301296 ] } } }","title":"Reverse"},{"location":"api/Reverse/#reverse-geocoding","text":"Reverse geocoding generates an address from a latitude and longitude.","title":"Reverse Geocoding"},{"location":"api/Reverse/#how-it-works","text":"The reverse geocoding API does not exactly compute the address for the coordinate it receives. It works by finding the closest suitable OSM object and returning its address information. This may occasionally lead to unexpected results. First of all, Nominatim only includes OSM objects in its index that are suitable for searching. Small, unnamed paths for example are missing from the database and can therefore not be used for reverse geocoding either. The other issue to be aware of is that the closest OSM object may not always have a similar enough address to the coordinate you were requesting. For example, in dense city areas it may belong to a completely different street.","title":"How it works"},{"location":"api/Reverse/#parameters","text":"The main format of the reverse API is https://nominatim.openstreetmap.org/reverse?lat=<value>&lon=<value>&<params> where lat and lon are latitude and longitutde of a coordinate in WGS84 projection. The API returns exactly one result or an error when the coordinate is in an area with no OSM data coverage. Additional paramters are accepted as listed below. Deprecation warning The reverse API used to allow address lookup for a single OSM object by its OSM id. This use is now deprecated. Use the Address Lookup API instead.","title":"Parameters"},{"location":"api/Reverse/#output-format","text":"format=[xml|json|jsonv2|geojson|geocodejson] See Place Output Formats for details on each format. (Default: xml) json_callback=<string> Wrap JSON output in a callback function ( JSONP ) i.e. <string>(<json>) . Only has an effect for JSON output formats.","title":"Output format"},{"location":"api/Reverse/#output-details","text":"addressdetails=[0|1] Include a breakdown of the address into elements. (Default: 1) extratags=[0|1] Include additional information in the result if available, e.g. wikipedia link, opening hours. (Default: 0) namedetails=[0|1] Include a list of alternative names in the results. These may include language variants, references, operator and brand. (Default: 0)","title":"Output details"},{"location":"api/Reverse/#language-of-results","text":"accept-language=<browser language string> Preferred language order for showing search results, overrides the value specified in the \"Accept-Language\" HTTP header. Either use a standard RFC2616 accept-language string or a simple comma-separated list of language codes.","title":"Language of results"},{"location":"api/Reverse/#result-limitation","text":"zoom=[0-18] Level of detail required for the address. Default: 18. This is a number that corresponds roughly to the zoom level used in XYZ tile sources in frameworks like Leaflet.js, Openlayers etc. In terms of address details the zoom levels are as follows: zoom address detail 3 country 5 state 8 county 10 city 14 suburb 16 major streets 17 major and minor streets 18 building","title":"Result limitation"},{"location":"api/Reverse/#polygon-output","text":"polygon_geojson=1 polygon_kml=1 polygon_svg=1 polygon_text=1 Output geometry of results as a GeoJSON, KML, SVG or WKT. Only one of these options can be used at a time. (Default: 0) polygon_threshold=0.0 Return a simplified version of the output geometry. The parameter is the tolerance in degrees with which the geometry may differ from the original geometry. Topology is preserved in the result. (Default: 0.0)","title":"Polygon output"},{"location":"api/Reverse/#other","text":"email=<valid email address> If you are making large numbers of request please include an appropriate email address to identify your requests. See Nominatim's Usage Policy for more details. debug=[0|1] Output assorted developer debug information. Data on internals of Nominatim's \"Search Loop\" logic, and SQL queries. The output is (rough) HTML format. This overrides the specified machine readable format. (Default: 0)","title":"Other"},{"location":"api/Reverse/#examples","text":"https://nominatim.openstreetmap.org/reverse?format=xml&lat=52.5487429714954&lon=-1.81602098644987&zoom=18&addressdetails=1 <reversegeocode timestamp= \"Fri, 06 Nov 09 16:33:54 +0000\" querystring= \"...\" > <result place_id= \"1620612\" osm_type= \"node\" osm_id= \"452010817\" > 135, Pilkington Avenue, Wylde Green, City of Birmingham, West Midlands (county), B72, United Kingdom </result> <addressparts> <house_number> 135 </house_number> <road> Pilkington Avenue </road> <village> Wylde Green </village> <town> Sutton Coldfield </town> <city> City of Birmingham </city> <county> West Midlands (county) </county> <postcode> B72 </postcode> <country> United Kingdom </country> <country_code> gb </country_code> </addressparts> </reversegeocode>","title":"Examples"},{"location":"api/Reverse/#example-with-formatjsonv2","text":"https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=-34.44076&lon=-58.70521 { \"place_id\" : \"134140761\" , \"licence\" : \"Data \u00a9 OpenStreetMap contributors, ODbL 1.0. https:\\/\\/www.openstreetmap.org\\/copyright\" , \"osm_type\" : \"way\" , \"osm_id\" : \"280940520\" , \"lat\" : \"-34.4391708\" , \"lon\" : \"-58.7064573\" , \"place_rank\" : \"26\" , \"category\" : \"highway\" , \"type\" : \"motorway\" , \"importance\" : \"0.1\" , \"addresstype\" : \"road\" , \"display_name\" : \"Autopista Pedro Eugenio Aramburu, El Tri\u00e1ngulo, Partido de Malvinas Argentinas, Buenos Aires, 1.619, Argentina\" , \"name\" : \"Autopista Pedro Eugenio Aramburu\" , \"address\" :{ \"road\" : \"Autopista Pedro Eugenio Aramburu\" , \"village\" : \"El Tri\u00e1ngulo\" , \"state_district\" : \"Partido de Malvinas Argentinas\" , \"state\" : \"Buenos Aires\" , \"postcode\" : \"1.619\" , \"country\" : \"Argentina\" , \"country_code\" : \"ar\" }, \"boundingbox\" :[ \"-34.44159\" , \"-34.4370994\" , \"-58.7086067\" , \"-58.7044712\" ] }","title":"Example with format=jsonv2"},{"location":"api/Reverse/#example-with-formatgeojson","text":"https://nominatim.openstreetmap.org/reverse?format=geojson&lat=44.50155&lon=11.33989 { \"type\" : \"FeatureCollection\" , \"licence\" : \"Data \u00a9 OpenStreetMap contributors, ODbL 1.0. https://osm.org/copyright\" , \"features\" : [ { \"type\" : \"Feature\" , \"properties\" : { \"place_id\" : \"18512203\" , \"osm_type\" : \"node\" , \"osm_id\" : \"1704756187\" , \"place_rank\" : \"30\" , \"category\" : \"place\" , \"type\" : \"house\" , \"importance\" : \"0\" , \"addresstype\" : \"place\" , \"name\" : null , \"display_name\" : \"71, Via Guglielmo Marconi, Saragozza-Porto, Bologna, BO, Emilia-Romagna, 40122, Italy\" , \"address\" : { \"house_number\" : \"71\" , \"road\" : \"Via Guglielmo Marconi\" , \"suburb\" : \"Saragozza-Porto\" , \"city\" : \"Bologna\" , \"county\" : \"BO\" , \"state\" : \"Emilia-Romagna\" , \"postcode\" : \"40122\" , \"country\" : \"Italy\" , \"country_code\" : \"it\" } }, \"bbox\" : [ 11.3397676 , 44.5014307 , 11.3399676 , 44.5016307 ], \"geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [ 11.3398676 , 44.5015307 ] } } ] }","title":"Example with format=geojson"},{"location":"api/Reverse/#example-with-formatgeocodejson","text":"https://nominatim.openstreetmap.org/reverse?format=geocodejson&lat=60.2299&lon=11.1663 { \"type\" : \"FeatureCollection\" , \"geocoding\" : { \"version\" : \"0.1.0\" , \"attribution\" : \"Data \u00a9 OpenStreetMap contributors, ODbL 1.0. https://osm.org/copyright\" , \"licence\" : \"ODbL\" , \"query\" : \"60.229917843587,11.16630979382\" }, \"features\" : { \"type\" : \"Feature\" , \"properties\" : { \"geocoding\" : { \"place_id\" : \"42700574\" , \"osm_type\" : \"node\" , \"osm_id\" : \"3110596255\" , \"type\" : \"house\" , \"accuracy\" : 0 , \"label\" : \"1, L\u00f8venbergvegen, Mogreina, Ullensaker, Akershus, 2054, Norway\" , \"name\" : null , \"housenumber\" : \"1\" , \"street\" : \"L\u00f8venbergvegen\" , \"postcode\" : \"2054\" , \"county\" : \"Akershus\" , \"country\" : \"Norway\" , \"admin\" : { \"level7\" : \"Ullensaker\" , \"level4\" : \"Akershus\" , \"level2\" : \"Norway\" } } }, \"geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [ 11.1658572 , 60.2301296 ] } } }","title":"Example with format=geocodejson"},{"location":"api/Search/","text":"Search queries \uf0c1 The search API allows you to look up a location from a textual description or address. Nominatim supports structured and free-form search queries. The search query may also contain special phrases which are translated into specific OpenStreetMap (OSM) tags (e.g. Pub => amenity=pub ). This can be used to narrow down the kind of objects to be returned. Warning Special phrases are not suitable to query all objects of a certain type in an area. Nominatim will always just return a collection of the best matches. To download OSM data by object type, use the Overpass API . Parameters \uf0c1 The search API has the following format: https://nominatim.openstreetmap.org/search?<params> The search term may be specified with two different sets of parameters: q=<query> Free-form query string to search for. Free-form queries are processed first left-to-right and then right-to-left if that fails. So you may search for pilkington avenue, birmingham as well as for birmingham, pilkington avenue . Commas are optional, but improve performance by reducing the complexity of the search. street=<housenumber> <streetname> city=<city> county=<county> state=<state> country=<country> postalcode=<postalcode> Alternative query string format split into several parameters for structured requests. Structured requests are faster but are less robust against alternative OSM tagging schemas. Do not combine with q=<query> parameter . Both query forms accept the additional parameters listed below. Output format \uf0c1 format=[xml|json|jsonv2|geojson|geocodejson] See Place Output Formats for details on each format. (Default: jsonv2) json_callback=<string> Wrap JSON output in a callback function ( JSONP ) i.e. <string>(<json>) . Only has an effect for JSON output formats. Output details \uf0c1 addressdetails=[0|1] Include a breakdown of the address into elements. (Default: 0) extratags=[0|1] Include additional information in the result if available, e.g. wikipedia link, opening hours. (Default: 0) namedetails=[0|1] Include a list of alternative names in the results. These may include language variants, references, operator and brand. (Default: 0) Language of results \uf0c1 accept-language=<browser language string> Preferred language order for showing search results, overrides the value specified in the \"Accept-Language\" HTTP header . Either use a standard RFC2616 accept-language string or a simple comma-separated list of language codes. Result limitation \uf0c1 countrycodes=<countrycode>[,<countrycode>][,<countrycode>]... Limit search results to one or more countries. <countrycode> must be the ISO 3166-1alpha2 code, e.g. gb for the United Kingdom, de for Germany. Each place in Nominatim is assigned to one country code based on OSM country boundaries. In rare cases a place may not be in any country at all, for example, in international waters. exclude_place_ids=<place_id,[place_id],[place_id] If you do not want certain OSM objects to appear in the search result, give a comma separated list of the place_id s you want to skip. This can be used to retrieve additional search results. For example, if a previous query only returned a few results, then including those here would cause the search to return other, less accurate, matches (if possible). limit=<integer> Limit the number of returned results. (Default: 10, Maximum: 50) viewbox=<x1>,<y1>,<x2>,<y2> The preferred area to find search results. Any two corner points of the box are accepted as long as they span a real box. x is longitude, y is latitude. bounded=[0|1] When a viewbox is given, restrict the result to items contained within that viewbox (see above). When viewbox and bounded=1 are given, an amenity only search is allowed. Give the special keyword for the amenity in square brackets, e.g. [pub] and a selection of objects of this type is returned. There is no guarantee that the result is complete. (Default: 0) Polygon output \uf0c1 polygon_geojson=1 polygon_kml=1 polygon_svg=1 polygon_text=1 Output geometry of results as a GeoJSON, KML, SVG or WKT. Only one of these options can be used at a time. (Default: 0) polygon_threshold=0.0 Return a simplified version of the output geometry. The parameter is the tolerance in degrees with which the geometry may differ from the original geometry. Topology is preserved in the result. (Default: 0.0) Other \uf0c1 email=<valid email address> If you are making large numbers of request please include an appropriate email address to identify your requests. See Nominatim's Usage Policy for more details. dedupe=[0|1] Sometimes you have several objects in OSM identifying the same place or object in reality. The simplest case is a street being split into many different OSM ways due to different characteristics. Nominatim will attempt to detect such duplicates and only return one match unless this parameter is set to 0. (Default: 1) debug=[0|1] Output assorted developer debug information. Data on internals of Nominatim's \"Search Loop\" logic, and SQL queries. The output is (rough) HTML format. This overrides the specified machine readable format. (Default: 0) Examples \uf0c1 XML with kml polygon \uf0c1 https://nominatim.openstreetmap.org/search?q=135+pilkington+avenue,+birmingham&format=xml&polygon_geojson=1&addressdetails=1 <searchresults timestamp= \"Sat, 07 Nov 09 14:42:10 +0000\" querystring= \"135 pilkington, avenue birmingham\" polygon= \"true\" > <place place_id= \"1620612\" osm_type= \"node\" osm_id= \"452010817\" boundingbox= \"52.548641204834,52.5488433837891,-1.81612110137939,-1.81592094898224\" lat= \"52.5487429714954\" lon= \"-1.81602098644987\" display_name= \"135, Pilkington Avenue, Wylde Green, City of Birmingham, West Midlands (county), B72, United Kingdom\" class= \"place\" type= \"house\" > <geokml> <Polygon> <outerBoundaryIs> <LinearRing> <coordinates> -1.816513,52.548756599999997 -1.816434,52.548747300000002 -1.816429,52.5487629 -1.8163717,52.548756099999999 -1.8163464,52.548834599999999 -1.8164599,52.548848100000001 -1.8164685,52.5488213 -1.8164913,52.548824000000003 -1.816513,52.548756599999997 </coordinates> </LinearRing> </outerBoundaryIs> </Polygon> </geokml> <house_number> 135 </house_number> <road> Pilkington Avenue </road> <village> Wylde Green </village> <town> Sutton Coldfield </town> <city> City of Birmingham </city> <county> West Midlands (county) </county> <postcode> B72 </postcode> <country> United Kingdom </country> <country_code> gb </country_code> </place> </searchresults> JSON with SVG polygon \uf0c1 https://nominatim.openstreetmap.org/search/Unter%20den%20Linden%201%20Berlin?format=json&addressdetails=1&limit=1&polygon_svg=1 { \"address\" : { \"city\" : \"Berlin\" , \"city_district\" : \"Mitte\" , \"construction\" : \"Unter den Linden\" , \"continent\" : \"European Union\" , \"country\" : \"Deutschland\" , \"country_code\" : \"de\" , \"house_number\" : \"1\" , \"neighbourhood\" : \"Scheunenviertel\" , \"postcode\" : \"10117\" , \"public_building\" : \"Kommandantenhaus\" , \"state\" : \"Berlin\" , \"suburb\" : \"Mitte\" }, \"boundingbox\" : [ \"52.5170783996582\" , \"52.5173187255859\" , \"13.3975105285645\" , \"13.3981599807739\" ], \"class\" : \"amenity\" , \"display_name\" : \"Kommandantenhaus, 1, Unter den Linden, Scheunenviertel, Mitte, Berlin, 10117, Deutschland, European Union\" , \"importance\" : 0.73606775332943 , \"lat\" : \"52.51719785\" , \"licence\" : \"Data \\u00a9 OpenStreetMap contributors, ODbL 1.0. https://www.openstreetmap.org/copyright\" , \"lon\" : \"13.3978352028938\" , \"osm_id\" : \"15976890\" , \"osm_type\" : \"way\" , \"place_id\" : \"30848715\" , \"svg\" : \"M 13.397511 -52.517283599999999 L 13.397829400000001 -52.517299800000004 13.398131599999999 -52.517315099999998 13.398159400000001 -52.517112099999999 13.3975388 -52.517080700000001 Z\" , \"type\" : \"public_building\" } JSON with address details \uf0c1 https://nominatim.openstreetmap.org/?addressdetails=1&q=bakery+in+berlin+wedding&format=json&limit=1 { \"address\" : { \"bakery\" : \"B\\u00e4cker Kamps\" , \"city_district\" : \"Mitte\" , \"continent\" : \"European Union\" , \"country\" : \"Deutschland\" , \"country_code\" : \"de\" , \"footway\" : \"Bahnsteig U6\" , \"neighbourhood\" : \"Sprengelkiez\" , \"postcode\" : \"13353\" , \"state\" : \"Berlin\" , \"suburb\" : \"Wedding\" }, \"boundingbox\" : [ \"52.5460929870605\" , \"52.5460968017578\" , \"13.3591794967651\" , \"13.3591804504395\" ], \"class\" : \"shop\" , \"display_name\" : \"B\\u00e4cker Kamps, Bahnsteig U6, Sprengelkiez, Wedding, Mitte, Berlin, 13353, Deutschland, European Union\" , \"icon\" : \"https://nominatim.openstreetmap.org/images/mapicons/shopping_bakery.p.20.png\" , \"importance\" : 0.201 , \"lat\" : \"52.5460941\" , \"licence\" : \"Data \\u00a9 OpenStreetMap contributors, ODbL 1.0. https://www.openstreetmap.org/copyright\" , \"lon\" : \"13.35918\" , \"osm_id\" : \"317179427\" , \"osm_type\" : \"node\" , \"place_id\" : \"1453068\" , \"type\" : \"bakery\" } GeoJSON \uf0c1 https://nominatim.openstreetmap.org/search?q=17+Strada+Pictor+Alexandru+Romano%2C+Bukarest&format=geojson { \"type\" : \"FeatureCollection\" , \"licence\" : \"Data \u00a9 OpenStreetMap contributors, ODbL 1.0. https://osm.org/copyright\" , \"features\" : [ { \"type\" : \"Feature\" , \"properties\" : { \"place_id\" : \"35811445\" , \"osm_type\" : \"node\" , \"osm_id\" : \"2846295644\" , \"display_name\" : \"17, Strada Pictor Alexandru Romano, Bukarest, Bucharest, Sector 2, Bucharest, 023964, Romania\" , \"place_rank\" : \"30\" , \"category\" : \"place\" , \"type\" : \"house\" , \"importance\" : 0.62025 }, \"bbox\" : [ 26.1156689 , 44.4354754 , 26.1157689 , 44.4355754 ], \"geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [ 26.1157189 , 44.4355254 ] } } ] } GeocodeJSON \uf0c1 https://nominatim.openstreetmap.org/search?q=%CE%91%CE%B3%CE%AF%CE%B1+%CE%A4%CF%81%CE%B9%CE%AC%CE%B4%CE%B1%2C+%CE%91%CE%B4%CF%89%CE%BD%CE%B9%CE%B4%CE%BF%CF%82%2C+Athens%2C+Greece&format=geocodejson { \"type\" : \"FeatureCollection\" , \"geocoding\" : { \"version\" : \"0.1.0\" , \"attribution\" : \"Data \u00a9 OpenStreetMap contributors, ODbL 1.0. https://osm.org/copyright\" , \"licence\" : \"ODbL\" , \"query\" : \"\u0391\u03b3\u03af\u03b1 \u03a4\u03c1\u03b9\u03ac\u03b4\u03b1, \u0391\u03b4\u03c9\u03bd\u03b9\u03b4\u03bf\u03c2, Athens, Greece\" }, \"features\" : [ { \"type\" : \"Feature\" , \"properties\" : { \"geocoding\" : { \"type\" : \"place_of_worship\" , \"label\" : \"\u0391\u03b3\u03af\u03b1 \u03a4\u03c1\u03b9\u03ac\u03b4\u03b1, \u0391\u03b4\u03c9\u03bd\u03b9\u03b4\u03bf\u03c2, \u0386\u03b3\u03b9\u03bf\u03c2 \u039d\u03b9\u03ba\u03cc\u03bb\u03b1\u03bf\u03c2, 5\u00ba \u0394\u03b7\u03bc\u03bf\u03c4\u03b9\u03ba\u03cc \u0394\u03b9\u03b1\u03bc\u03ad\u03c1\u03b9\u03c3\u03bc\u03b1 \u0391\u03b8\u03b7\u03bd\u03ce\u03bd, Athens, Municipality of Athens, Regional Unit of Central Athens, Region of Attica, Attica, 11472, Greece\" , \"name\" : \"\u0391\u03b3\u03af\u03b1 \u03a4\u03c1\u03b9\u03ac\u03b4\u03b1\" , \"admin\" : null } }, \"geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [ 23.72949633941 , 38.0051697 ] } } ] }","title":"Search"},{"location":"api/Search/#search-queries","text":"The search API allows you to look up a location from a textual description or address. Nominatim supports structured and free-form search queries. The search query may also contain special phrases which are translated into specific OpenStreetMap (OSM) tags (e.g. Pub => amenity=pub ). This can be used to narrow down the kind of objects to be returned. Warning Special phrases are not suitable to query all objects of a certain type in an area. Nominatim will always just return a collection of the best matches. To download OSM data by object type, use the Overpass API .","title":"Search queries"},{"location":"api/Search/#parameters","text":"The search API has the following format: https://nominatim.openstreetmap.org/search?<params> The search term may be specified with two different sets of parameters: q=<query> Free-form query string to search for. Free-form queries are processed first left-to-right and then right-to-left if that fails. So you may search for pilkington avenue, birmingham as well as for birmingham, pilkington avenue . Commas are optional, but improve performance by reducing the complexity of the search. street=<housenumber> <streetname> city=<city> county=<county> state=<state> country=<country> postalcode=<postalcode> Alternative query string format split into several parameters for structured requests. Structured requests are faster but are less robust against alternative OSM tagging schemas. Do not combine with q=<query> parameter . Both query forms accept the additional parameters listed below.","title":"Parameters"},{"location":"api/Search/#output-format","text":"format=[xml|json|jsonv2|geojson|geocodejson] See Place Output Formats for details on each format. (Default: jsonv2) json_callback=<string> Wrap JSON output in a callback function ( JSONP ) i.e. <string>(<json>) . Only has an effect for JSON output formats.","title":"Output format"},{"location":"api/Search/#output-details","text":"addressdetails=[0|1] Include a breakdown of the address into elements. (Default: 0) extratags=[0|1] Include additional information in the result if available, e.g. wikipedia link, opening hours. (Default: 0) namedetails=[0|1] Include a list of alternative names in the results. These may include language variants, references, operator and brand. (Default: 0)","title":"Output details"},{"location":"api/Search/#language-of-results","text":"accept-language=<browser language string> Preferred language order for showing search results, overrides the value specified in the \"Accept-Language\" HTTP header . Either use a standard RFC2616 accept-language string or a simple comma-separated list of language codes.","title":"Language of results"},{"location":"api/Search/#result-limitation","text":"countrycodes=<countrycode>[,<countrycode>][,<countrycode>]... Limit search results to one or more countries. <countrycode> must be the ISO 3166-1alpha2 code, e.g. gb for the United Kingdom, de for Germany. Each place in Nominatim is assigned to one country code based on OSM country boundaries. In rare cases a place may not be in any country at all, for example, in international waters. exclude_place_ids=<place_id,[place_id],[place_id] If you do not want certain OSM objects to appear in the search result, give a comma separated list of the place_id s you want to skip. This can be used to retrieve additional search results. For example, if a previous query only returned a few results, then including those here would cause the search to return other, less accurate, matches (if possible). limit=<integer> Limit the number of returned results. (Default: 10, Maximum: 50) viewbox=<x1>,<y1>,<x2>,<y2> The preferred area to find search results. Any two corner points of the box are accepted as long as they span a real box. x is longitude, y is latitude. bounded=[0|1] When a viewbox is given, restrict the result to items contained within that viewbox (see above). When viewbox and bounded=1 are given, an amenity only search is allowed. Give the special keyword for the amenity in square brackets, e.g. [pub] and a selection of objects of this type is returned. There is no guarantee that the result is complete. (Default: 0)","title":"Result limitation"},{"location":"api/Search/#polygon-output","text":"polygon_geojson=1 polygon_kml=1 polygon_svg=1 polygon_text=1 Output geometry of results as a GeoJSON, KML, SVG or WKT. Only one of these options can be used at a time. (Default: 0) polygon_threshold=0.0 Return a simplified version of the output geometry. The parameter is the tolerance in degrees with which the geometry may differ from the original geometry. Topology is preserved in the result. (Default: 0.0)","title":"Polygon output"},{"location":"api/Search/#other","text":"email=<valid email address> If you are making large numbers of request please include an appropriate email address to identify your requests. See Nominatim's Usage Policy for more details. dedupe=[0|1] Sometimes you have several objects in OSM identifying the same place or object in reality. The simplest case is a street being split into many different OSM ways due to different characteristics. Nominatim will attempt to detect such duplicates and only return one match unless this parameter is set to 0. (Default: 1) debug=[0|1] Output assorted developer debug information. Data on internals of Nominatim's \"Search Loop\" logic, and SQL queries. The output is (rough) HTML format. This overrides the specified machine readable format. (Default: 0)","title":"Other"},{"location":"api/Search/#examples","text":"","title":"Examples"},{"location":"api/Search/#xml-with-kml-polygon","text":"https://nominatim.openstreetmap.org/search?q=135+pilkington+avenue,+birmingham&format=xml&polygon_geojson=1&addressdetails=1 <searchresults timestamp= \"Sat, 07 Nov 09 14:42:10 +0000\" querystring= \"135 pilkington, avenue birmingham\" polygon= \"true\" > <place place_id= \"1620612\" osm_type= \"node\" osm_id= \"452010817\" boundingbox= \"52.548641204834,52.5488433837891,-1.81612110137939,-1.81592094898224\" lat= \"52.5487429714954\" lon= \"-1.81602098644987\" display_name= \"135, Pilkington Avenue, Wylde Green, City of Birmingham, West Midlands (county), B72, United Kingdom\" class= \"place\" type= \"house\" > <geokml> <Polygon> <outerBoundaryIs> <LinearRing> <coordinates> -1.816513,52.548756599999997 -1.816434,52.548747300000002 -1.816429,52.5487629 -1.8163717,52.548756099999999 -1.8163464,52.548834599999999 -1.8164599,52.548848100000001 -1.8164685,52.5488213 -1.8164913,52.548824000000003 -1.816513,52.548756599999997 </coordinates> </LinearRing> </outerBoundaryIs> </Polygon> </geokml> <house_number> 135 </house_number> <road> Pilkington Avenue </road> <village> Wylde Green </village> <town> Sutton Coldfield </town> <city> City of Birmingham </city> <county> West Midlands (county) </county> <postcode> B72 </postcode> <country> United Kingdom </country> <country_code> gb </country_code> </place> </searchresults>","title":"XML with kml polygon"},{"location":"api/Search/#json-with-svg-polygon","text":"https://nominatim.openstreetmap.org/search/Unter%20den%20Linden%201%20Berlin?format=json&addressdetails=1&limit=1&polygon_svg=1 { \"address\" : { \"city\" : \"Berlin\" , \"city_district\" : \"Mitte\" , \"construction\" : \"Unter den Linden\" , \"continent\" : \"European Union\" , \"country\" : \"Deutschland\" , \"country_code\" : \"de\" , \"house_number\" : \"1\" , \"neighbourhood\" : \"Scheunenviertel\" , \"postcode\" : \"10117\" , \"public_building\" : \"Kommandantenhaus\" , \"state\" : \"Berlin\" , \"suburb\" : \"Mitte\" }, \"boundingbox\" : [ \"52.5170783996582\" , \"52.5173187255859\" , \"13.3975105285645\" , \"13.3981599807739\" ], \"class\" : \"amenity\" , \"display_name\" : \"Kommandantenhaus, 1, Unter den Linden, Scheunenviertel, Mitte, Berlin, 10117, Deutschland, European Union\" , \"importance\" : 0.73606775332943 , \"lat\" : \"52.51719785\" , \"licence\" : \"Data \\u00a9 OpenStreetMap contributors, ODbL 1.0. https://www.openstreetmap.org/copyright\" , \"lon\" : \"13.3978352028938\" , \"osm_id\" : \"15976890\" , \"osm_type\" : \"way\" , \"place_id\" : \"30848715\" , \"svg\" : \"M 13.397511 -52.517283599999999 L 13.397829400000001 -52.517299800000004 13.398131599999999 -52.517315099999998 13.398159400000001 -52.517112099999999 13.3975388 -52.517080700000001 Z\" , \"type\" : \"public_building\" }","title":"JSON with SVG polygon"},{"location":"api/Search/#json-with-address-details","text":"https://nominatim.openstreetmap.org/?addressdetails=1&q=bakery+in+berlin+wedding&format=json&limit=1 { \"address\" : { \"bakery\" : \"B\\u00e4cker Kamps\" , \"city_district\" : \"Mitte\" , \"continent\" : \"European Union\" , \"country\" : \"Deutschland\" , \"country_code\" : \"de\" , \"footway\" : \"Bahnsteig U6\" , \"neighbourhood\" : \"Sprengelkiez\" , \"postcode\" : \"13353\" , \"state\" : \"Berlin\" , \"suburb\" : \"Wedding\" }, \"boundingbox\" : [ \"52.5460929870605\" , \"52.5460968017578\" , \"13.3591794967651\" , \"13.3591804504395\" ], \"class\" : \"shop\" , \"display_name\" : \"B\\u00e4cker Kamps, Bahnsteig U6, Sprengelkiez, Wedding, Mitte, Berlin, 13353, Deutschland, European Union\" , \"icon\" : \"https://nominatim.openstreetmap.org/images/mapicons/shopping_bakery.p.20.png\" , \"importance\" : 0.201 , \"lat\" : \"52.5460941\" , \"licence\" : \"Data \\u00a9 OpenStreetMap contributors, ODbL 1.0. https://www.openstreetmap.org/copyright\" , \"lon\" : \"13.35918\" , \"osm_id\" : \"317179427\" , \"osm_type\" : \"node\" , \"place_id\" : \"1453068\" , \"type\" : \"bakery\" }","title":"JSON with address details"},{"location":"api/Search/#geojson","text":"https://nominatim.openstreetmap.org/search?q=17+Strada+Pictor+Alexandru+Romano%2C+Bukarest&format=geojson { \"type\" : \"FeatureCollection\" , \"licence\" : \"Data \u00a9 OpenStreetMap contributors, ODbL 1.0. https://osm.org/copyright\" , \"features\" : [ { \"type\" : \"Feature\" , \"properties\" : { \"place_id\" : \"35811445\" , \"osm_type\" : \"node\" , \"osm_id\" : \"2846295644\" , \"display_name\" : \"17, Strada Pictor Alexandru Romano, Bukarest, Bucharest, Sector 2, Bucharest, 023964, Romania\" , \"place_rank\" : \"30\" , \"category\" : \"place\" , \"type\" : \"house\" , \"importance\" : 0.62025 }, \"bbox\" : [ 26.1156689 , 44.4354754 , 26.1157689 , 44.4355754 ], \"geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [ 26.1157189 , 44.4355254 ] } } ] }","title":"GeoJSON"},{"location":"api/Search/#geocodejson","text":"https://nominatim.openstreetmap.org/search?q=%CE%91%CE%B3%CE%AF%CE%B1+%CE%A4%CF%81%CE%B9%CE%AC%CE%B4%CE%B1%2C+%CE%91%CE%B4%CF%89%CE%BD%CE%B9%CE%B4%CE%BF%CF%82%2C+Athens%2C+Greece&format=geocodejson { \"type\" : \"FeatureCollection\" , \"geocoding\" : { \"version\" : \"0.1.0\" , \"attribution\" : \"Data \u00a9 OpenStreetMap contributors, ODbL 1.0. https://osm.org/copyright\" , \"licence\" : \"ODbL\" , \"query\" : \"\u0391\u03b3\u03af\u03b1 \u03a4\u03c1\u03b9\u03ac\u03b4\u03b1, \u0391\u03b4\u03c9\u03bd\u03b9\u03b4\u03bf\u03c2, Athens, Greece\" }, \"features\" : [ { \"type\" : \"Feature\" , \"properties\" : { \"geocoding\" : { \"type\" : \"place_of_worship\" , \"label\" : \"\u0391\u03b3\u03af\u03b1 \u03a4\u03c1\u03b9\u03ac\u03b4\u03b1, \u0391\u03b4\u03c9\u03bd\u03b9\u03b4\u03bf\u03c2, \u0386\u03b3\u03b9\u03bf\u03c2 \u039d\u03b9\u03ba\u03cc\u03bb\u03b1\u03bf\u03c2, 5\u00ba \u0394\u03b7\u03bc\u03bf\u03c4\u03b9\u03ba\u03cc \u0394\u03b9\u03b1\u03bc\u03ad\u03c1\u03b9\u03c3\u03bc\u03b1 \u0391\u03b8\u03b7\u03bd\u03ce\u03bd, Athens, Municipality of Athens, Regional Unit of Central Athens, Region of Attica, Attica, 11472, Greece\" , \"name\" : \"\u0391\u03b3\u03af\u03b1 \u03a4\u03c1\u03b9\u03ac\u03b4\u03b1\" , \"admin\" : null } }, \"geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [ 23.72949633941 , 38.0051697 ] } } ] }","title":"GeocodeJSON"},{"location":"api/Status/","text":"Status \uf0c1 Useful for checking if the service and database is running. The JSON output also shows when the database was last updated. Parameters \uf0c1 format=[text|json] (defaults to 'text') Output \uf0c1 Text format \uf0c1 https://nominatim.openstreetmap.org/status.php will return HTTP status code 200 and print OK . On error it will return HTTP status code 500 and print a message, e.g. ERROR: Database connection failed . JSON format \uf0c1 https://nominatim.openstreetmap.org/status.php?format=json will return HTTP code 200 and a structure { \"status\" : 0 , \"message\" : \"OK\" , \"data_updated\" : \"2020-05-04T14:47:00+00:00\" , \"software_version\" : \"3.6.0-0\" , \"database_version\" : \"3.6.0-0\" } The software_version field contains the version of Nominatim used to serve the API. The database_version field contains the version of the data format in the database. On error will also return HTTP status code 200 and a structure with error code and message, e.g. { \"status\" : 700 , \"message\" : \"Database connection failed\" } Possible status codes are message notes 700 \"No database\" connection failed 701 \"Module failed\" database could not load nominatim.so 702 \"Module call failed\" nominatim.so loaded but calling a function failed 703 \"Query failed\" test query against a database table failed 704 \"No value\" test query worked but returned no results","title":"Status"},{"location":"api/Status/#status","text":"Useful for checking if the service and database is running. The JSON output also shows when the database was last updated.","title":"Status"},{"location":"api/Status/#parameters","text":"format=[text|json] (defaults to 'text')","title":"Parameters"},{"location":"api/Status/#output","text":"","title":"Output"},{"location":"api/Status/#text-format","text":"https://nominatim.openstreetmap.org/status.php will return HTTP status code 200 and print OK . On error it will return HTTP status code 500 and print a message, e.g. ERROR: Database connection failed .","title":"Text format"},{"location":"api/Status/#json-format","text":"https://nominatim.openstreetmap.org/status.php?format=json will return HTTP code 200 and a structure { \"status\" : 0 , \"message\" : \"OK\" , \"data_updated\" : \"2020-05-04T14:47:00+00:00\" , \"software_version\" : \"3.6.0-0\" , \"database_version\" : \"3.6.0-0\" } The software_version field contains the version of Nominatim used to serve the API. The database_version field contains the version of the data format in the database. On error will also return HTTP status code 200 and a structure with error code and message, e.g. { \"status\" : 700 , \"message\" : \"Database connection failed\" } Possible status codes are message notes 700 \"No database\" connection failed 701 \"Module failed\" database could not load nominatim.so 702 \"Module call failed\" nominatim.so loaded but calling a function failed 703 \"Query failed\" test query against a database table failed 704 \"No value\" test query worked but returned no results","title":"JSON format"},{"location":"appendix/Install-on-Centos-7/","text":"Note: these installation instructions are also available in executable form for use with vagrant under vagrant/Install-on-Centos-7.sh . Installing the Required Software \uf0c1 These instructions expect that you have a freshly installed CentOS version 7. Make sure all packages are up-to-date by running: sudo yum update -y The standard CentOS repositories don't contain all the required packages, you need to enable the EPEL repository as well. To enable it on CentOS, install the epel-release RPM by running: sudo yum install -y epel-release More repositories for postgresql 11 (CentOS default 'postgresql' is 9.2), postgis and llvm-toolset (https://github.com/theory/pg-semver/issues/35) sudo yum install -y https://download.postgresql.org/pub/repos/yum/11/redhat/rhel-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm sudo yum install -y centos-release-scl-rh More repositories for PHP 7 (default is PHP 5.4) sudo yum install -y http://rpms.remirepo.net/enterprise/remi-release-7.rpm sudo yum-config-manager --enable remi-php72 sudo yum update -y Now you can install all packages needed for Nominatim: sudo yum install -y postgresql11-server postgresql11-contrib postgresql11-devel \\ postgis25_11 postgis25_11-utils \\ wget git cmake make gcc gcc-c++ libtool policycoreutils-python \\ devtoolset-7 llvm-toolset-7 \\ php-pgsql php php-intl libpqxx-devel \\ proj-epsg bzip2-devel proj-devel boost-devel \\ python3-pip python3-setuptools python3-devel \\ expat-devel zlib-devel libicu-dev pip3 install --user psycopg2 python-dotenv psutil Jinja2 PyICU System Configuration \uf0c1 The following steps are meant to configure a fresh CentOS installation for use with Nominatim. You may skip some of the steps if you have your OS already configured. Creating Dedicated User Accounts \uf0c1 Nominatim will run as a global service on your machine. It is therefore best to install it under its own separate user account. In the following we assume this user is called nominatim and the installation will be in /srv/nominatim. To create the user and directory run: sudo useradd -d /srv/nominatim -s /bin/bash -m nominatim You may find a more suitable location if you wish. To be able to copy and paste instructions from this manual, export user name and home directory now like this: export USERNAME=nominatim export USERHOME=/srv/nominatim Never, ever run the installation as a root user. You have been warned. Make sure that system servers can read from the home directory: chmod a+x $USERHOME Setting up PostgreSQL \uf0c1 CentOS does not automatically create a database cluster. Therefore, start with initializing the database, then enable the server to start at boot: sudo /usr/pgsql-11/bin/postgresql-11-setup initdb sudo systemctl enable postgresql-11 Next tune the postgresql configuration, which is located in /var/lib/pgsql/data/postgresql.conf . See section Postgres Tuning in the installation page for the parameters to change. Now start the postgresql service after updating this config file. sudo systemctl restart postgresql-11 Finally, we need to add two postgres users: one for the user that does the import and another for the webserver which should access the database only for reading: sudo -u postgres createuser -s $USERNAME sudo -u postgres createuser apache Installing Nominatim \uf0c1 Building and Configuration \uf0c1 Get the source for the release and unpack it wget https://nominatim.org/release/Nominatim-3.7.2.tar.bz2 tar xf Nominatim-3.7.2.tar.bz2 The code must be built in a separate directory. Create this directory, then configure and build Nominatim in there: mkdir $USERHOME /build cd $USERHOME /build cmake $USERHOME /Nominatim-3.7.2 make sudo make install Setting up the Apache Webserver \uf0c1 The webserver should serve the php scripts from the website directory of your project directory . Therefore set up a project directory and populate the website directory: mkdir $USERHOME/nominatim-project cd $USERHOME/nominatim-project nominatim refresh --website You need to create an alias to the website directory in your apache configuration. Add a separate nominatim configuration to your webserver: sudo tee /etc/httpd/conf.d/nominatim.conf << EOFAPACHECONF <Directory \"$USERHOME/nominatim-project/website\"> Options FollowSymLinks MultiViews AddType text/html .php DirectoryIndex search.php Require all granted </Directory> Alias /nominatim $USERHOME/nominatim-project/website EOFAPACHECONF Then reload apache sudo systemctl enable httpd sudo systemctl restart httpd Adding SELinux Security Settings \uf0c1 It is a good idea to leave SELinux enabled and enforcing, particularly with a web server accessible from the Internet. At a minimum the following SELinux labeling should be done for Nominatim: sudo semanage fcontext -a -t httpd_sys_content_t \"/usr/local/nominatim/lib/lib-php(/.*)?\" sudo semanage fcontext -a -t httpd_sys_content_t \"$USERHOME/nominatim-project/website(/.*)?\" sudo semanage fcontext -a -t lib_t \"$USERHOME/nominatim-project/module/nominatim.so\" sudo restorecon -R -v /usr/local/lib/nominatim sudo restorecon -R -v $USERHOME/nominatim-project You need to create a minimal configuration file that tells nominatim the name of your webserver user: echo NOMINATIM_DATABASE_WEBUSER = \"apache\" | tee .env Nominatim is now ready to use. Continue with importing a database from OSM data .","title":"Installation on CentOS 7"},{"location":"appendix/Install-on-Centos-7/#installing-the-required-software","text":"These instructions expect that you have a freshly installed CentOS version 7. Make sure all packages are up-to-date by running: sudo yum update -y The standard CentOS repositories don't contain all the required packages, you need to enable the EPEL repository as well. To enable it on CentOS, install the epel-release RPM by running: sudo yum install -y epel-release More repositories for postgresql 11 (CentOS default 'postgresql' is 9.2), postgis and llvm-toolset (https://github.com/theory/pg-semver/issues/35) sudo yum install -y https://download.postgresql.org/pub/repos/yum/11/redhat/rhel-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm sudo yum install -y centos-release-scl-rh More repositories for PHP 7 (default is PHP 5.4) sudo yum install -y http://rpms.remirepo.net/enterprise/remi-release-7.rpm sudo yum-config-manager --enable remi-php72 sudo yum update -y Now you can install all packages needed for Nominatim: sudo yum install -y postgresql11-server postgresql11-contrib postgresql11-devel \\ postgis25_11 postgis25_11-utils \\ wget git cmake make gcc gcc-c++ libtool policycoreutils-python \\ devtoolset-7 llvm-toolset-7 \\ php-pgsql php php-intl libpqxx-devel \\ proj-epsg bzip2-devel proj-devel boost-devel \\ python3-pip python3-setuptools python3-devel \\ expat-devel zlib-devel libicu-dev pip3 install --user psycopg2 python-dotenv psutil Jinja2 PyICU","title":"Installing the Required Software"},{"location":"appendix/Install-on-Centos-7/#system-configuration","text":"The following steps are meant to configure a fresh CentOS installation for use with Nominatim. You may skip some of the steps if you have your OS already configured.","title":"System Configuration"},{"location":"appendix/Install-on-Centos-7/#creating-dedicated-user-accounts","text":"Nominatim will run as a global service on your machine. It is therefore best to install it under its own separate user account. In the following we assume this user is called nominatim and the installation will be in /srv/nominatim. To create the user and directory run: sudo useradd -d /srv/nominatim -s /bin/bash -m nominatim You may find a more suitable location if you wish. To be able to copy and paste instructions from this manual, export user name and home directory now like this: export USERNAME=nominatim export USERHOME=/srv/nominatim Never, ever run the installation as a root user. You have been warned. Make sure that system servers can read from the home directory: chmod a+x $USERHOME","title":"Creating Dedicated User Accounts"},{"location":"appendix/Install-on-Centos-7/#setting-up-postgresql","text":"CentOS does not automatically create a database cluster. Therefore, start with initializing the database, then enable the server to start at boot: sudo /usr/pgsql-11/bin/postgresql-11-setup initdb sudo systemctl enable postgresql-11 Next tune the postgresql configuration, which is located in /var/lib/pgsql/data/postgresql.conf . See section Postgres Tuning in the installation page for the parameters to change. Now start the postgresql service after updating this config file. sudo systemctl restart postgresql-11 Finally, we need to add two postgres users: one for the user that does the import and another for the webserver which should access the database only for reading: sudo -u postgres createuser -s $USERNAME sudo -u postgres createuser apache","title":"Setting up PostgreSQL"},{"location":"appendix/Install-on-Centos-7/#installing-nominatim","text":"","title":"Installing Nominatim"},{"location":"appendix/Install-on-Centos-7/#building-and-configuration","text":"Get the source for the release and unpack it wget https://nominatim.org/release/Nominatim-3.7.2.tar.bz2 tar xf Nominatim-3.7.2.tar.bz2 The code must be built in a separate directory. Create this directory, then configure and build Nominatim in there: mkdir $USERHOME /build cd $USERHOME /build cmake $USERHOME /Nominatim-3.7.2 make sudo make install","title":"Building and Configuration"},{"location":"appendix/Install-on-Centos-7/#setting-up-the-apache-webserver","text":"The webserver should serve the php scripts from the website directory of your project directory . Therefore set up a project directory and populate the website directory: mkdir $USERHOME/nominatim-project cd $USERHOME/nominatim-project nominatim refresh --website You need to create an alias to the website directory in your apache configuration. Add a separate nominatim configuration to your webserver: sudo tee /etc/httpd/conf.d/nominatim.conf << EOFAPACHECONF <Directory \"$USERHOME/nominatim-project/website\"> Options FollowSymLinks MultiViews AddType text/html .php DirectoryIndex search.php Require all granted </Directory> Alias /nominatim $USERHOME/nominatim-project/website EOFAPACHECONF Then reload apache sudo systemctl enable httpd sudo systemctl restart httpd","title":"Setting up the Apache Webserver"},{"location":"appendix/Install-on-Centos-7/#adding-selinux-security-settings","text":"It is a good idea to leave SELinux enabled and enforcing, particularly with a web server accessible from the Internet. At a minimum the following SELinux labeling should be done for Nominatim: sudo semanage fcontext -a -t httpd_sys_content_t \"/usr/local/nominatim/lib/lib-php(/.*)?\" sudo semanage fcontext -a -t httpd_sys_content_t \"$USERHOME/nominatim-project/website(/.*)?\" sudo semanage fcontext -a -t lib_t \"$USERHOME/nominatim-project/module/nominatim.so\" sudo restorecon -R -v /usr/local/lib/nominatim sudo restorecon -R -v $USERHOME/nominatim-project You need to create a minimal configuration file that tells nominatim the name of your webserver user: echo NOMINATIM_DATABASE_WEBUSER = \"apache\" | tee .env Nominatim is now ready to use. Continue with importing a database from OSM data .","title":"Adding SELinux Security Settings"},{"location":"appendix/Install-on-Centos-8/","text":"Note: these installation instructions are also available in executable form for use with vagrant under vagrant/Install-on-Centos-8.sh . Installing the Required Software \uf0c1 These instructions expect that you have a freshly installed CentOS version 8. Make sure all packages are up-to-date by running: sudo dnf update -y The standard CentOS repositories don't contain all the required packages, you need to enable the EPEL repository as well. For example for SELinux related redhat-hardened-cc1 package. To enable it on CentOS run: sudo dnf install -y epel-release redhat-rpm-config EPEL contains Postgres 9.6 and 10, but not PostGIS. Postgres 9.4+/10/11/12 and PostGIS 2.4/2.5/3.0 are availble from postgresql.org sudo dnf -qy module disable postgresql sudo dnf install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm export PATH=/usr/pgsql-12/bin/:$PATH Now you can install all packages needed for Nominatim: sudo dnf --enablerepo = powertools install -y postgresql12-server \\ postgresql12-contrib postgresql12-devel postgis30_12 \\ wget git cmake make gcc gcc-c++ libtool policycoreutils-python-utils \\ llvm-toolset ccache clang-tools-extra \\ php-pgsql php php-intl php-json libpq-devel \\ bzip2-devel proj-devel boost-devel \\ python3-pip python3-setuptools python3-devel \\ expat-devel zlib-devel libicu-devel pip3 install --user psycopg2-binary python-dotenv psutil Jinja2 PyICU System Configuration \uf0c1 The following steps are meant to configure a fresh CentOS installation for use with Nominatim. You may skip some of the steps if you have your OS already configured. Creating Dedicated User Accounts \uf0c1 Nominatim will run as a global service on your machine. It is therefore best to install it under its own separate user account. In the following we assume this user is called nominatim and the installation will be in /srv/nominatim. To create the user and directory run: sudo useradd -d /srv/nominatim -s /bin/bash -m nominatim You may find a more suitable location if you wish. To be able to copy and paste instructions from this manual, export user name and home directory now like this: export USERNAME=nominatim export USERHOME=/srv/nominatim Never, ever run the installation as a root user. You have been warned. Make sure that system servers can read from the home directory: chmod a+x $USERHOME Setting up PostgreSQL \uf0c1 CentOS does not automatically create a database cluster. Therefore, start with initializing the database, then enable the server to start at boot: sudo /usr/pgsql-12/bin/postgresql-12-setup initdb sudo systemctl enable postgresql-12 Next tune the postgresql configuration, which is located in /var/lib/pgsql/data/postgresql.conf . See section Postgres Tuning in the installation page for the parameters to change. Now start the postgresql service after updating this config file. sudo systemctl restart postgresql-12 Finally, we need to add two postgres users: one for the user that does the import and another for the webserver which should access the database only for reading: sudo -u postgres createuser -s $USERNAME sudo -u postgres createuser apache Installing Nominatim \uf0c1 Building and Configuration \uf0c1 Get the source code for the release and unpack it cd $USERHOME wget https://nominatim.org/release/Nominatim-3.7.2.tar.bz2 tar xf Nominatim-3.7.2.tar.bz2 The code must be built in a separate directory. Create this directory, then configure and build Nominatim in there: mkdir $USERHOME /build cd $USERHOME /build cmake $USERHOME /Nominatim-3.7.2 cmake /home/vagrant/Nominatim make sudo make install Setting up the Apache Webserver \uf0c1 The webserver should serve the php scripts from the website directory of your project directory . Therefore set up a project directory and populate the website directory: mkdir $USERHOME/nominatim-project cd $USERHOME/nominatim-project nominatim refresh --website You need to create an alias to the website directory in your apache configuration. Add a separate nominatim configuration to your webserver: sudo tee /etc/httpd/conf.d/nominatim.conf << EOFAPACHECONF <Directory \"$USERHOME/nominatim-project/website\"> Options FollowSymLinks MultiViews AddType text/html .php DirectoryIndex search.php Require all granted </Directory> Alias /nominatim $USERHOME/nominatim-project/website EOFAPACHECONF Then reload apache sudo systemctl enable httpd sudo systemctl restart httpd Adding SELinux Security Settings \uf0c1 It is a good idea to leave SELinux enabled and enforcing, particularly with a web server accessible from the Internet. At a minimum the following SELinux labeling should be done for Nominatim: sudo semanage fcontext -a -t httpd_sys_content_t \"/usr/local/lib/nominatim/lib-php(/.*)?\" sudo semanage fcontext -a -t httpd_sys_content_t \"$USERHOME/nominatim-project/website(/.*)?\" sudo semanage fcontext -a -t lib_t \"$USERHOME/nominatim-project/module/nominatim.so\" sudo restorecon -R -v /usr/local/lib64/nominatim sudo restorecon -R -v $USERHOME/nominatim-project You need to create a minimal configuration file that tells nominatim the name of your webserver user: echo NOMINATIM_DATABASE_WEBUSER = \"apache\" | tee .env Nominatim is now ready to use. Continue with importing a database from OSM data .","title":"Installation on CentOS 8"},{"location":"appendix/Install-on-Centos-8/#installing-the-required-software","text":"These instructions expect that you have a freshly installed CentOS version 8. Make sure all packages are up-to-date by running: sudo dnf update -y The standard CentOS repositories don't contain all the required packages, you need to enable the EPEL repository as well. For example for SELinux related redhat-hardened-cc1 package. To enable it on CentOS run: sudo dnf install -y epel-release redhat-rpm-config EPEL contains Postgres 9.6 and 10, but not PostGIS. Postgres 9.4+/10/11/12 and PostGIS 2.4/2.5/3.0 are availble from postgresql.org sudo dnf -qy module disable postgresql sudo dnf install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm export PATH=/usr/pgsql-12/bin/:$PATH Now you can install all packages needed for Nominatim: sudo dnf --enablerepo = powertools install -y postgresql12-server \\ postgresql12-contrib postgresql12-devel postgis30_12 \\ wget git cmake make gcc gcc-c++ libtool policycoreutils-python-utils \\ llvm-toolset ccache clang-tools-extra \\ php-pgsql php php-intl php-json libpq-devel \\ bzip2-devel proj-devel boost-devel \\ python3-pip python3-setuptools python3-devel \\ expat-devel zlib-devel libicu-devel pip3 install --user psycopg2-binary python-dotenv psutil Jinja2 PyICU","title":"Installing the Required Software"},{"location":"appendix/Install-on-Centos-8/#system-configuration","text":"The following steps are meant to configure a fresh CentOS installation for use with Nominatim. You may skip some of the steps if you have your OS already configured.","title":"System Configuration"},{"location":"appendix/Install-on-Centos-8/#creating-dedicated-user-accounts","text":"Nominatim will run as a global service on your machine. It is therefore best to install it under its own separate user account. In the following we assume this user is called nominatim and the installation will be in /srv/nominatim. To create the user and directory run: sudo useradd -d /srv/nominatim -s /bin/bash -m nominatim You may find a more suitable location if you wish. To be able to copy and paste instructions from this manual, export user name and home directory now like this: export USERNAME=nominatim export USERHOME=/srv/nominatim Never, ever run the installation as a root user. You have been warned. Make sure that system servers can read from the home directory: chmod a+x $USERHOME","title":"Creating Dedicated User Accounts"},{"location":"appendix/Install-on-Centos-8/#setting-up-postgresql","text":"CentOS does not automatically create a database cluster. Therefore, start with initializing the database, then enable the server to start at boot: sudo /usr/pgsql-12/bin/postgresql-12-setup initdb sudo systemctl enable postgresql-12 Next tune the postgresql configuration, which is located in /var/lib/pgsql/data/postgresql.conf . See section Postgres Tuning in the installation page for the parameters to change. Now start the postgresql service after updating this config file. sudo systemctl restart postgresql-12 Finally, we need to add two postgres users: one for the user that does the import and another for the webserver which should access the database only for reading: sudo -u postgres createuser -s $USERNAME sudo -u postgres createuser apache","title":"Setting up PostgreSQL"},{"location":"appendix/Install-on-Centos-8/#installing-nominatim","text":"","title":"Installing Nominatim"},{"location":"appendix/Install-on-Centos-8/#building-and-configuration","text":"Get the source code for the release and unpack it cd $USERHOME wget https://nominatim.org/release/Nominatim-3.7.2.tar.bz2 tar xf Nominatim-3.7.2.tar.bz2 The code must be built in a separate directory. Create this directory, then configure and build Nominatim in there: mkdir $USERHOME /build cd $USERHOME /build cmake $USERHOME /Nominatim-3.7.2 cmake /home/vagrant/Nominatim make sudo make install","title":"Building and Configuration"},{"location":"appendix/Install-on-Centos-8/#setting-up-the-apache-webserver","text":"The webserver should serve the php scripts from the website directory of your project directory . Therefore set up a project directory and populate the website directory: mkdir $USERHOME/nominatim-project cd $USERHOME/nominatim-project nominatim refresh --website You need to create an alias to the website directory in your apache configuration. Add a separate nominatim configuration to your webserver: sudo tee /etc/httpd/conf.d/nominatim.conf << EOFAPACHECONF <Directory \"$USERHOME/nominatim-project/website\"> Options FollowSymLinks MultiViews AddType text/html .php DirectoryIndex search.php Require all granted </Directory> Alias /nominatim $USERHOME/nominatim-project/website EOFAPACHECONF Then reload apache sudo systemctl enable httpd sudo systemctl restart httpd","title":"Setting up the Apache Webserver"},{"location":"appendix/Install-on-Centos-8/#adding-selinux-security-settings","text":"It is a good idea to leave SELinux enabled and enforcing, particularly with a web server accessible from the Internet. At a minimum the following SELinux labeling should be done for Nominatim: sudo semanage fcontext -a -t httpd_sys_content_t \"/usr/local/lib/nominatim/lib-php(/.*)?\" sudo semanage fcontext -a -t httpd_sys_content_t \"$USERHOME/nominatim-project/website(/.*)?\" sudo semanage fcontext -a -t lib_t \"$USERHOME/nominatim-project/module/nominatim.so\" sudo restorecon -R -v /usr/local/lib64/nominatim sudo restorecon -R -v $USERHOME/nominatim-project You need to create a minimal configuration file that tells nominatim the name of your webserver user: echo NOMINATIM_DATABASE_WEBUSER = \"apache\" | tee .env Nominatim is now ready to use. Continue with importing a database from OSM data .","title":"Adding SELinux Security Settings"},{"location":"appendix/Install-on-Ubuntu-18/","text":"Note: these installation instructions are also available in executable form for use with vagrant under vagrant/Install-on-Ubuntu-18.sh. Installing the Required Software \uf0c1 These instructions expect that you have a freshly installed Ubuntu 18.04. Make sure all packages are are up-to-date by running: sudo apt update -qq Now you can install all packages needed for Nominatim: sudo apt install -y php-cgi sudo apt install -y build-essential cmake g++ libboost-dev libboost-system-dev \\ libboost-filesystem-dev libexpat1-dev zlib1g-dev\\ libbz2-dev libpq-dev libproj-dev \\ postgresql-server-dev-10 postgresql-10-postgis-2.4 \\ postgresql-contrib-10 postgresql-10-postgis-scripts \\ php php-pgsql php-intl libicu-dev python3-pip \\ python3-psycopg2 python3-psutil python3-jinja2 python3-icu The python-dotenv package that comes with Ubuntu 18.04 is too old, so install the latest version from pip: pip3 install python-dotenv System Configuration \uf0c1 The following steps are meant to configure a fresh Ubuntu installation for use with Nominatim. You may skip some of the steps if you have your OS already configured. Creating Dedicated User Accounts \uf0c1 Nominatim will run as a global service on your machine. It is therefore best to install it under its own separate user account. In the following we assume this user is called nominatim and the installation will be in /srv/nominatim. To create the user and directory run: sudo useradd -d /srv/nominatim -s /bin/bash -m nominatim You may find a more suitable location if you wish. To be able to copy and paste instructions from this manual, export user name and home directory now like this: export USERNAME=nominatim export USERHOME=/srv/nominatim Never, ever run the installation as a root user. You have been warned. Make sure that system servers can read from the home directory: chmod a+x $USERHOME Setting up PostgreSQL \uf0c1 Tune the postgresql configuration, which is located in /etc/postgresql/10/main/postgresql.conf . See section Postgres Tuning in the installation page for the parameters to change. Restart the postgresql service after updating this config file. sudo systemctl restart postgresql Finally, we need to add two postgres users: one for the user that does the import and another for the webserver which should access the database for reading only: sudo -u postgres createuser -s $USERNAME sudo -u postgres createuser www-data Installing Nominatim \uf0c1 Building and Configuration \uf0c1 Get the source code for the release and unpack it cd $USERHOME wget https://nominatim.org/release/Nominatim-3.7.2.tar.bz2 tar xf Nominatim-3.7.2.tar.bz2 The code must be built in a separate directory. Create this directory, then configure and build Nominatim in there: mkdir $USERHOME/build cd $USERHOME/build cmake $USERHOME/Nominatim-3.7.2 make sudo make install Nominatim is now ready to use. You can continue with importing a database from OSM data . If you want to set up a webserver first, continue reading. Setting up a webserver \uf0c1 The webserver should serve the php scripts from the website directory of your project directory . Therefore set up a project directory and populate the website directory: mkdir $USERHOME/nominatim-project cd $USERHOME/nominatim-project nominatim refresh --website Option 1: Using Apache \uf0c1 Apache has a PHP module that can be used to serve Nominatim. To install them run: sudo apt install -y apache2 libapache2-mod-php You need to create an alias to the website directory in your apache configuration. Add a separate nominatim configuration to your webserver: sudo tee /etc/apache2/conf-available/nominatim.conf << EOFAPACHECONF <Directory \"$USERHOME/nominatim-project/website\"> Options FollowSymLinks MultiViews AddType text/html .php DirectoryIndex search.php Require all granted </Directory> Alias /nominatim $USERHOME/nominatim-project/website EOFAPACHECONF Then enable the configuration and restart apache sudo a2enconf nominatim sudo systemctl restart apache2 The Nominatim API is now available at http://localhost/nominatim/ . Option 2: Using nginx \uf0c1 Nginx has no native support for php scripts. You need to set up php-fpm for this purpose. First install nginx and php-fpm: sudo apt install -y nginx php-fpm You need to configure php-fpm to listen on a Unix socket. sudo tee /etc/php/7.2/fpm/pool.d/www.conf << EOF_PHP_FPM_CONF [www] ; Replace the tcp listener and add the unix socket listen = /var/run/php7.2-fpm.sock ; Ensure that the daemon runs as the correct user listen.owner = www-data listen.group = www-data listen.mode = 0666 ; Unix user of FPM processes user = www-data group = www-data ; Choose process manager type (static, dynamic, ondemand) pm = ondemand pm.max_children = 5 EOF_PHP_FPM_CONF Then create a Nginx configuration to forward http requests to that socket. sudo tee /etc/nginx/sites-available/default << EOF_NGINX_CONF server { listen 80 default_server; listen [::]:80 default_server; root $USERHOME/nominatim-project/website; index search.php index.html; location / { try_files \\$uri \\$uri/ @php; } location @php { fastcgi_param SCRIPT_FILENAME \"\\$document_root\\$uri.php\"; fastcgi_param PATH_TRANSLATED \"\\$document_root\\$uri.php\"; fastcgi_param QUERY_STRING \\$args; fastcgi_pass unix:/var/run/php7.2-fpm.sock; fastcgi_index index.php; include fastcgi_params; } location ~ [^/]\\.php(/|$) { fastcgi_split_path_info ^(.+?\\.php)(/.*)$; if (!-f \\$document_root\\$fastcgi_script_name) { return 404; } fastcgi_pass unix:/var/run/php7.2-fpm.sock; fastcgi_index search.php; include fastcgi.conf; } } EOF_NGINX_CONF Enable the configuration and restart Nginx sudo systemctl restart php7.2-fpm nginx The Nominatim API is now available at http://localhost/ .","title":"Installation on Ubuntu 18"},{"location":"appendix/Install-on-Ubuntu-18/#installing-the-required-software","text":"These instructions expect that you have a freshly installed Ubuntu 18.04. Make sure all packages are are up-to-date by running: sudo apt update -qq Now you can install all packages needed for Nominatim: sudo apt install -y php-cgi sudo apt install -y build-essential cmake g++ libboost-dev libboost-system-dev \\ libboost-filesystem-dev libexpat1-dev zlib1g-dev\\ libbz2-dev libpq-dev libproj-dev \\ postgresql-server-dev-10 postgresql-10-postgis-2.4 \\ postgresql-contrib-10 postgresql-10-postgis-scripts \\ php php-pgsql php-intl libicu-dev python3-pip \\ python3-psycopg2 python3-psutil python3-jinja2 python3-icu The python-dotenv package that comes with Ubuntu 18.04 is too old, so install the latest version from pip: pip3 install python-dotenv","title":"Installing the Required Software"},{"location":"appendix/Install-on-Ubuntu-18/#system-configuration","text":"The following steps are meant to configure a fresh Ubuntu installation for use with Nominatim. You may skip some of the steps if you have your OS already configured.","title":"System Configuration"},{"location":"appendix/Install-on-Ubuntu-18/#creating-dedicated-user-accounts","text":"Nominatim will run as a global service on your machine. It is therefore best to install it under its own separate user account. In the following we assume this user is called nominatim and the installation will be in /srv/nominatim. To create the user and directory run: sudo useradd -d /srv/nominatim -s /bin/bash -m nominatim You may find a more suitable location if you wish. To be able to copy and paste instructions from this manual, export user name and home directory now like this: export USERNAME=nominatim export USERHOME=/srv/nominatim Never, ever run the installation as a root user. You have been warned. Make sure that system servers can read from the home directory: chmod a+x $USERHOME","title":"Creating Dedicated User Accounts"},{"location":"appendix/Install-on-Ubuntu-18/#setting-up-postgresql","text":"Tune the postgresql configuration, which is located in /etc/postgresql/10/main/postgresql.conf . See section Postgres Tuning in the installation page for the parameters to change. Restart the postgresql service after updating this config file. sudo systemctl restart postgresql Finally, we need to add two postgres users: one for the user that does the import and another for the webserver which should access the database for reading only: sudo -u postgres createuser -s $USERNAME sudo -u postgres createuser www-data","title":"Setting up PostgreSQL"},{"location":"appendix/Install-on-Ubuntu-18/#installing-nominatim","text":"","title":"Installing Nominatim"},{"location":"appendix/Install-on-Ubuntu-18/#building-and-configuration","text":"Get the source code for the release and unpack it cd $USERHOME wget https://nominatim.org/release/Nominatim-3.7.2.tar.bz2 tar xf Nominatim-3.7.2.tar.bz2 The code must be built in a separate directory. Create this directory, then configure and build Nominatim in there: mkdir $USERHOME/build cd $USERHOME/build cmake $USERHOME/Nominatim-3.7.2 make sudo make install Nominatim is now ready to use. You can continue with importing a database from OSM data . If you want to set up a webserver first, continue reading.","title":"Building and Configuration"},{"location":"appendix/Install-on-Ubuntu-18/#setting-up-a-webserver","text":"The webserver should serve the php scripts from the website directory of your project directory . Therefore set up a project directory and populate the website directory: mkdir $USERHOME/nominatim-project cd $USERHOME/nominatim-project nominatim refresh --website","title":"Setting up a webserver"},{"location":"appendix/Install-on-Ubuntu-18/#option-1-using-apache","text":"Apache has a PHP module that can be used to serve Nominatim. To install them run: sudo apt install -y apache2 libapache2-mod-php You need to create an alias to the website directory in your apache configuration. Add a separate nominatim configuration to your webserver: sudo tee /etc/apache2/conf-available/nominatim.conf << EOFAPACHECONF <Directory \"$USERHOME/nominatim-project/website\"> Options FollowSymLinks MultiViews AddType text/html .php DirectoryIndex search.php Require all granted </Directory> Alias /nominatim $USERHOME/nominatim-project/website EOFAPACHECONF Then enable the configuration and restart apache sudo a2enconf nominatim sudo systemctl restart apache2 The Nominatim API is now available at http://localhost/nominatim/ .","title":"Option 1: Using Apache"},{"location":"appendix/Install-on-Ubuntu-18/#option-2-using-nginx","text":"Nginx has no native support for php scripts. You need to set up php-fpm for this purpose. First install nginx and php-fpm: sudo apt install -y nginx php-fpm You need to configure php-fpm to listen on a Unix socket. sudo tee /etc/php/7.2/fpm/pool.d/www.conf << EOF_PHP_FPM_CONF [www] ; Replace the tcp listener and add the unix socket listen = /var/run/php7.2-fpm.sock ; Ensure that the daemon runs as the correct user listen.owner = www-data listen.group = www-data listen.mode = 0666 ; Unix user of FPM processes user = www-data group = www-data ; Choose process manager type (static, dynamic, ondemand) pm = ondemand pm.max_children = 5 EOF_PHP_FPM_CONF Then create a Nginx configuration to forward http requests to that socket. sudo tee /etc/nginx/sites-available/default << EOF_NGINX_CONF server { listen 80 default_server; listen [::]:80 default_server; root $USERHOME/nominatim-project/website; index search.php index.html; location / { try_files \\$uri \\$uri/ @php; } location @php { fastcgi_param SCRIPT_FILENAME \"\\$document_root\\$uri.php\"; fastcgi_param PATH_TRANSLATED \"\\$document_root\\$uri.php\"; fastcgi_param QUERY_STRING \\$args; fastcgi_pass unix:/var/run/php7.2-fpm.sock; fastcgi_index index.php; include fastcgi_params; } location ~ [^/]\\.php(/|$) { fastcgi_split_path_info ^(.+?\\.php)(/.*)$; if (!-f \\$document_root\\$fastcgi_script_name) { return 404; } fastcgi_pass unix:/var/run/php7.2-fpm.sock; fastcgi_index search.php; include fastcgi.conf; } } EOF_NGINX_CONF Enable the configuration and restart Nginx sudo systemctl restart php7.2-fpm nginx The Nominatim API is now available at http://localhost/ .","title":"Option 2: Using nginx"},{"location":"appendix/Install-on-Ubuntu-20/","text":"Note: these installation instructions are also available in executable form for use with vagrant under vagrant/Install-on-Ubuntu-20.sh. Installing the Required Software \uf0c1 These instructions expect that you have a freshly installed Ubuntu 20.04. Make sure all packages are are up-to-date by running: sudo apt update -qq Now you can install all packages needed for Nominatim: sudo apt install -y php-cgi sudo apt install -y build-essential cmake g++ libboost-dev libboost-system-dev \\ libboost-filesystem-dev libexpat1-dev zlib1g-dev \\ libbz2-dev libpq-dev libproj-dev \\ postgresql-server-dev-12 postgresql-12-postgis-3 \\ postgresql-contrib-12 postgresql-12-postgis-3-scripts \\ php php-pgsql php-intl libicu-dev python3-dotenv \\ python3-psycopg2 python3-psutil python3-jinja2 python3-icu System Configuration \uf0c1 The following steps are meant to configure a fresh Ubuntu installation for use with Nominatim. You may skip some of the steps if you have your OS already configured. Creating Dedicated User Accounts \uf0c1 Nominatim will run as a global service on your machine. It is therefore best to install it under its own separate user account. In the following we assume this user is called nominatim and the installation will be in /srv/nominatim. To create the user and directory run: sudo useradd -d /srv/nominatim -s /bin/bash -m nominatim You may find a more suitable location if you wish. To be able to copy and paste instructions from this manual, export user name and home directory now like this: export USERNAME=nominatim export USERHOME=/srv/nominatim Never, ever run the installation as a root user. You have been warned. Make sure that system servers can read from the home directory: chmod a+x $USERHOME Setting up PostgreSQL \uf0c1 Tune the postgresql configuration, which is located in /etc/postgresql/12/main/postgresql.conf . See section Postgres Tuning in the installation page for the parameters to change. Restart the postgresql service after updating this config file. sudo systemctl restart postgresql Finally, we need to add two postgres users: one for the user that does the import and another for the webserver which should access the database for reading only: sudo -u postgres createuser -s $USERNAME sudo -u postgres createuser www-data Installing Nominatim \uf0c1 Building and Configuration \uf0c1 Get the source code for the release and unpack it cd $USERHOME wget https://nominatim.org/release/Nominatim-3.7.2.tar.bz2 tar xf Nominatim-3.7.2.tar.bz2 The code must be built in a separate directory. Create this directory, then configure and build Nominatim in there: mkdir $USERHOME/build cd $USERHOME/build cmake $USERHOME/Nominatim-3.7.2 make sudo make install Nominatim is now ready to use. You can continue with importing a database from OSM data . If you want to set up a webserver first, continue reading. Setting up a webserver \uf0c1 The webserver should serve the php scripts from the website directory of your project directory . Therefore set up a project directory and populate the website directory: mkdir $USERHOME/nominatim-project cd $USERHOME/nominatim-project nominatim refresh --website Option 1: Using Apache \uf0c1 Apache has a PHP module that can be used to serve Nominatim. To install them run: sudo apt install -y apache2 libapache2-mod-php You need to create an alias to the website directory in your apache configuration. Add a separate nominatim configuration to your webserver: sudo tee /etc/apache2/conf-available/nominatim.conf << EOFAPACHECONF <Directory \"$USERHOME/nominatim-project/website\"> Options FollowSymLinks MultiViews AddType text/html .php DirectoryIndex search.php Require all granted </Directory> Alias /nominatim $USERHOME/nominatim-project/website EOFAPACHECONF Then enable the configuration and restart apache sudo a2enconf nominatim sudo systemctl restart apache2 The Nominatim API is now available at http://localhost/nominatim/ . Option 2: Using nginx \uf0c1 Nginx has no native support for php scripts. You need to set up php-fpm for this purpose. First install nginx and php-fpm: sudo apt install -y nginx php-fpm You need to configure php-fpm to listen on a Unix socket. sudo tee /etc/php/7.4/fpm/pool.d/www.conf << EOF_PHP_FPM_CONF [www] ; Replace the tcp listener and add the unix socket listen = /var/run/php7.4-fpm.sock ; Ensure that the daemon runs as the correct user listen.owner = www-data listen.group = www-data listen.mode = 0666 ; Unix user of FPM processes user = www-data group = www-data ; Choose process manager type (static, dynamic, ondemand) pm = ondemand pm.max_children = 5 EOF_PHP_FPM_CONF Then create a Nginx configuration to forward http requests to that socket. sudo tee /etc/nginx/sites-available/default << EOF_NGINX_CONF server { listen 80 default_server; listen [::]:80 default_server; root $USERHOME/nominatim-project/website; index search.php index.html; location / { try_files \\$uri \\$uri/ @php; } location @php { fastcgi_param SCRIPT_FILENAME \"\\$document_root\\$uri.php\"; fastcgi_param PATH_TRANSLATED \"\\$document_root\\$uri.php\"; fastcgi_param QUERY_STRING \\$args; fastcgi_pass unix:/var/run/php7.4-fpm.sock; fastcgi_index index.php; include fastcgi_params; } location ~ [^/]\\.php(/|$) { fastcgi_split_path_info ^(.+?\\.php)(/.*)$; if (!-f \\$document_root\\$fastcgi_script_name) { return 404; } fastcgi_pass unix:/var/run/php7.4-fpm.sock; fastcgi_index search.php; include fastcgi.conf; } } EOF_NGINX_CONF Enable the configuration and restart Nginx sudo systemctl restart php7.4-fpm nginx The Nominatim API is now available at http://localhost/ .","title":"Installation on Ubuntu 20"},{"location":"appendix/Install-on-Ubuntu-20/#installing-the-required-software","text":"These instructions expect that you have a freshly installed Ubuntu 20.04. Make sure all packages are are up-to-date by running: sudo apt update -qq Now you can install all packages needed for Nominatim: sudo apt install -y php-cgi sudo apt install -y build-essential cmake g++ libboost-dev libboost-system-dev \\ libboost-filesystem-dev libexpat1-dev zlib1g-dev \\ libbz2-dev libpq-dev libproj-dev \\ postgresql-server-dev-12 postgresql-12-postgis-3 \\ postgresql-contrib-12 postgresql-12-postgis-3-scripts \\ php php-pgsql php-intl libicu-dev python3-dotenv \\ python3-psycopg2 python3-psutil python3-jinja2 python3-icu","title":"Installing the Required Software"},{"location":"appendix/Install-on-Ubuntu-20/#system-configuration","text":"The following steps are meant to configure a fresh Ubuntu installation for use with Nominatim. You may skip some of the steps if you have your OS already configured.","title":"System Configuration"},{"location":"appendix/Install-on-Ubuntu-20/#creating-dedicated-user-accounts","text":"Nominatim will run as a global service on your machine. It is therefore best to install it under its own separate user account. In the following we assume this user is called nominatim and the installation will be in /srv/nominatim. To create the user and directory run: sudo useradd -d /srv/nominatim -s /bin/bash -m nominatim You may find a more suitable location if you wish. To be able to copy and paste instructions from this manual, export user name and home directory now like this: export USERNAME=nominatim export USERHOME=/srv/nominatim Never, ever run the installation as a root user. You have been warned. Make sure that system servers can read from the home directory: chmod a+x $USERHOME","title":"Creating Dedicated User Accounts"},{"location":"appendix/Install-on-Ubuntu-20/#setting-up-postgresql","text":"Tune the postgresql configuration, which is located in /etc/postgresql/12/main/postgresql.conf . See section Postgres Tuning in the installation page for the parameters to change. Restart the postgresql service after updating this config file. sudo systemctl restart postgresql Finally, we need to add two postgres users: one for the user that does the import and another for the webserver which should access the database for reading only: sudo -u postgres createuser -s $USERNAME sudo -u postgres createuser www-data","title":"Setting up PostgreSQL"},{"location":"appendix/Install-on-Ubuntu-20/#installing-nominatim","text":"","title":"Installing Nominatim"},{"location":"appendix/Install-on-Ubuntu-20/#building-and-configuration","text":"Get the source code for the release and unpack it cd $USERHOME wget https://nominatim.org/release/Nominatim-3.7.2.tar.bz2 tar xf Nominatim-3.7.2.tar.bz2 The code must be built in a separate directory. Create this directory, then configure and build Nominatim in there: mkdir $USERHOME/build cd $USERHOME/build cmake $USERHOME/Nominatim-3.7.2 make sudo make install Nominatim is now ready to use. You can continue with importing a database from OSM data . If you want to set up a webserver first, continue reading.","title":"Building and Configuration"},{"location":"appendix/Install-on-Ubuntu-20/#setting-up-a-webserver","text":"The webserver should serve the php scripts from the website directory of your project directory . Therefore set up a project directory and populate the website directory: mkdir $USERHOME/nominatim-project cd $USERHOME/nominatim-project nominatim refresh --website","title":"Setting up a webserver"},{"location":"appendix/Install-on-Ubuntu-20/#option-1-using-apache","text":"Apache has a PHP module that can be used to serve Nominatim. To install them run: sudo apt install -y apache2 libapache2-mod-php You need to create an alias to the website directory in your apache configuration. Add a separate nominatim configuration to your webserver: sudo tee /etc/apache2/conf-available/nominatim.conf << EOFAPACHECONF <Directory \"$USERHOME/nominatim-project/website\"> Options FollowSymLinks MultiViews AddType text/html .php DirectoryIndex search.php Require all granted </Directory> Alias /nominatim $USERHOME/nominatim-project/website EOFAPACHECONF Then enable the configuration and restart apache sudo a2enconf nominatim sudo systemctl restart apache2 The Nominatim API is now available at http://localhost/nominatim/ .","title":"Option 1: Using Apache"},{"location":"appendix/Install-on-Ubuntu-20/#option-2-using-nginx","text":"Nginx has no native support for php scripts. You need to set up php-fpm for this purpose. First install nginx and php-fpm: sudo apt install -y nginx php-fpm You need to configure php-fpm to listen on a Unix socket. sudo tee /etc/php/7.4/fpm/pool.d/www.conf << EOF_PHP_FPM_CONF [www] ; Replace the tcp listener and add the unix socket listen = /var/run/php7.4-fpm.sock ; Ensure that the daemon runs as the correct user listen.owner = www-data listen.group = www-data listen.mode = 0666 ; Unix user of FPM processes user = www-data group = www-data ; Choose process manager type (static, dynamic, ondemand) pm = ondemand pm.max_children = 5 EOF_PHP_FPM_CONF Then create a Nginx configuration to forward http requests to that socket. sudo tee /etc/nginx/sites-available/default << EOF_NGINX_CONF server { listen 80 default_server; listen [::]:80 default_server; root $USERHOME/nominatim-project/website; index search.php index.html; location / { try_files \\$uri \\$uri/ @php; } location @php { fastcgi_param SCRIPT_FILENAME \"\\$document_root\\$uri.php\"; fastcgi_param PATH_TRANSLATED \"\\$document_root\\$uri.php\"; fastcgi_param QUERY_STRING \\$args; fastcgi_pass unix:/var/run/php7.4-fpm.sock; fastcgi_index index.php; include fastcgi_params; } location ~ [^/]\\.php(/|$) { fastcgi_split_path_info ^(.+?\\.php)(/.*)$; if (!-f \\$document_root\\$fastcgi_script_name) { return 404; } fastcgi_pass unix:/var/run/php7.4-fpm.sock; fastcgi_index search.php; include fastcgi.conf; } } EOF_NGINX_CONF Enable the configuration and restart Nginx sudo systemctl restart php7.4-fpm nginx The Nominatim API is now available at http://localhost/ .","title":"Option 2: Using nginx"},{"location":"develop/Development-Environment/","text":"Setting up Nominatim for Development \uf0c1 This chapter gives an overview how to set up Nominatim for developement and how to run tests. Important This guide assumes that you develop under the latest version of Ubuntu. You can of course also use your favourite distribution. You just might have to adapt the commands below slightly, in particular the commands for installing additional software. Installing Nominatim \uf0c1 The first step is to install Nominatim itself. Please follow the installation instructions in the Admin section . You don't need to set up a webserver for development, the webserver that is included with PHP is sufficient. If you want to run Nominatim in a VM via Vagrant, use the default ubuntu setup. Vagrant's libvirt provider runs out-of-the-box under Ubuntu. You also need to install an NFS daemon to enable directory sharing between host and guest. The following packages should get you started: sudo apt install vagrant vagrant-libvirt libvirt-daemon nfs-kernel-server Prerequisites for testing and documentation \uf0c1 The Nominatim test suite consists of behavioural tests (using behave) and unit tests (using PHPUnit for PHP code and pytest for Python code). It has the following additional requirements: behave test framework >= 1.2.5 phpunit >= 7.3 PHP CodeSniffer Pylint (2.6.0 is used for the CI) pytest The documentation is built with mkdocs: mkdocs >= 1.1.2 Installing prerequisites on Ubuntu/Debian \uf0c1 Some of the Python packages require the newest version which is not yet available with the current distributions. Therefore it is recommended to install pip to get the newest versions. To install all necessary packages run: sudo apt install php-cgi phpunit php-codesniffer \\ python3-pip python3-setuptools python3-dev pylint pip3 install --user behave mkdocs pytest The mkdocs executable will be located in .local/bin . You may have to add this directory to your path, for example by running: echo 'export PATH=~/.local/bin:$PATH' > ~/.profile If your distribution does not have PHPUnit 7.3+, you can install it (as well as CodeSniffer) via composer: sudo apt-get install composer composer global require \"squizlabs/php_codesniffer=*\" composer global require \"phpunit/phpunit=8.*\" The binaries are found in .config/composer/vendor/bin . You need to add this to your PATH as well: echo 'export PATH=~/.config/composer/vendor/bin:$PATH' > ~/.profile Executing Tests \uf0c1 All tests are located in the /test directory. To run all tests just go to the build directory and run make: cd build make test For more information about the structure of the tests and how to change and extend the test suite, see the Testing chapter . Documentation Pages \uf0c1 The Nominatim documentation is built using the MkDocs static site generation framework. The master branch is automatically deployed every night on https://nominatim.org/release-docs/develop/ To build the documentation, go to the build directory and run make doc INFO - Cleaning site directory INFO - Building documentation to directory: /home/vagrant/build/site-html This runs mkdocs build plus extra transformation of some files and adds symlinks (see CMakeLists.txt for the exact steps). Now you can start webserver for local testing build> mkdocs serve [server:296] Serving on http://127.0.0.1:8000 [handlers:62] Start watching changes If you develop inside a Vagrant virtual machine, use a port that is forwarded to your host: build> mkdocs serve --dev-addr 0.0.0.0:8088 [server:296] Serving on http://0.0.0.0:8088 [handlers:62] Start watching changes","title":"Setup for Development"},{"location":"develop/Development-Environment/#setting-up-nominatim-for-development","text":"This chapter gives an overview how to set up Nominatim for developement and how to run tests. Important This guide assumes that you develop under the latest version of Ubuntu. You can of course also use your favourite distribution. You just might have to adapt the commands below slightly, in particular the commands for installing additional software.","title":"Setting up Nominatim for Development"},{"location":"develop/Development-Environment/#installing-nominatim","text":"The first step is to install Nominatim itself. Please follow the installation instructions in the Admin section . You don't need to set up a webserver for development, the webserver that is included with PHP is sufficient. If you want to run Nominatim in a VM via Vagrant, use the default ubuntu setup. Vagrant's libvirt provider runs out-of-the-box under Ubuntu. You also need to install an NFS daemon to enable directory sharing between host and guest. The following packages should get you started: sudo apt install vagrant vagrant-libvirt libvirt-daemon nfs-kernel-server","title":"Installing Nominatim"},{"location":"develop/Development-Environment/#prerequisites-for-testing-and-documentation","text":"The Nominatim test suite consists of behavioural tests (using behave) and unit tests (using PHPUnit for PHP code and pytest for Python code). It has the following additional requirements: behave test framework >= 1.2.5 phpunit >= 7.3 PHP CodeSniffer Pylint (2.6.0 is used for the CI) pytest The documentation is built with mkdocs: mkdocs >= 1.1.2","title":"Prerequisites for testing and documentation"},{"location":"develop/Development-Environment/#installing-prerequisites-on-ubuntudebian","text":"Some of the Python packages require the newest version which is not yet available with the current distributions. Therefore it is recommended to install pip to get the newest versions. To install all necessary packages run: sudo apt install php-cgi phpunit php-codesniffer \\ python3-pip python3-setuptools python3-dev pylint pip3 install --user behave mkdocs pytest The mkdocs executable will be located in .local/bin . You may have to add this directory to your path, for example by running: echo 'export PATH=~/.local/bin:$PATH' > ~/.profile If your distribution does not have PHPUnit 7.3+, you can install it (as well as CodeSniffer) via composer: sudo apt-get install composer composer global require \"squizlabs/php_codesniffer=*\" composer global require \"phpunit/phpunit=8.*\" The binaries are found in .config/composer/vendor/bin . You need to add this to your PATH as well: echo 'export PATH=~/.config/composer/vendor/bin:$PATH' > ~/.profile","title":"Installing prerequisites on Ubuntu/Debian"},{"location":"develop/Development-Environment/#executing-tests","text":"All tests are located in the /test directory. To run all tests just go to the build directory and run make: cd build make test For more information about the structure of the tests and how to change and extend the test suite, see the Testing chapter .","title":"Executing Tests"},{"location":"develop/Development-Environment/#documentation-pages","text":"The Nominatim documentation is built using the MkDocs static site generation framework. The master branch is automatically deployed every night on https://nominatim.org/release-docs/develop/ To build the documentation, go to the build directory and run make doc INFO - Cleaning site directory INFO - Building documentation to directory: /home/vagrant/build/site-html This runs mkdocs build plus extra transformation of some files and adds symlinks (see CMakeLists.txt for the exact steps). Now you can start webserver for local testing build> mkdocs serve [server:296] Serving on http://127.0.0.1:8000 [handlers:62] Start watching changes If you develop inside a Vagrant virtual machine, use a port that is forwarded to your host: build> mkdocs serve --dev-addr 0.0.0.0:8088 [server:296] Serving on http://0.0.0.0:8088 [handlers:62] Start watching changes","title":"Documentation Pages"},{"location":"develop/Import/","text":"OSM Data Import \uf0c1 OSM data is initially imported using osm2pgsql . Nominatim uses its own data output style 'gazetteer', which differs from the output style created for map rendering. Database Layout \uf0c1 The gazetteer style produces a single table place with the following rows: osm_type - kind of OSM object ( N - node, W - way, R - relation) osm_id - original OSM ID class - key of principal tag defining the object type type - value of principal tag defining the object type name - collection of tags that contain a name or reference admin_level - numerical value of the tagged administrative level address - collection of tags defining the address of an object extratags - collection of additional interesting tags that are not directly relevant for searching geometry - geometry of the object (in WGS84) A single OSM object may appear multiple times in this table when it is tagged with multiple tags that may constitute a principal tag. Take for example a motorway bridge. In OSM, this would be a way which is tagged with highway=motorway and bridge=yes . This way would appear in the place table once with class of highway and once with a class of bridge . Thus the unique key for place is ( osm_type , osm_id , class ). Configuring the Import \uf0c1 How tags are interpreted and assigned to the different place columns can be configured via the import style configuration file ( NOMINATIM_IMPORT_STYLE ). This is a JSON file which contains a list of rules which are matched against every tag of every object and then assign the tag its specific role. Configuration Rules \uf0c1 A single rule looks like this: { \"keys\" : [ \"key1\" , \"key2\" , ... ], \"values\" : { \"value1\" : \"prop\" , \"value2\" : \"prop1,prop2\" } } A rule first defines a list of keys to apply the rule to. This is always a list of strings. The string may have four forms. An empty string matches against any key. A string that ends in an asterisk * is a prefix match and accordingly matches against any key that starts with the given string (minus the * ). A suffix match can be defined similarly with a string that starts with a * . Any other string constitutes an exact match. The second part of the rules defines a list of values and the properties that apply to a successful match. Value strings may be either empty, which means that they match any value, or describe an exact match. Prefix or suffix matching of values is not possible. For a rule to match, it has to find a valid combination of keys and values. The resulting property is that of the matched values. The rules in a configuration file are processed sequentially and the first match for each tag wins. A rule where key and value are the empty string is special. This defines the fallback when none of the rules match. The fallback is always used as a last resort when nothing else matches, no matter where the rule appears in the file. Defining multiple fallback rules is not allowed. What happens in this case, is undefined. Tag Properties \uf0c1 One or more of the following properties may be given for each tag: main A principal tag. A new row will be added for the object with key and value as class and type . with_name When the tag is a principal tag ( main property set): only really add a new row, if there is any name tag found (a reference tag is not sufficient, see below). with_name_key When the tag is a principal tag ( main property set): only really add a new row, if there is also a name tag that matches the key of the principal tag. For example, if the main tag is bridge=yes , then it will only be added as an extra row, if there is a tag bridge:name[:XXX] for the same object. If this property is set, all other names that are not domain-specific are ignored. fallback When the tag is a principal tag ( main property set): only really add a new row, when no other principal tags for this object have been found. Only one fallback tag can win for an object. operator When the tag is a principal tag ( main property set): also include the operator tag in the list of names. This is a special construct for an out-dated tagging practise in OSM. Fuel stations and chain restaurants in particular used to have the name of the chain tagged as operator . These days the chain can be more commonly found in the brand tag but there is still enough old data around to warrant this special case. name Add tag to the list of names. ref Add tag to the list of names as a reference. At the moment this only means that the object is not considered to be named for with_name . address Add tag to the list of address tags. If the tag starts with addr: or is_in: , then this prefix is cut off before adding it to the list. postcode Add the value as a postcode to the address tags. If multiple tags are candidate for postcodes, one wins out and the others are dropped. country Add the value as a country code to the address tags. The value must be a two letter country code, otherwise it is ignored. If there are multiple tags that match, then one wins out and the others are dropped. house If no principle tags can be found for the object, still add the object with class = place and type = house . Use this for address nodes that have no other function. interpolation Add this object as an address interpolation (appears as class = place and type = houses in the database). extra Add tag to the list of extra tags. skip Skip the tag completely. Useful when a custom default fallback is defined or to define exceptions to rules. A rule can define as many of these properties for one match as it likes. For example, if the property is \"main,extra\" then the tag will open a new row but also have the tag appear in the list of extra tags. There are a number of pre-defined styles in the settings/ directory. It is advisable to start from one of these styles when defining your own. Changing the Style of Existing Databases \uf0c1 There is normally no issue changing the style of a database that is already imported and now kept up-to-date with change files. Just be aware that any change in the style applies to updates only. If you want to change the data that is already in the database, then a reimport is necessary.","title":"OSM Data Import"},{"location":"develop/Import/#osm-data-import","text":"OSM data is initially imported using osm2pgsql . Nominatim uses its own data output style 'gazetteer', which differs from the output style created for map rendering.","title":"OSM Data Import"},{"location":"develop/Import/#database-layout","text":"The gazetteer style produces a single table place with the following rows: osm_type - kind of OSM object ( N - node, W - way, R - relation) osm_id - original OSM ID class - key of principal tag defining the object type type - value of principal tag defining the object type name - collection of tags that contain a name or reference admin_level - numerical value of the tagged administrative level address - collection of tags defining the address of an object extratags - collection of additional interesting tags that are not directly relevant for searching geometry - geometry of the object (in WGS84) A single OSM object may appear multiple times in this table when it is tagged with multiple tags that may constitute a principal tag. Take for example a motorway bridge. In OSM, this would be a way which is tagged with highway=motorway and bridge=yes . This way would appear in the place table once with class of highway and once with a class of bridge . Thus the unique key for place is ( osm_type , osm_id , class ).","title":"Database Layout"},{"location":"develop/Import/#configuring-the-import","text":"How tags are interpreted and assigned to the different place columns can be configured via the import style configuration file ( NOMINATIM_IMPORT_STYLE ). This is a JSON file which contains a list of rules which are matched against every tag of every object and then assign the tag its specific role.","title":"Configuring the Import"},{"location":"develop/Import/#configuration-rules","text":"A single rule looks like this: { \"keys\" : [ \"key1\" , \"key2\" , ... ], \"values\" : { \"value1\" : \"prop\" , \"value2\" : \"prop1,prop2\" } } A rule first defines a list of keys to apply the rule to. This is always a list of strings. The string may have four forms. An empty string matches against any key. A string that ends in an asterisk * is a prefix match and accordingly matches against any key that starts with the given string (minus the * ). A suffix match can be defined similarly with a string that starts with a * . Any other string constitutes an exact match. The second part of the rules defines a list of values and the properties that apply to a successful match. Value strings may be either empty, which means that they match any value, or describe an exact match. Prefix or suffix matching of values is not possible. For a rule to match, it has to find a valid combination of keys and values. The resulting property is that of the matched values. The rules in a configuration file are processed sequentially and the first match for each tag wins. A rule where key and value are the empty string is special. This defines the fallback when none of the rules match. The fallback is always used as a last resort when nothing else matches, no matter where the rule appears in the file. Defining multiple fallback rules is not allowed. What happens in this case, is undefined.","title":"Configuration Rules"},{"location":"develop/Import/#tag-properties","text":"One or more of the following properties may be given for each tag: main A principal tag. A new row will be added for the object with key and value as class and type . with_name When the tag is a principal tag ( main property set): only really add a new row, if there is any name tag found (a reference tag is not sufficient, see below). with_name_key When the tag is a principal tag ( main property set): only really add a new row, if there is also a name tag that matches the key of the principal tag. For example, if the main tag is bridge=yes , then it will only be added as an extra row, if there is a tag bridge:name[:XXX] for the same object. If this property is set, all other names that are not domain-specific are ignored. fallback When the tag is a principal tag ( main property set): only really add a new row, when no other principal tags for this object have been found. Only one fallback tag can win for an object. operator When the tag is a principal tag ( main property set): also include the operator tag in the list of names. This is a special construct for an out-dated tagging practise in OSM. Fuel stations and chain restaurants in particular used to have the name of the chain tagged as operator . These days the chain can be more commonly found in the brand tag but there is still enough old data around to warrant this special case. name Add tag to the list of names. ref Add tag to the list of names as a reference. At the moment this only means that the object is not considered to be named for with_name . address Add tag to the list of address tags. If the tag starts with addr: or is_in: , then this prefix is cut off before adding it to the list. postcode Add the value as a postcode to the address tags. If multiple tags are candidate for postcodes, one wins out and the others are dropped. country Add the value as a country code to the address tags. The value must be a two letter country code, otherwise it is ignored. If there are multiple tags that match, then one wins out and the others are dropped. house If no principle tags can be found for the object, still add the object with class = place and type = house . Use this for address nodes that have no other function. interpolation Add this object as an address interpolation (appears as class = place and type = houses in the database). extra Add tag to the list of extra tags. skip Skip the tag completely. Useful when a custom default fallback is defined or to define exceptions to rules. A rule can define as many of these properties for one match as it likes. For example, if the property is \"main,extra\" then the tag will open a new row but also have the tag appear in the list of extra tags. There are a number of pre-defined styles in the settings/ directory. It is advisable to start from one of these styles when defining your own.","title":"Tag Properties"},{"location":"develop/Import/#changing-the-style-of-existing-databases","text":"There is normally no issue changing the style of a database that is already imported and now kept up-to-date with change files. Just be aware that any change in the style applies to updates only. If you want to change the data that is already in the database, then a reimport is necessary.","title":"Changing the Style of Existing Databases"},{"location":"develop/Postcodes/","text":"Postcodes in Nominatim \uf0c1 The blog post Nominatim and Postcodes describes the handling implemented since Nominatim 3.1. Postcode centroids (aka 'calculated postcodes') are generated by looking at all postcodes of a country, grouping them and calculating the geometric centroid. There is currently no logic to deal with extreme outliers (typos or other mistakes in OSM data). There is also no check if a postcodes adheres to a country's format, e.g. if Swiss postcodes are 4 digits. Regular updating calculated postcodes \uf0c1 The script to rerun the calculation is nominatim refresh --postcodes and runs once per night on nominatim.openstreetmap.org. Finding places that share a specific postcode \uf0c1 In the Nominatim database run SELECT address -> 'postcode' as pc , osm_type , osm_id , class , type , st_x ( centroid ) as lon , st_y ( centroid ) as lat FROM placex WHERE country_code = 'fr' AND upper ( trim ( both ' ' from address -> 'postcode' )) = '33210' ; Alternatively on Overpass run the following query [out:json][timeout:250]; area[\"name\"=\"France\"]->.boundaryarea; ( nwr(area.boundaryarea)[\"addr:postcode\"=\"33210\"]; ); out body; >; out skel qt;","title":"Postcodes"},{"location":"develop/Postcodes/#postcodes-in-nominatim","text":"The blog post Nominatim and Postcodes describes the handling implemented since Nominatim 3.1. Postcode centroids (aka 'calculated postcodes') are generated by looking at all postcodes of a country, grouping them and calculating the geometric centroid. There is currently no logic to deal with extreme outliers (typos or other mistakes in OSM data). There is also no check if a postcodes adheres to a country's format, e.g. if Swiss postcodes are 4 digits.","title":"Postcodes in Nominatim"},{"location":"develop/Postcodes/#regular-updating-calculated-postcodes","text":"The script to rerun the calculation is nominatim refresh --postcodes and runs once per night on nominatim.openstreetmap.org.","title":"Regular updating calculated postcodes"},{"location":"develop/Postcodes/#finding-places-that-share-a-specific-postcode","text":"In the Nominatim database run SELECT address -> 'postcode' as pc , osm_type , osm_id , class , type , st_x ( centroid ) as lon , st_y ( centroid ) as lat FROM placex WHERE country_code = 'fr' AND upper ( trim ( both ' ' from address -> 'postcode' )) = '33210' ; Alternatively on Overpass run the following query [out:json][timeout:250]; area[\"name\"=\"France\"]->.boundaryarea; ( nwr(area.boundaryarea)[\"addr:postcode\"=\"33210\"]; ); out body; >; out skel qt;","title":"Finding places that share a specific postcode"},{"location":"develop/Ranking/","text":"Place Ranking in Nominatim \uf0c1 Nominatim uses two metrics to rank a place: search rank and address rank. Both can be assigned a value between 0 and 30. They serve slightly different purposes, which are explained in this chapter. Search rank \uf0c1 The search rank describes the extent and importance of a place. It is used when ranking search results. Simply put, if there are two results for a search query which are otherwise equal, then the result with the lower search rank will be appear higher in the result list. Search ranks are not so important these days because many well-known places use the Wikipedia importance ranking instead. The following table gives an overview of the kind of features that Nominatim expects for each rank: rank typical place types extent 1-3 oceans, continents - 4 countries - 5-9 states, regions, provinces - 10-12 counties - 13-16 cities, municipalities, islands 15 km 17-18 towns, boroughs 4 km 19 villages, suburbs 2 km 20 hamlets, farms, neighbourhoods 1 km 21-25 isolated dwellings, city blocks 500 m The extent column describes how far a feature is assumed to reach when it is mapped only as a point. Larger features like countries and states are usually available with their exact area in the OpenStreetMap data. That is why no extent is given. Address rank \uf0c1 The address rank describes where a place shows up in an address hierarchy. Usually only administrative boundaries and place nodes and areas are eligible to be part of an address. Places that should not appear in the address must have an address rank of 0. The following table gives an overview how ranks are mapped to address parts: rank address part 1-3 unused 4 country 5-9 state 10-12 county 13-16 city 17-21 suburb 22-24 neighbourhood 25 squares, farms, localities 26-27 street 28-30 POI/house number The country rank 4 usually doesn't show up in the address parts of an object. The country is determined indirectly from the country code. Ranks 5-24 can be assigned more or less freely. They make up the major part of the address. Rank 25 is also an addressing rank but it is special because while it can be the parent to a POI with an addr:place of the same name, it cannot be a parent to streets. Use it for place features that are technically on the same level as a street (e.g. squares, city blocks) or for places that should not normally appear in an address unless explicitly tagged so (e.g place=locality which should be uninhabited and as such not addressable). The street ranks 26 and 27 are handled slightly differently. Only one object from these ranks shows up in an address. For POI level objects like shops, buildings or house numbers always use rank 30. Ranks 28 is reserved for house number interpolations. 29 is for internal use only. Rank configuration \uf0c1 Search and address ranks are assigned to a place when it is first imported into the database. There are a few hard-coded rules for the assignment: postcodes follow special rules according to their length boundaries that are not areas and railway=rail are dropped completely the following are always search rank 30 and address rank 0: highway nodes landuse that is not an area Other than that, the ranks can be freely assigned via the JSON file according to their type and the country they are in. The name of the config file to be used can be changed with the setting NOMINATIM_ADDRESS_LEVEL_CONFIG . The address level configuration must consist of an array of configuration entries, each containing a tag definition and an optional country array: [ { \"tags\" : { \"place\" : { \"county\" : 12, \"city\" : 16, }, \"landuse\" : { \"residential\" : 22, \"\" : 30 } } }, { \"countries\" : [ \"ca\", \"us\" ], \"tags\" : { \"boundary\" : { \"administrative8\" : 18, \"administrative9\" : 20 }, \"landuse\" : { \"residential\" : [22, 0] } } } ] The countries field contains a list of countries (as ISO 3166-1 alpha 2 code) for which the definition applies. When the field is omitted, then the definition is used as a fallback, when nothing more specific for a given country exists. tags contains the ranks for key/value pairs. The ranks can be either a single number, in which case they are the search and address rank, or an array of search and address rank (in that order). The value may be left empty. Then the rank is used when no more specific value is found for the given key. Countries and key/value combination may appear in multiple definitions. Just make sure that each combination of country/key/value appears only once per file. Otherwise the import will fail with a UNIQUE INDEX constraint violation on import.","title":"Place Ranking"},{"location":"develop/Ranking/#place-ranking-in-nominatim","text":"Nominatim uses two metrics to rank a place: search rank and address rank. Both can be assigned a value between 0 and 30. They serve slightly different purposes, which are explained in this chapter.","title":"Place Ranking in Nominatim"},{"location":"develop/Ranking/#search-rank","text":"The search rank describes the extent and importance of a place. It is used when ranking search results. Simply put, if there are two results for a search query which are otherwise equal, then the result with the lower search rank will be appear higher in the result list. Search ranks are not so important these days because many well-known places use the Wikipedia importance ranking instead. The following table gives an overview of the kind of features that Nominatim expects for each rank: rank typical place types extent 1-3 oceans, continents - 4 countries - 5-9 states, regions, provinces - 10-12 counties - 13-16 cities, municipalities, islands 15 km 17-18 towns, boroughs 4 km 19 villages, suburbs 2 km 20 hamlets, farms, neighbourhoods 1 km 21-25 isolated dwellings, city blocks 500 m The extent column describes how far a feature is assumed to reach when it is mapped only as a point. Larger features like countries and states are usually available with their exact area in the OpenStreetMap data. That is why no extent is given.","title":"Search rank"},{"location":"develop/Ranking/#address-rank","text":"The address rank describes where a place shows up in an address hierarchy. Usually only administrative boundaries and place nodes and areas are eligible to be part of an address. Places that should not appear in the address must have an address rank of 0. The following table gives an overview how ranks are mapped to address parts: rank address part 1-3 unused 4 country 5-9 state 10-12 county 13-16 city 17-21 suburb 22-24 neighbourhood 25 squares, farms, localities 26-27 street 28-30 POI/house number The country rank 4 usually doesn't show up in the address parts of an object. The country is determined indirectly from the country code. Ranks 5-24 can be assigned more or less freely. They make up the major part of the address. Rank 25 is also an addressing rank but it is special because while it can be the parent to a POI with an addr:place of the same name, it cannot be a parent to streets. Use it for place features that are technically on the same level as a street (e.g. squares, city blocks) or for places that should not normally appear in an address unless explicitly tagged so (e.g place=locality which should be uninhabited and as such not addressable). The street ranks 26 and 27 are handled slightly differently. Only one object from these ranks shows up in an address. For POI level objects like shops, buildings or house numbers always use rank 30. Ranks 28 is reserved for house number interpolations. 29 is for internal use only.","title":"Address rank"},{"location":"develop/Ranking/#rank-configuration","text":"Search and address ranks are assigned to a place when it is first imported into the database. There are a few hard-coded rules for the assignment: postcodes follow special rules according to their length boundaries that are not areas and railway=rail are dropped completely the following are always search rank 30 and address rank 0: highway nodes landuse that is not an area Other than that, the ranks can be freely assigned via the JSON file according to their type and the country they are in. The name of the config file to be used can be changed with the setting NOMINATIM_ADDRESS_LEVEL_CONFIG . The address level configuration must consist of an array of configuration entries, each containing a tag definition and an optional country array: [ { \"tags\" : { \"place\" : { \"county\" : 12, \"city\" : 16, }, \"landuse\" : { \"residential\" : 22, \"\" : 30 } } }, { \"countries\" : [ \"ca\", \"us\" ], \"tags\" : { \"boundary\" : { \"administrative8\" : 18, \"administrative9\" : 20 }, \"landuse\" : { \"residential\" : [22, 0] } } } ] The countries field contains a list of countries (as ISO 3166-1 alpha 2 code) for which the definition applies. When the field is omitted, then the definition is used as a fallback, when nothing more specific for a given country exists. tags contains the ranks for key/value pairs. The ranks can be either a single number, in which case they are the search and address rank, or an array of search and address rank (in that order). The value may be left empty. Then the rank is used when no more specific value is found for the given key. Countries and key/value combination may appear in multiple definitions. Just make sure that each combination of country/key/value appears only once per file. Otherwise the import will fail with a UNIQUE INDEX constraint violation on import.","title":"Rank configuration"},{"location":"develop/Testing/","text":"Nominatim Test Suite \uf0c1 This chapter describes the tests in the /test directory, how they are structured and how to extend them. For a quick introduction on how to run the tests, see the Development setup chapter . Overall structure \uf0c1 There are two kind of tests in this test suite. There are functional tests which test the API interface using a BDD test framework and there are unit tests for specific PHP functions. This test directory is sturctured as follows: -+- bdd Functional API tests | \\ | +- steps Step implementations for test descriptions | +- osm2pgsql Tests for data import via osm2pgsql | +- db Tests for internal data processing on import and update | +- api Tests for API endpoints ( search , reverse , etc . ) | +- php PHP unit tests +- python Python unit tests +- scenes Geometry test data +- testdb Base data for generating API test database PHP Unit Tests ( test/php ) \uf0c1 Unit tests for PHP code can be found in the php/ directory. They test selected PHP functions. Very low coverage. To execute the test suite run cd test/php UNIT_TEST_DSN='pgsql:dbname=nominatim_unit_tests' phpunit ../ It will read phpunit.xml which points to the library, test path, bootstrap strip and sets other parameters. It will use (and destroy) a local database 'nominatim_unit_tests'. You can set a different connection string with e.g. UNIT_TEST_DSN='pgsql:dbname=foo_unit_tests'. Python Unit Tests ( test/python ) \uf0c1 Unit tests for Python code can be found in the python/ directory. The goal is to have complete coverage of the Python library in nominatim . To execute the tests run py.test-3 test/python or pytest test/python The name of the pytest binary depends on your installation. BDD Functional Tests ( test/bdd ) \uf0c1 Functional tests are written as BDD instructions. For more information on the philosophy of BDD testing, see the Behave manual . The following explanation assume that the reader is familiar with the BDD notations of features, scenarios and steps. All possible steps can be found in the steps directory and should ideally be documented. General Usage \uf0c1 To run the functional tests, do cd test/bdd behave The tests can be configured with a set of environment variables ( behave -D key=val ): BUILDDIR - build directory of Nominatim installation to test TEMPLATE_DB - name of template database used as a skeleton for the test databases (db tests) TEST_DB - name of test database (db tests) API_TEST_DB - name of the database containing the API test data (api tests) API_TEST_FILE - OSM file to be imported into the API test database (api tests) DB_HOST - (optional) hostname of database host DB_PORT - (optional) port of database on host DB_USER - (optional) username of database login DB_PASS - (optional) password for database login SERVER_MODULE_PATH - (optional) path on the Postgres server to Nominatim module shared library file REMOVE_TEMPLATE - if true, the template and API database will not be reused during the next run. Reusing the base templates speeds up tests considerably but might lead to outdated errors for some changes in the database layout. KEEP_TEST_DB - if true, the test database will not be dropped after a test is finished. Should only be used if one single scenario is run, otherwise the result is undefined. Logging can be defined through command line parameters of behave itself. Check out behave --help for details. Also have a look at the 'work-in-progress' feature of behave which comes in handy when writing new tests. API Tests ( test/bdd/api ) \uf0c1 These tests are meant to test the different API endpoints and their parameters. They require to import several datasets into a test database. This is normally done automatically during setup of the test. The API test database is then kept around and reused in subsequent runs of behave. Use behave -DREMOVE_TEMPLATE to force a reimport of the database. The official test dataset is saved in the file test/testdb/apidb-test-data.pbf and compromises the following data: Geofabrik extract of Liechtenstein extract of Autauga country, Alabama, US (for tests against Tiger data) additional data from test/testdb/additional_api_test.data.osm API tests should only be testing the functionality of the website PHP code. Most tests should be formulated as BDD DB creation tests (see below) instead. Code Coverage \uf0c1 The API tests also support code coverage tests. You need to install PHP_CodeCoverage . On Debian/Ubuntu run: apt-get install php-codecoverage php-xdebug Then run the API tests as follows: behave api -DPHPCOV=<coverage output dir> The output directory must be an absolute path. To generate reports, you can use the phpcov tool: phpcov merge --html=<report output dir> <coverage output dir> DB Creation Tests ( test/bdd/db ) \uf0c1 These tests check the import and update of the Nominatim database. They do not test the correctness of osm2pgsql. Each test will write some data into the place table (and optionally the planet_osm_* tables if required) and then run Nominatim's processing functions on that. These tests need to create their own test databases. By default they will be called test_template_nominatim and test_nominatim . Names can be changed with the environment variables TEMPLATE_DB and TEST_DB . The user running the tests needs superuser rights for postgres. Import Tests ( test/bdd/osm2pgsql ) \uf0c1 These tests check that data is imported correctly into the place table. They use the same template database as the DB Creation tests, so the same remarks apply. Note that most testing of the gazetteer output of osm2pgsql is done in the tests of osm2pgsql itself. The BDD tests are just there to ensure compatibility of the osm2pgsql and Nominatim code.","title":"Testing"},{"location":"develop/Testing/#nominatim-test-suite","text":"This chapter describes the tests in the /test directory, how they are structured and how to extend them. For a quick introduction on how to run the tests, see the Development setup chapter .","title":"Nominatim Test Suite"},{"location":"develop/Testing/#overall-structure","text":"There are two kind of tests in this test suite. There are functional tests which test the API interface using a BDD test framework and there are unit tests for specific PHP functions. This test directory is sturctured as follows: -+- bdd Functional API tests | \\ | +- steps Step implementations for test descriptions | +- osm2pgsql Tests for data import via osm2pgsql | +- db Tests for internal data processing on import and update | +- api Tests for API endpoints ( search , reverse , etc . ) | +- php PHP unit tests +- python Python unit tests +- scenes Geometry test data +- testdb Base data for generating API test database","title":"Overall structure"},{"location":"develop/Testing/#php-unit-tests-testphp","text":"Unit tests for PHP code can be found in the php/ directory. They test selected PHP functions. Very low coverage. To execute the test suite run cd test/php UNIT_TEST_DSN='pgsql:dbname=nominatim_unit_tests' phpunit ../ It will read phpunit.xml which points to the library, test path, bootstrap strip and sets other parameters. It will use (and destroy) a local database 'nominatim_unit_tests'. You can set a different connection string with e.g. UNIT_TEST_DSN='pgsql:dbname=foo_unit_tests'.","title":"PHP Unit Tests (test/php)"},{"location":"develop/Testing/#python-unit-tests-testpython","text":"Unit tests for Python code can be found in the python/ directory. The goal is to have complete coverage of the Python library in nominatim . To execute the tests run py.test-3 test/python or pytest test/python The name of the pytest binary depends on your installation.","title":"Python Unit Tests (test/python)"},{"location":"develop/Testing/#bdd-functional-tests-testbdd","text":"Functional tests are written as BDD instructions. For more information on the philosophy of BDD testing, see the Behave manual . The following explanation assume that the reader is familiar with the BDD notations of features, scenarios and steps. All possible steps can be found in the steps directory and should ideally be documented.","title":"BDD Functional Tests (test/bdd)"},{"location":"develop/Testing/#general-usage","text":"To run the functional tests, do cd test/bdd behave The tests can be configured with a set of environment variables ( behave -D key=val ): BUILDDIR - build directory of Nominatim installation to test TEMPLATE_DB - name of template database used as a skeleton for the test databases (db tests) TEST_DB - name of test database (db tests) API_TEST_DB - name of the database containing the API test data (api tests) API_TEST_FILE - OSM file to be imported into the API test database (api tests) DB_HOST - (optional) hostname of database host DB_PORT - (optional) port of database on host DB_USER - (optional) username of database login DB_PASS - (optional) password for database login SERVER_MODULE_PATH - (optional) path on the Postgres server to Nominatim module shared library file REMOVE_TEMPLATE - if true, the template and API database will not be reused during the next run. Reusing the base templates speeds up tests considerably but might lead to outdated errors for some changes in the database layout. KEEP_TEST_DB - if true, the test database will not be dropped after a test is finished. Should only be used if one single scenario is run, otherwise the result is undefined. Logging can be defined through command line parameters of behave itself. Check out behave --help for details. Also have a look at the 'work-in-progress' feature of behave which comes in handy when writing new tests.","title":"General Usage"},{"location":"develop/Testing/#api-tests-testbddapi","text":"These tests are meant to test the different API endpoints and their parameters. They require to import several datasets into a test database. This is normally done automatically during setup of the test. The API test database is then kept around and reused in subsequent runs of behave. Use behave -DREMOVE_TEMPLATE to force a reimport of the database. The official test dataset is saved in the file test/testdb/apidb-test-data.pbf and compromises the following data: Geofabrik extract of Liechtenstein extract of Autauga country, Alabama, US (for tests against Tiger data) additional data from test/testdb/additional_api_test.data.osm API tests should only be testing the functionality of the website PHP code. Most tests should be formulated as BDD DB creation tests (see below) instead.","title":"API Tests (test/bdd/api)"},{"location":"develop/Testing/#code-coverage","text":"The API tests also support code coverage tests. You need to install PHP_CodeCoverage . On Debian/Ubuntu run: apt-get install php-codecoverage php-xdebug Then run the API tests as follows: behave api -DPHPCOV=<coverage output dir> The output directory must be an absolute path. To generate reports, you can use the phpcov tool: phpcov merge --html=<report output dir> <coverage output dir>","title":"Code Coverage"},{"location":"develop/Testing/#db-creation-tests-testbdddb","text":"These tests check the import and update of the Nominatim database. They do not test the correctness of osm2pgsql. Each test will write some data into the place table (and optionally the planet_osm_* tables if required) and then run Nominatim's processing functions on that. These tests need to create their own test databases. By default they will be called test_template_nominatim and test_nominatim . Names can be changed with the environment variables TEMPLATE_DB and TEST_DB . The user running the tests needs superuser rights for postgres.","title":"DB Creation Tests (test/bdd/db)"},{"location":"develop/Testing/#import-tests-testbddosm2pgsql","text":"These tests check that data is imported correctly into the place table. They use the same template database as the DB Creation tests, so the same remarks apply. Note that most testing of the gazetteer output of osm2pgsql is done in the tests of osm2pgsql itself. The BDD tests are just there to ensure compatibility of the osm2pgsql and Nominatim code.","title":"Import Tests (test/bdd/osm2pgsql)"},{"location":"develop/data-sources/","text":"Additional Data Sources \uf0c1 This guide explains how data sources other than OpenStreetMap mentioned in the install instructions got obtained and converted. Country grid \uf0c1 Nominatim uses pre-generated country borders data. In case one imports only a subset of a country. And to assign each place a partition. Nominatim database tables are split into partitions for performance. More details in osm-search/country-grid-data . US Census TIGER \uf0c1 For the United States you can choose to import additonal street-level data. The data isn't mixed into OSM data but queried as fallback when no OSM result can be found. More details in osm-search/TIGER-data . GB postcodes \uf0c1 For Great Britain you can choose to import Royalmail postcode centroids. More details in osm-search/gb-postcode-data . Wikipedia & Wikidata rankings \uf0c1 Nominatim can import \"importance\" data of place names. This greatly improves ranking of results. More details in osm-search/wikipedia-wikidata .","title":"External Data Sources"},{"location":"develop/data-sources/#additional-data-sources","text":"This guide explains how data sources other than OpenStreetMap mentioned in the install instructions got obtained and converted.","title":"Additional Data Sources"},{"location":"develop/data-sources/#country-grid","text":"Nominatim uses pre-generated country borders data. In case one imports only a subset of a country. And to assign each place a partition. Nominatim database tables are split into partitions for performance. More details in osm-search/country-grid-data .","title":"Country grid"},{"location":"develop/data-sources/#us-census-tiger","text":"For the United States you can choose to import additonal street-level data. The data isn't mixed into OSM data but queried as fallback when no OSM result can be found. More details in osm-search/TIGER-data .","title":"US Census TIGER"},{"location":"develop/data-sources/#gb-postcodes","text":"For Great Britain you can choose to import Royalmail postcode centroids. More details in osm-search/gb-postcode-data .","title":"GB postcodes"},{"location":"develop/data-sources/#wikipedia-wikidata-rankings","text":"Nominatim can import \"importance\" data of place names. This greatly improves ranking of results. More details in osm-search/wikipedia-wikidata .","title":"Wikipedia &amp; Wikidata rankings"},{"location":"develop/overview/","text":"Basic Architecture \uf0c1 Nominatim provides geocoding based on OpenStreetMap data. It uses a PostgreSQL database as a backend for storing the data. There are three basic parts to Nominatim's architecture: the data import, the address computation and the search frontend. The data import stage reads the raw OSM data and extracts all information that is useful for geocoding. This part is done by osm2pgsql, the same tool that can also be used to import a rendering database. It uses the special gazetteer output plugin in osm2pgsql/src/output-gazetter.[ch]pp . The result of the import can be found in the database table place . The address computation or indexing stage takes the data from place and adds additional information needed for geocoding. It ranks the places by importance, links objects that belong together and computes addresses and the search index. Most of this work is done in PL/pgSQL via database triggers and can be found in the files in the sql/functions/ directory. The search frontend implements the actual API. It takes search and reverse geocoding queries from the user, looks up the data and returns the results in the requested format. This part is written in PHP and can be found in the lib/ and website/ directories.","title":"Architecture Overview"},{"location":"develop/overview/#basic-architecture","text":"Nominatim provides geocoding based on OpenStreetMap data. It uses a PostgreSQL database as a backend for storing the data. There are three basic parts to Nominatim's architecture: the data import, the address computation and the search frontend. The data import stage reads the raw OSM data and extracts all information that is useful for geocoding. This part is done by osm2pgsql, the same tool that can also be used to import a rendering database. It uses the special gazetteer output plugin in osm2pgsql/src/output-gazetter.[ch]pp . The result of the import can be found in the database table place . The address computation or indexing stage takes the data from place and adds additional information needed for geocoding. It ranks the places by importance, links objects that belong together and computes addresses and the search index. Most of this work is done in PL/pgSQL via database triggers and can be found in the files in the sql/functions/ directory. The search frontend implements the actual API. It takes search and reverse geocoding queries from the user, looks up the data and returns the results in the requested format. This part is written in PHP and can be found in the lib/ and website/ directories.","title":"Basic Architecture"}]}